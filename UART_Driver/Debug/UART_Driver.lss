
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00002270  000022e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c98  00000000  00000000  00002344  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001002  00000000  00000000  00003fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000511e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000528e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000972b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 36 11 	jmp	0x226c	; 0x226c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 eb       	ldi	r26, 0xB8	; 184
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 27 11 	jmp	0x224e	; 0x224e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 27 11 	jmp	0x224e	; 0x224e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 eb       	ldi	r24, 0xB8	; 184
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 27 11 	jmp	0x224e	; 0x224e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 27 11 	jmp	0x224e	; 0x224e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 27 11 	jmp	0x224e	; 0x224e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:


#define F_CPU 8000000UL

void main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
     b40:	0e 94 9f 09 	call	0x133e	; 0x133e <MDIO_voidInit>
	MUART_voidInit();
     b44:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <MUART_voidInit>
	u8 local_u8ReceivedData = 255;
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	89 83       	std	Y+1, r24	; 0x01
	MUART_voidSendStringSyncNonBlocking("To Turn ON The LED Press o or O \r\nTo Turn OFF The LED Press f or F\r\n");
     b4c:	80 e6       	ldi	r24, 0x60	; 96
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 3f 10 	call	0x207e	; 0x207e <MUART_voidSendStringSyncNonBlocking>
	while(1)
	{
		local_u8ReceivedData = MUART_u8ReadByteSyncBlocking();
     b54:	0e 94 76 10 	call	0x20ec	; 0x20ec <MUART_u8ReadByteSyncBlocking>
     b58:	89 83       	std	Y+1, r24	; 0x01
		if((local_u8ReceivedData) == 'o' || (local_u8ReceivedData == 'O'))
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	8f 36       	cpi	r24, 0x6F	; 111
     b5e:	19 f0       	breq	.+6      	; 0xb66 <main+0x30>
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	8f 34       	cpi	r24, 0x4F	; 79
     b64:	49 f4       	brne	.+18     	; 0xb78 <main+0x42>
		{
			HLED_voidTurnLEDOn(DIO_PORTA,PIN0);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <HLED_voidTurnLEDOn>
			MUART_voidSendStringSyncNonBlocking("LED ON\r\n");
     b6e:	85 ea       	ldi	r24, 0xA5	; 165
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 3f 10 	call	0x207e	; 0x207e <MUART_voidSendStringSyncNonBlocking>
     b76:	ee cf       	rjmp	.-36     	; 0xb54 <main+0x1e>
		}
		else if((local_u8ReceivedData) == 'f' || (local_u8ReceivedData == 'F'))
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	86 36       	cpi	r24, 0x66	; 102
     b7c:	19 f0       	breq	.+6      	; 0xb84 <main+0x4e>
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	86 34       	cpi	r24, 0x46	; 70
     b82:	41 f7       	brne	.-48     	; 0xb54 <main+0x1e>
		{
			HLED_voidTurnLEDOff(DIO_PORTA,PIN0);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <HLED_voidTurnLEDOff>
			MUART_voidSendStringSyncNonBlocking("LED OFF\r\n");
     b8c:	8e ea       	ldi	r24, 0xAE	; 174
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 3f 10 	call	0x207e	; 0x207e <MUART_voidSendStringSyncNonBlocking>
     b94:	df cf       	rjmp	.-66     	; 0xb54 <main+0x1e>

00000b96 <MDIO_voidSetPinDirection>:
#include "../include/MCAL/DIO/DIO_Private.h"
#include "../include/MCAL/DIO/DIO_Cfg.h"


void MDIO_voidSetPinDirection(DIO_PORT_e A_portID,DIO_PIN_e A_pinID,DIO_DIRECTION_e A_pinDirection)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	2d 97       	sbiw	r28, 0x0d	; 13
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	6a 83       	std	Y+2, r22	; 0x02
     bae:	4b 83       	std	Y+3, r20	; 0x03
	//Input validation
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT))
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <MDIO_voidSetPinDirection+0x22>
     bb6:	09 c1       	rjmp	.+530    	; 0xdca <MDIO_voidSetPinDirection+0x234>
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	88 30       	cpi	r24, 0x08	; 8
     bbc:	08 f0       	brcs	.+2      	; 0xbc0 <MDIO_voidSetPinDirection+0x2a>
     bbe:	05 c1       	rjmp	.+522    	; 0xdca <MDIO_voidSetPinDirection+0x234>
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	08 f0       	brcs	.+2      	; 0xbc8 <MDIO_voidSetPinDirection+0x32>
     bc6:	01 c1       	rjmp	.+514    	; 0xdca <MDIO_voidSetPinDirection+0x234>
	{
		switch(A_portID)
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3d 87       	std	Y+13, r19	; 0x0d
     bd0:	2c 87       	std	Y+12, r18	; 0x0c
     bd2:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd4:	9d 85       	ldd	r25, Y+13	; 0x0d
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <MDIO_voidSetPinDirection+0x48>
     bdc:	4f c0       	rjmp	.+158    	; 0xc7c <MDIO_voidSetPinDirection+0xe6>
     bde:	2c 85       	ldd	r18, Y+12	; 0x0c
     be0:	3d 85       	ldd	r19, Y+13	; 0x0d
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	2c f4       	brge	.+10     	; 0xbf2 <MDIO_voidSetPinDirection+0x5c>
     be8:	8c 85       	ldd	r24, Y+12	; 0x0c
     bea:	9d 85       	ldd	r25, Y+13	; 0x0d
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	71 f0       	breq	.+28     	; 0xc0c <MDIO_voidSetPinDirection+0x76>
     bf0:	ec c0       	rjmp	.+472    	; 0xdca <MDIO_voidSetPinDirection+0x234>
     bf2:	2c 85       	ldd	r18, Y+12	; 0x0c
     bf4:	3d 85       	ldd	r19, Y+13	; 0x0d
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <MDIO_voidSetPinDirection+0x68>
     bfc:	77 c0       	rjmp	.+238    	; 0xcec <MDIO_voidSetPinDirection+0x156>
     bfe:	8c 85       	ldd	r24, Y+12	; 0x0c
     c00:	9d 85       	ldd	r25, Y+13	; 0x0d
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <MDIO_voidSetPinDirection+0x74>
     c08:	a9 c0       	rjmp	.+338    	; 0xd5c <MDIO_voidSetPinDirection+0x1c6>
     c0a:	df c0       	rjmp	.+446    	; 0xdca <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch(A_pinDirection)
     c0c:	8b 81       	ldd	r24, Y+3	; 0x03
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	3b 87       	std	Y+11, r19	; 0x0b
     c14:	2a 87       	std	Y+10, r18	; 0x0a
     c16:	8a 85       	ldd	r24, Y+10	; 0x0a
     c18:	9b 85       	ldd	r25, Y+11	; 0x0b
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	31 f0       	breq	.+12     	; 0xc2a <MDIO_voidSetPinDirection+0x94>
     c1e:	2a 85       	ldd	r18, Y+10	; 0x0a
     c20:	3b 85       	ldd	r19, Y+11	; 0x0b
     c22:	21 30       	cpi	r18, 0x01	; 1
     c24:	31 05       	cpc	r19, r1
     c26:	b1 f0       	breq	.+44     	; 0xc54 <MDIO_voidSetPinDirection+0xbe>
     c28:	d0 c0       	rjmp	.+416    	; 0xdca <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
     c2a:	aa e3       	ldi	r26, 0x3A	; 58
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ea e3       	ldi	r30, 0x3A	; 58
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	48 2f       	mov	r20, r24
     c36:	8a 81       	ldd	r24, Y+2	; 0x02
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 2e       	mov	r0, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <MDIO_voidSetPinDirection+0xb2>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <MDIO_voidSetPinDirection+0xae>
     c4c:	80 95       	com	r24
     c4e:	84 23       	and	r24, r20
     c50:	8c 93       	st	X, r24
     c52:	bb c0       	rjmp	.+374    	; 0xdca <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
     c54:	aa e3       	ldi	r26, 0x3A	; 58
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	ea e3       	ldi	r30, 0x3A	; 58
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <MDIO_voidSetPinDirection+0xdc>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <MDIO_voidSetPinDirection+0xd8>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	a7 c0       	rjmp	.+334    	; 0xdca <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			case DIO_PORTB:
				switch(A_pinDirection)
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	39 87       	std	Y+9, r19	; 0x09
     c84:	28 87       	std	Y+8, r18	; 0x08
     c86:	88 85       	ldd	r24, Y+8	; 0x08
     c88:	99 85       	ldd	r25, Y+9	; 0x09
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	31 f0       	breq	.+12     	; 0xc9a <MDIO_voidSetPinDirection+0x104>
     c8e:	28 85       	ldd	r18, Y+8	; 0x08
     c90:	39 85       	ldd	r19, Y+9	; 0x09
     c92:	21 30       	cpi	r18, 0x01	; 1
     c94:	31 05       	cpc	r19, r1
     c96:	b1 f0       	breq	.+44     	; 0xcc4 <MDIO_voidSetPinDirection+0x12e>
     c98:	98 c0       	rjmp	.+304    	; 0xdca <MDIO_voidSetPinDirection+0x234>
				{
				case DIO_INPUT:
					CLR_BIT(DDRB_REG,A_pinID);
     c9a:	a7 e3       	ldi	r26, 0x37	; 55
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <MDIO_voidSetPinDirection+0x122>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <MDIO_voidSetPinDirection+0x11e>
     cbc:	80 95       	com	r24
     cbe:	84 23       	and	r24, r20
     cc0:	8c 93       	st	X, r24
     cc2:	83 c0       	rjmp	.+262    	; 0xdca <MDIO_voidSetPinDirection+0x234>
					break;
				case DIO_OUTPUT:
					SET_BIT(DDRB_REG,A_pinID);
     cc4:	a7 e3       	ldi	r26, 0x37	; 55
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e3       	ldi	r30, 0x37	; 55
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <MDIO_voidSetPinDirection+0x14c>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <MDIO_voidSetPinDirection+0x148>
     ce6:	84 2b       	or	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	6f c0       	rjmp	.+222    	; 0xdca <MDIO_voidSetPinDirection+0x234>
					break;
				}
				break;
				case DIO_PORTC:
					switch(A_pinDirection)
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	3f 83       	std	Y+7, r19	; 0x07
     cf4:	2e 83       	std	Y+6, r18	; 0x06
     cf6:	8e 81       	ldd	r24, Y+6	; 0x06
     cf8:	9f 81       	ldd	r25, Y+7	; 0x07
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	31 f0       	breq	.+12     	; 0xd0a <MDIO_voidSetPinDirection+0x174>
     cfe:	2e 81       	ldd	r18, Y+6	; 0x06
     d00:	3f 81       	ldd	r19, Y+7	; 0x07
     d02:	21 30       	cpi	r18, 0x01	; 1
     d04:	31 05       	cpc	r19, r1
     d06:	b1 f0       	breq	.+44     	; 0xd34 <MDIO_voidSetPinDirection+0x19e>
     d08:	60 c0       	rjmp	.+192    	; 0xdca <MDIO_voidSetPinDirection+0x234>
					{
					case DIO_INPUT:
						CLR_BIT(DDRC_REG,A_pinID);
     d0a:	a4 e3       	ldi	r26, 0x34	; 52
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e4 e3       	ldi	r30, 0x34	; 52
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <MDIO_voidSetPinDirection+0x192>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <MDIO_voidSetPinDirection+0x18e>
     d2c:	80 95       	com	r24
     d2e:	84 23       	and	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	4b c0       	rjmp	.+150    	; 0xdca <MDIO_voidSetPinDirection+0x234>
						break;
					case DIO_OUTPUT:
						SET_BIT(DDRC_REG,A_pinID);
     d34:	a4 e3       	ldi	r26, 0x34	; 52
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e4 e3       	ldi	r30, 0x34	; 52
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <MDIO_voidSetPinDirection+0x1bc>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <MDIO_voidSetPinDirection+0x1b8>
     d56:	84 2b       	or	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	37 c0       	rjmp	.+110    	; 0xdca <MDIO_voidSetPinDirection+0x234>
						break;
					}
					break;
					case DIO_PORTD:
						switch(A_pinDirection)
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3d 83       	std	Y+5, r19	; 0x05
     d64:	2c 83       	std	Y+4, r18	; 0x04
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	9d 81       	ldd	r25, Y+5	; 0x05
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	31 f0       	breq	.+12     	; 0xd7a <MDIO_voidSetPinDirection+0x1e4>
     d6e:	2c 81       	ldd	r18, Y+4	; 0x04
     d70:	3d 81       	ldd	r19, Y+5	; 0x05
     d72:	21 30       	cpi	r18, 0x01	; 1
     d74:	31 05       	cpc	r19, r1
     d76:	b1 f0       	breq	.+44     	; 0xda4 <MDIO_voidSetPinDirection+0x20e>
     d78:	28 c0       	rjmp	.+80     	; 0xdca <MDIO_voidSetPinDirection+0x234>
						{
						case DIO_INPUT:
							CLR_BIT(DDRD_REG,A_pinID);
     d7a:	a1 e3       	ldi	r26, 0x31	; 49
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e1 e3       	ldi	r30, 0x31	; 49
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <MDIO_voidSetPinDirection+0x202>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <MDIO_voidSetPinDirection+0x1fe>
     d9c:	80 95       	com	r24
     d9e:	84 23       	and	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	13 c0       	rjmp	.+38     	; 0xdca <MDIO_voidSetPinDirection+0x234>
							break;
						case DIO_OUTPUT:
							SET_BIT(DDRD_REG,A_pinID);
     da4:	a1 e3       	ldi	r26, 0x31	; 49
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e1 e3       	ldi	r30, 0x31	; 49
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <MDIO_voidSetPinDirection+0x22c>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <MDIO_voidSetPinDirection+0x228>
     dc6:	84 2b       	or	r24, r20
     dc8:	8c 93       	st	X, r24
	}
	else
	{
		//DO Nothing
	}
}
     dca:	2d 96       	adiw	r28, 0x0d	; 13
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID,DIO_VALUE_e A_pinValue)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	2d 97       	sbiw	r28, 0x0d	; 13
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	89 83       	std	Y+1, r24	; 0x01
     df2:	6a 83       	std	Y+2, r22	; 0x02
     df4:	4b 83       	std	Y+3, r20	; 0x03
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_SET))
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <MDIO_voidSetPinValue+0x22>
     dfc:	09 c1       	rjmp	.+530    	; 0x1010 <MDIO_voidSetPinValue+0x234>
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	08 f0       	brcs	.+2      	; 0xe06 <MDIO_voidSetPinValue+0x2a>
     e04:	05 c1       	rjmp	.+522    	; 0x1010 <MDIO_voidSetPinValue+0x234>
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <MDIO_voidSetPinValue+0x32>
     e0c:	01 c1       	rjmp	.+514    	; 0x1010 <MDIO_voidSetPinValue+0x234>
	{
		switch(A_portID)
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	3d 87       	std	Y+13, r19	; 0x0d
     e16:	2c 87       	std	Y+12, r18	; 0x0c
     e18:	8c 85       	ldd	r24, Y+12	; 0x0c
     e1a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	91 05       	cpc	r25, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <MDIO_voidSetPinValue+0x48>
     e22:	4f c0       	rjmp	.+158    	; 0xec2 <MDIO_voidSetPinValue+0xe6>
     e24:	2c 85       	ldd	r18, Y+12	; 0x0c
     e26:	3d 85       	ldd	r19, Y+13	; 0x0d
     e28:	22 30       	cpi	r18, 0x02	; 2
     e2a:	31 05       	cpc	r19, r1
     e2c:	2c f4       	brge	.+10     	; 0xe38 <MDIO_voidSetPinValue+0x5c>
     e2e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e30:	9d 85       	ldd	r25, Y+13	; 0x0d
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	71 f0       	breq	.+28     	; 0xe52 <MDIO_voidSetPinValue+0x76>
     e36:	ec c0       	rjmp	.+472    	; 0x1010 <MDIO_voidSetPinValue+0x234>
     e38:	2c 85       	ldd	r18, Y+12	; 0x0c
     e3a:	3d 85       	ldd	r19, Y+13	; 0x0d
     e3c:	22 30       	cpi	r18, 0x02	; 2
     e3e:	31 05       	cpc	r19, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <MDIO_voidSetPinValue+0x68>
     e42:	77 c0       	rjmp	.+238    	; 0xf32 <MDIO_voidSetPinValue+0x156>
     e44:	8c 85       	ldd	r24, Y+12	; 0x0c
     e46:	9d 85       	ldd	r25, Y+13	; 0x0d
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	91 05       	cpc	r25, r1
     e4c:	09 f4       	brne	.+2      	; 0xe50 <MDIO_voidSetPinValue+0x74>
     e4e:	a9 c0       	rjmp	.+338    	; 0xfa2 <MDIO_voidSetPinValue+0x1c6>
     e50:	df c0       	rjmp	.+446    	; 0x1010 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch(A_pinValue)
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	3b 87       	std	Y+11, r19	; 0x0b
     e5a:	2a 87       	std	Y+10, r18	; 0x0a
     e5c:	8a 85       	ldd	r24, Y+10	; 0x0a
     e5e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	31 f0       	breq	.+12     	; 0xe70 <MDIO_voidSetPinValue+0x94>
     e64:	2a 85       	ldd	r18, Y+10	; 0x0a
     e66:	3b 85       	ldd	r19, Y+11	; 0x0b
     e68:	21 30       	cpi	r18, 0x01	; 1
     e6a:	31 05       	cpc	r19, r1
     e6c:	b1 f0       	breq	.+44     	; 0xe9a <MDIO_voidSetPinValue+0xbe>
     e6e:	d0 c0       	rjmp	.+416    	; 0x1010 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
     e70:	ab e3       	ldi	r26, 0x3B	; 59
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	eb e3       	ldi	r30, 0x3B	; 59
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <MDIO_voidSetPinValue+0xb2>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <MDIO_voidSetPinValue+0xae>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	bb c0       	rjmp	.+374    	; 0x1010 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
     e9a:	ab e3       	ldi	r26, 0x3B	; 59
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	eb e3       	ldi	r30, 0x3B	; 59
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <MDIO_voidSetPinValue+0xdc>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <MDIO_voidSetPinValue+0xd8>
     ebc:	84 2b       	or	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	a7 c0       	rjmp	.+334    	; 0x1010 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			case DIO_PORTB:
				switch(A_pinValue)
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	39 87       	std	Y+9, r19	; 0x09
     eca:	28 87       	std	Y+8, r18	; 0x08
     ecc:	88 85       	ldd	r24, Y+8	; 0x08
     ece:	99 85       	ldd	r25, Y+9	; 0x09
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	31 f0       	breq	.+12     	; 0xee0 <MDIO_voidSetPinValue+0x104>
     ed4:	28 85       	ldd	r18, Y+8	; 0x08
     ed6:	39 85       	ldd	r19, Y+9	; 0x09
     ed8:	21 30       	cpi	r18, 0x01	; 1
     eda:	31 05       	cpc	r19, r1
     edc:	b1 f0       	breq	.+44     	; 0xf0a <MDIO_voidSetPinValue+0x12e>
     ede:	98 c0       	rjmp	.+304    	; 0x1010 <MDIO_voidSetPinValue+0x234>
				{
				case DIO_RESET:
					CLR_BIT(PORTB_REG,A_pinID);
     ee0:	a8 e3       	ldi	r26, 0x38	; 56
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e8 e3       	ldi	r30, 0x38	; 56
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <MDIO_voidSetPinValue+0x122>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <MDIO_voidSetPinValue+0x11e>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	83 c0       	rjmp	.+262    	; 0x1010 <MDIO_voidSetPinValue+0x234>
					break;
				case DIO_SET:
					SET_BIT(PORTB_REG,A_pinID);
     f0a:	a8 e3       	ldi	r26, 0x38	; 56
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e8 e3       	ldi	r30, 0x38	; 56
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <MDIO_voidSetPinValue+0x14c>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <MDIO_voidSetPinValue+0x148>
     f2c:	84 2b       	or	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	6f c0       	rjmp	.+222    	; 0x1010 <MDIO_voidSetPinValue+0x234>
					break;
				}
				break;
				case DIO_PORTC:
					switch(A_pinValue)
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3f 83       	std	Y+7, r19	; 0x07
     f3a:	2e 83       	std	Y+6, r18	; 0x06
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	31 f0       	breq	.+12     	; 0xf50 <MDIO_voidSetPinValue+0x174>
     f44:	2e 81       	ldd	r18, Y+6	; 0x06
     f46:	3f 81       	ldd	r19, Y+7	; 0x07
     f48:	21 30       	cpi	r18, 0x01	; 1
     f4a:	31 05       	cpc	r19, r1
     f4c:	b1 f0       	breq	.+44     	; 0xf7a <MDIO_voidSetPinValue+0x19e>
     f4e:	60 c0       	rjmp	.+192    	; 0x1010 <MDIO_voidSetPinValue+0x234>
					{
					case DIO_RESET:
						CLR_BIT(PORTC_REG,A_pinID);
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <MDIO_voidSetPinValue+0x192>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <MDIO_voidSetPinValue+0x18e>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	4b c0       	rjmp	.+150    	; 0x1010 <MDIO_voidSetPinValue+0x234>
						break;
					case DIO_SET:
						SET_BIT(PORTC_REG,A_pinID);
     f7a:	a5 e3       	ldi	r26, 0x35	; 53
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <MDIO_voidSetPinValue+0x1bc>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <MDIO_voidSetPinValue+0x1b8>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	37 c0       	rjmp	.+110    	; 0x1010 <MDIO_voidSetPinValue+0x234>
						break;
					}
					break;
					case DIO_PORTD:
						switch(A_pinValue)
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3d 83       	std	Y+5, r19	; 0x05
     faa:	2c 83       	std	Y+4, r18	; 0x04
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <MDIO_voidSetPinValue+0x1e4>
     fb4:	2c 81       	ldd	r18, Y+4	; 0x04
     fb6:	3d 81       	ldd	r19, Y+5	; 0x05
     fb8:	21 30       	cpi	r18, 0x01	; 1
     fba:	31 05       	cpc	r19, r1
     fbc:	b1 f0       	breq	.+44     	; 0xfea <MDIO_voidSetPinValue+0x20e>
     fbe:	28 c0       	rjmp	.+80     	; 0x1010 <MDIO_voidSetPinValue+0x234>
						{
						case DIO_RESET:
							CLR_BIT(PORTD_REG,A_pinID);
     fc0:	a2 e3       	ldi	r26, 0x32	; 50
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e2 e3       	ldi	r30, 0x32	; 50
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <MDIO_voidSetPinValue+0x202>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <MDIO_voidSetPinValue+0x1fe>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	13 c0       	rjmp	.+38     	; 0x1010 <MDIO_voidSetPinValue+0x234>
							break;
						case DIO_SET:
							SET_BIT(PORTD_REG,A_pinID);
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <MDIO_voidSetPinValue+0x22c>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <MDIO_voidSetPinValue+0x228>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
	}
	else
	{
		//DO Nothing
	}
}
    1010:	2d 96       	adiw	r28, 0x0d	; 13
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <MDIO_getPinValue>:


DIO_VALUE_e MDIO_getPinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <MDIO_getPinValue+0x6>
    1028:	00 d0       	rcall	.+0      	; 0x102a <MDIO_getPinValue+0x8>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	8a 83       	std	Y+2, r24	; 0x02
    1032:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7))
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	84 30       	cpi	r24, 0x04	; 4
    1038:	08 f0       	brcs	.+2      	; 0x103c <MDIO_getPinValue+0x1a>
    103a:	6b c0       	rjmp	.+214    	; 0x1112 <MDIO_getPinValue+0xf0>
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	88 30       	cpi	r24, 0x08	; 8
    1040:	08 f0       	brcs	.+2      	; 0x1044 <MDIO_getPinValue+0x22>
    1042:	67 c0       	rjmp	.+206    	; 0x1112 <MDIO_getPinValue+0xf0>
	{
		switch(A_portID)
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	3d 83       	std	Y+5, r19	; 0x05
    104c:	2c 83       	std	Y+4, r18	; 0x04
    104e:	4c 81       	ldd	r20, Y+4	; 0x04
    1050:	5d 81       	ldd	r21, Y+5	; 0x05
    1052:	41 30       	cpi	r20, 0x01	; 1
    1054:	51 05       	cpc	r21, r1
    1056:	41 f1       	breq	.+80     	; 0x10a8 <MDIO_getPinValue+0x86>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	91 05       	cpc	r25, r1
    1060:	34 f4       	brge	.+12     	; 0x106e <MDIO_getPinValue+0x4c>
    1062:	2c 81       	ldd	r18, Y+4	; 0x04
    1064:	3d 81       	ldd	r19, Y+5	; 0x05
    1066:	21 15       	cp	r18, r1
    1068:	31 05       	cpc	r19, r1
    106a:	61 f0       	breq	.+24     	; 0x1084 <MDIO_getPinValue+0x62>
    106c:	52 c0       	rjmp	.+164    	; 0x1112 <MDIO_getPinValue+0xf0>
    106e:	4c 81       	ldd	r20, Y+4	; 0x04
    1070:	5d 81       	ldd	r21, Y+5	; 0x05
    1072:	42 30       	cpi	r20, 0x02	; 2
    1074:	51 05       	cpc	r21, r1
    1076:	51 f1       	breq	.+84     	; 0x10cc <MDIO_getPinValue+0xaa>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	b9 f1       	breq	.+110    	; 0x10f0 <MDIO_getPinValue+0xce>
    1082:	47 c0       	rjmp	.+142    	; 0x1112 <MDIO_getPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1084:	e9 e3       	ldi	r30, 0x39	; 57
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a9 01       	movw	r20, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <MDIO_getPinValue+0x7a>
    1098:	55 95       	asr	r21
    109a:	47 95       	ror	r20
    109c:	8a 95       	dec	r24
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <MDIO_getPinValue+0x76>
    10a0:	ca 01       	movw	r24, r20
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	35 c0       	rjmp	.+106    	; 0x1112 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    10a8:	e6 e3       	ldi	r30, 0x36	; 54
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a9 01       	movw	r20, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <MDIO_getPinValue+0x9e>
    10bc:	55 95       	asr	r21
    10be:	47 95       	ror	r20
    10c0:	8a 95       	dec	r24
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <MDIO_getPinValue+0x9a>
    10c4:	ca 01       	movw	r24, r20
    10c6:	81 70       	andi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	23 c0       	rjmp	.+70     	; 0x1112 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    10cc:	e3 e3       	ldi	r30, 0x33	; 51
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <MDIO_getPinValue+0xc2>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <MDIO_getPinValue+0xbe>
    10e8:	ca 01       	movw	r24, r20
    10ea:	81 70       	andi	r24, 0x01	; 1
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	11 c0       	rjmp	.+34     	; 0x1112 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    10f0:	e0 e3       	ldi	r30, 0x30	; 48
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a9 01       	movw	r20, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <MDIO_getPinValue+0xe6>
    1104:	55 95       	asr	r21
    1106:	47 95       	ror	r20
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <MDIO_getPinValue+0xe2>
    110c:	ca 01       	movw	r24, r20
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	89 83       	std	Y+1, r24	; 0x01
	{
		//Do Nothing
	}


	return local_PinValue;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <MDIO_voidTogglePinValue>:




void MDIO_voidTogglePinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <MDIO_voidTogglePinValue+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <MDIO_voidTogglePinValue+0x8>
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7))
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	08 f0       	brcs	.+2      	; 0x113c <MDIO_voidTogglePinValue+0x18>
    113a:	72 c0       	rjmp	.+228    	; 0x1220 <MDIO_voidTogglePinValue+0xfc>
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	88 30       	cpi	r24, 0x08	; 8
    1140:	08 f0       	brcs	.+2      	; 0x1144 <MDIO_voidTogglePinValue+0x20>
    1142:	6e c0       	rjmp	.+220    	; 0x1220 <MDIO_voidTogglePinValue+0xfc>
	{
		switch(A_portID)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3c 83       	std	Y+4, r19	; 0x04
    114c:	2b 83       	std	Y+3, r18	; 0x03
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	49 f1       	breq	.+82     	; 0x11aa <MDIO_voidTogglePinValue+0x86>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	2c f4       	brge	.+10     	; 0x116c <MDIO_voidTogglePinValue+0x48>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	61 f0       	breq	.+24     	; 0x1182 <MDIO_voidTogglePinValue+0x5e>
    116a:	5a c0       	rjmp	.+180    	; 0x1220 <MDIO_voidTogglePinValue+0xfc>
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	22 30       	cpi	r18, 0x02	; 2
    1172:	31 05       	cpc	r19, r1
    1174:	71 f1       	breq	.+92     	; 0x11d2 <MDIO_voidTogglePinValue+0xae>
    1176:	8b 81       	ldd	r24, Y+3	; 0x03
    1178:	9c 81       	ldd	r25, Y+4	; 0x04
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	e9 f1       	breq	.+122    	; 0x11fa <MDIO_voidTogglePinValue+0xd6>
    1180:	4f c0       	rjmp	.+158    	; 0x1220 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOG_BIT(PORTA_REG,A_pinID);
    1182:	ab e3       	ldi	r26, 0x3B	; 59
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	eb e3       	ldi	r30, 0x3B	; 59
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	48 2f       	mov	r20, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 2e       	mov	r0, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <MDIO_voidTogglePinValue+0x7c>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	0a 94       	dec	r0
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <MDIO_voidTogglePinValue+0x78>
    11a4:	84 27       	eor	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	3b c0       	rjmp	.+118    	; 0x1220 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOG_BIT(PORTB_REG,A_pinID);
    11aa:	a8 e3       	ldi	r26, 0x38	; 56
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e8 e3       	ldi	r30, 0x38	; 56
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <MDIO_voidTogglePinValue+0xa4>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <MDIO_voidTogglePinValue+0xa0>
    11cc:	84 27       	eor	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	27 c0       	rjmp	.+78     	; 0x1220 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOG_BIT(PORTC_REG,A_pinID);
    11d2:	a5 e3       	ldi	r26, 0x35	; 53
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e5 e3       	ldi	r30, 0x35	; 53
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <MDIO_voidTogglePinValue+0xcc>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <MDIO_voidTogglePinValue+0xc8>
    11f4:	84 27       	eor	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	13 c0       	rjmp	.+38     	; 0x1220 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOG_BIT(PORTD_REG,A_pinID);
    11fa:	a2 e3       	ldi	r26, 0x32	; 50
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e2 e3       	ldi	r30, 0x32	; 50
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <MDIO_voidTogglePinValue+0xf4>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <MDIO_voidTogglePinValue+0xf0>
    121c:	84 27       	eor	r24, r20
    121e:	8c 93       	st	X, r24
	else
	{
		//Do Nothing
	}

}
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(DIO_PORT_e A_portID,u8 A_u8PortDirection)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <MDIO_voidSetPortDirection+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <MDIO_voidSetPortDirection+0x8>
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
	if(A_portID <= DIO_PORTD)
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	84 30       	cpi	r24, 0x04	; 4
    1242:	90 f5       	brcc	.+100    	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
	{
		switch(A_portID)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 83       	std	Y+4, r19	; 0x04
    124c:	2b 83       	std	Y+3, r18	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	d1 f0       	breq	.+52     	; 0x128c <MDIO_voidSetPortDirection+0x5e>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <MDIO_voidSetPortDirection+0x3e>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <MDIO_voidSetPortDirection+0x54>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <MDIO_voidSetPortDirection+0x68>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <MDIO_voidSetPortDirection+0x72>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    128c:	e7 e3       	ldi	r30, 0x37	; 55
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
	else
	{
		//Do Nothing
	}

}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(DIO_PORT_e A_portID,u8 A_u8PortValue)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <MDIO_voidSetPortValue+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <MDIO_voidSetPortValue+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	6a 83       	std	Y+2, r22	; 0x02
	if(A_portID <= DIO_PORTD)
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	90 f5       	brcc	.+100    	; 0x1330 <MDIO_voidSetPortValue+0x7a>
	{
		switch(A_portID)
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	3c 83       	std	Y+4, r19	; 0x04
    12d4:	2b 83       	std	Y+3, r18	; 0x03
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	d1 f0       	breq	.+52     	; 0x1314 <MDIO_voidSetPortValue+0x5e>
    12e0:	2b 81       	ldd	r18, Y+3	; 0x03
    12e2:	3c 81       	ldd	r19, Y+4	; 0x04
    12e4:	22 30       	cpi	r18, 0x02	; 2
    12e6:	31 05       	cpc	r19, r1
    12e8:	2c f4       	brge	.+10     	; 0x12f4 <MDIO_voidSetPortValue+0x3e>
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	61 f0       	breq	.+24     	; 0x130a <MDIO_voidSetPortValue+0x54>
    12f2:	1e c0       	rjmp	.+60     	; 0x1330 <MDIO_voidSetPortValue+0x7a>
    12f4:	2b 81       	ldd	r18, Y+3	; 0x03
    12f6:	3c 81       	ldd	r19, Y+4	; 0x04
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <MDIO_voidSetPortValue+0x68>
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	91 05       	cpc	r25, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <MDIO_voidSetPortValue+0x72>
    1308:	13 c0       	rjmp	.+38     	; 0x1330 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    130a:	eb e3       	ldi	r30, 0x3B	; 59
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
    1312:	0e c0       	rjmp	.+28     	; 0x1330 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    131e:	e5 e3       	ldi	r30, 0x35	; 53
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    1328:	e2 e3       	ldi	r30, 0x32	; 50
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <MDIO_voidInit>:


MDIO_voidInit(void)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);
    1346:	ea e3       	ldi	r30, 0x3A	; 58
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	83 e0       	ldi	r24, 0x03	; 3
    134c:	80 83       	st	Z, r24

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);
    134e:	e7 e3       	ldi	r30, 0x37	; 55
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	88 e0       	ldi	r24, 0x08	; 8
    1354:	80 83       	st	Z, r24

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);
    1356:	e4 e3       	ldi	r30, 0x34	; 52
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	80 83       	st	Z, r24

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);
    135e:	e1 e3       	ldi	r30, 0x31	; 49
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	8a e3       	ldi	r24, 0x3A	; 58
    1364:	80 83       	st	Z, r24



	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);
    1366:	eb e3       	ldi	r30, 0x3B	; 59
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	10 82       	st	Z, r1

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);
    136c:	e8 e3       	ldi	r30, 0x38	; 56
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	10 82       	st	Z, r1

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);
    1372:	e5 e3       	ldi	r30, 0x35	; 53
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	10 82       	st	Z, r1

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
    1378:	e2 e3       	ldi	r30, 0x32	; 50
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	10 82       	st	Z, r1


}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_Cfg.h"


void MGI_voidEnable (void)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    138c:	af e5       	ldi	r26, 0x5F	; 95
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ef e5       	ldi	r30, 0x5F	; 95
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 68       	ori	r24, 0x80	; 128
    1398:	8c 93       	st	X, r24
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    13a8:	af e5       	ldi	r26, 0x5F	; 95
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ef e5       	ldi	r30, 0x5F	; 95
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 77       	andi	r24, 0x7F	; 127
    13b4:	8c 93       	st	X, r24
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <HLCD_voidSendCommand>:
#include <util/delay.h>

#define F_CPU	8000000UL

void HLCD_voidSendCommand(u8 A_u8Command)
 {
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	2f 97       	sbiw	r28, 0x0f	; 15
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	8f 87       	std	Y+15, r24	; 0x0f
	 //To Send Command	(RS-->0,RW-->0)
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_RESET);
    13d2:	83 e0       	ldi	r24, 0x03	; 3
    13d4:	63 e0       	ldi	r22, 0x03	; 3
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_RESET);
    13dc:	83 e0       	ldi	r24, 0x03	; 3
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>

	 //Send Command
	 MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    13ea:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>

	 //Set Pulse On E Pin
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_SET);
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	65 e0       	ldi	r22, 0x05	; 5
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	b0 e4       	ldi	r27, 0x40	; 64
    1400:	8b 87       	std	Y+11, r24	; 0x0b
    1402:	9c 87       	std	Y+12, r25	; 0x0c
    1404:	ad 87       	std	Y+13, r26	; 0x0d
    1406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	6b 85       	ldd	r22, Y+11	; 0x0b
    140a:	7c 85       	ldd	r23, Y+12	; 0x0c
    140c:	8d 85       	ldd	r24, Y+13	; 0x0d
    140e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8f 83       	std	Y+7, r24	; 0x07
    1422:	98 87       	std	Y+8, r25	; 0x08
    1424:	a9 87       	std	Y+9, r26	; 0x09
    1426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1428:	6f 81       	ldd	r22, Y+7	; 0x07
    142a:	78 85       	ldd	r23, Y+8	; 0x08
    142c:	89 85       	ldd	r24, Y+9	; 0x09
    142e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    144a:	6f 81       	ldd	r22, Y+7	; 0x07
    144c:	78 85       	ldd	r23, Y+8	; 0x08
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	6b 85       	ldd	r22, Y+11	; 0x0b
    1464:	7c 85       	ldd	r23, Y+12	; 0x0c
    1466:	8d 85       	ldd	r24, Y+13	; 0x0d
    1468:	9e 85       	ldd	r25, Y+14	; 0x0e
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <HLCD_voidSendCommand+0xee>
    148c:	88 ec       	ldi	r24, 0xC8	; 200
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <HLCD_voidSendCommand+0xdc>
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <HLCD_voidSendCommand+0xd0>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <HLCD_voidSendCommand+0x118>
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_RESET);
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	65 e0       	ldi	r22, 0x05	; 5
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>


 }
    14e6:	2f 96       	adiw	r28, 0x0f	; 15
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
 {
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	2f 97       	sbiw	r28, 0x0f	; 15
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	8f 87       	std	Y+15, r24	; 0x0f
	     //To Send Data(RS-->1,RW-->0)
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_SET);
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	63 e0       	ldi	r22, 0x03	; 3
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_RESET);
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	64 e0       	ldi	r22, 0x04	; 4
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>

	 	 //Send Data
	 	 MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	6f 85       	ldd	r22, Y+15	; 0x0f
    1526:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <MDIO_voidSetPortValue>

	 	 //Set Pulse On E Pin
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_SET);
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	65 e0       	ldi	r22, 0x05	; 5
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a0 e0       	ldi	r26, 0x00	; 0
    153a:	b0 e4       	ldi	r27, 0x40	; 64
    153c:	8b 87       	std	Y+11, r24	; 0x0b
    153e:	9c 87       	std	Y+12, r25	; 0x0c
    1540:	ad 87       	std	Y+13, r26	; 0x0d
    1542:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1544:	6b 85       	ldd	r22, Y+11	; 0x0b
    1546:	7c 85       	ldd	r23, Y+12	; 0x0c
    1548:	8d 85       	ldd	r24, Y+13	; 0x0d
    154a:	9e 85       	ldd	r25, Y+14	; 0x0e
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	4a ef       	ldi	r20, 0xFA	; 250
    1552:	54 e4       	ldi	r21, 0x44	; 68
    1554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	8f 83       	std	Y+7, r24	; 0x07
    155e:	98 87       	std	Y+8, r25	; 0x08
    1560:	a9 87       	std	Y+9, r26	; 0x09
    1562:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1564:	6f 81       	ldd	r22, Y+7	; 0x07
    1566:	78 85       	ldd	r23, Y+8	; 0x08
    1568:	89 85       	ldd	r24, Y+9	; 0x09
    156a:	9a 85       	ldd	r25, Y+10	; 0x0a
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	5f e3       	ldi	r21, 0x3F	; 63
    1574:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1578:	88 23       	and	r24, r24
    157a:	2c f4       	brge	.+10     	; 0x1586 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9e 83       	std	Y+6, r25	; 0x06
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	3f c0       	rjmp	.+126    	; 0x1604 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	3f ef       	ldi	r19, 0xFF	; 255
    1592:	4f e7       	ldi	r20, 0x7F	; 127
    1594:	57 e4       	ldi	r21, 0x47	; 71
    1596:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    159a:	18 16       	cp	r1, r24
    159c:	4c f5       	brge	.+82     	; 0x15f0 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159e:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e2       	ldi	r20, 0x20	; 32
    15ac:	51 e4       	ldi	r21, 0x41	; 65
    15ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	bc 01       	movw	r22, r24
    15b8:	cd 01       	movw	r24, r26
    15ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <HLCD_voidSendData+0xee>
    15c8:	88 ec       	ldi	r24, 0xC8	; 200
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9c 83       	std	Y+4, r25	; 0x04
    15ce:	8b 83       	std	Y+3, r24	; 0x03
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <HLCD_voidSendData+0xdc>
    15d8:	9c 83       	std	Y+4, r25	; 0x04
    15da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	9e 81       	ldd	r25, Y+6	; 0x06
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	9e 83       	std	Y+6, r25	; 0x06
    15e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	69 f7       	brne	.-38     	; 0x15c8 <HLCD_voidSendData+0xd0>
    15ee:	14 c0       	rjmp	.+40     	; 0x1618 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f0:	6f 81       	ldd	r22, Y+7	; 0x07
    15f2:	78 85       	ldd	r23, Y+8	; 0x08
    15f4:	89 85       	ldd	r24, Y+9	; 0x09
    15f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	9e 81       	ldd	r25, Y+6	; 0x06
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <HLCD_voidSendData+0x118>
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
	 	 _delay_ms(2);
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_RESET);
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	65 e0       	ldi	r22, 0x05	; 5
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>


 }
    1622:	2f 96       	adiw	r28, 0x0f	; 15
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	c6 54       	subi	r28, 0x46	; 70
    1642:	d0 40       	sbci	r29, 0x00	; 0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	fe 01       	movw	r30, r28
    1650:	ed 5b       	subi	r30, 0xBD	; 189
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	a0 ef       	ldi	r26, 0xF0	; 240
    165a:	b1 e4       	ldi	r27, 0x41	; 65
    165c:	80 83       	st	Z, r24
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	a2 83       	std	Z+2, r26	; 0x02
    1662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1664:	8e 01       	movw	r16, r28
    1666:	01 5c       	subi	r16, 0xC1	; 193
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	ed 5b       	subi	r30, 0xBD	; 189
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	4a ef       	ldi	r20, 0xFA	; 250
    167e:	54 e4       	ldi	r21, 0x44	; 68
    1680:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	f8 01       	movw	r30, r16
    168a:	80 83       	st	Z, r24
    168c:	91 83       	std	Z+1, r25	; 0x01
    168e:	a2 83       	std	Z+2, r26	; 0x02
    1690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1692:	fe 01       	movw	r30, r28
    1694:	ff 96       	adiw	r30, 0x3f	; 63
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	82 81       	ldd	r24, Z+2	; 0x02
    169c:	93 81       	ldd	r25, Z+3	; 0x03
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e8       	ldi	r20, 0x80	; 128
    16a4:	5f e3       	ldi	r21, 0x3F	; 63
    16a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16aa:	88 23       	and	r24, r24
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <HLCD_voidInit+0x84>
		__ticks = 1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9e af       	std	Y+62, r25	; 0x3e
    16b4:	8d af       	std	Y+61, r24	; 0x3d
    16b6:	46 c0       	rjmp	.+140    	; 0x1744 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    16b8:	fe 01       	movw	r30, r28
    16ba:	ff 96       	adiw	r30, 0x3f	; 63
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	64 f5       	brge	.+88     	; 0x172c <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	fe 01       	movw	r30, r28
    16d6:	ed 5b       	subi	r30, 0xBD	; 189
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e2       	ldi	r20, 0x20	; 32
    16e8:	51 e4       	ldi	r21, 0x41	; 65
    16ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9e af       	std	Y+62, r25	; 0x3e
    1700:	8d af       	std	Y+61, r24	; 0x3d
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <HLCD_voidInit+0xee>
    1704:	88 ec       	ldi	r24, 0xC8	; 200
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9c af       	std	Y+60, r25	; 0x3c
    170a:	8b af       	std	Y+59, r24	; 0x3b
    170c:	8b ad       	ldd	r24, Y+59	; 0x3b
    170e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1710:	01 97       	sbiw	r24, 0x01	; 1
    1712:	f1 f7       	brne	.-4      	; 0x1710 <HLCD_voidInit+0xdc>
    1714:	9c af       	std	Y+60, r25	; 0x3c
    1716:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1718:	8d ad       	ldd	r24, Y+61	; 0x3d
    171a:	9e ad       	ldd	r25, Y+62	; 0x3e
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	9e af       	std	Y+62, r25	; 0x3e
    1720:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1722:	8d ad       	ldd	r24, Y+61	; 0x3d
    1724:	9e ad       	ldd	r25, Y+62	; 0x3e
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	69 f7       	brne	.-38     	; 0x1704 <HLCD_voidInit+0xd0>
    172a:	16 c0       	rjmp	.+44     	; 0x1758 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172c:	fe 01       	movw	r30, r28
    172e:	ff 96       	adiw	r30, 0x3f	; 63
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	82 81       	ldd	r24, Z+2	; 0x02
    1736:	93 81       	ldd	r25, Z+3	; 0x03
    1738:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9e af       	std	Y+62, r25	; 0x3e
    1742:	8d af       	std	Y+61, r24	; 0x3d
    1744:	8d ad       	ldd	r24, Y+61	; 0x3d
    1746:	9e ad       	ldd	r25, Y+62	; 0x3e
    1748:	9a af       	std	Y+58, r25	; 0x3a
    174a:	89 af       	std	Y+57, r24	; 0x39
    174c:	89 ad       	ldd	r24, Y+57	; 0x39
    174e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <HLCD_voidInit+0x11c>
    1754:	9a af       	std	Y+58, r25	; 0x3a
    1756:	89 af       	std	Y+57, r24	; 0x39
	//Wait For more than 30ms after VDD rises to 4.5v
	_delay_ms(30);

	//Function Set then wait 39	Ms
	HLCD_voidSendCommand(FUNCTION_SET);
    1758:	88 e3       	ldi	r24, 0x38	; 56
    175a:	0e 94 de 09 	call	0x13bc	; 0x13bc <HLCD_voidSendCommand>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a0 e8       	ldi	r26, 0x80	; 128
    1764:	bf e3       	ldi	r27, 0x3F	; 63
    1766:	8d ab       	std	Y+53, r24	; 0x35
    1768:	9e ab       	std	Y+54, r25	; 0x36
    176a:	af ab       	std	Y+55, r26	; 0x37
    176c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176e:	6d a9       	ldd	r22, Y+53	; 0x35
    1770:	7e a9       	ldd	r23, Y+54	; 0x36
    1772:	8f a9       	ldd	r24, Y+55	; 0x37
    1774:	98 ad       	ldd	r25, Y+56	; 0x38
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a ef       	ldi	r20, 0xFA	; 250
    177c:	54 e4       	ldi	r21, 0x44	; 68
    177e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	89 ab       	std	Y+49, r24	; 0x31
    1788:	9a ab       	std	Y+50, r25	; 0x32
    178a:	ab ab       	std	Y+51, r26	; 0x33
    178c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    178e:	69 a9       	ldd	r22, Y+49	; 0x31
    1790:	7a a9       	ldd	r23, Y+50	; 0x32
    1792:	8b a9       	ldd	r24, Y+51	; 0x33
    1794:	9c a9       	ldd	r25, Y+52	; 0x34
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <HLCD_voidInit+0x17c>
		__ticks = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	98 ab       	std	Y+48, r25	; 0x30
    17ac:	8f a7       	std	Y+47, r24	; 0x2f
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    17b0:	69 a9       	ldd	r22, Y+49	; 0x31
    17b2:	7a a9       	ldd	r23, Y+50	; 0x32
    17b4:	8b a9       	ldd	r24, Y+51	; 0x33
    17b6:	9c a9       	ldd	r25, Y+52	; 0x34
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	4c f5       	brge	.+82     	; 0x181a <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c8:	6d a9       	ldd	r22, Y+53	; 0x35
    17ca:	7e a9       	ldd	r23, Y+54	; 0x36
    17cc:	8f a9       	ldd	r24, Y+55	; 0x37
    17ce:	98 ad       	ldd	r25, Y+56	; 0x38
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	98 ab       	std	Y+48, r25	; 0x30
    17ee:	8f a7       	std	Y+47, r24	; 0x2f
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <HLCD_voidInit+0x1dc>
    17f2:	88 ec       	ldi	r24, 0xC8	; 200
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9e a7       	std	Y+46, r25	; 0x2e
    17f8:	8d a7       	std	Y+45, r24	; 0x2d
    17fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    17fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <HLCD_voidInit+0x1ca>
    1802:	9e a7       	std	Y+46, r25	; 0x2e
    1804:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	8f a5       	ldd	r24, Y+47	; 0x2f
    1808:	98 a9       	ldd	r25, Y+48	; 0x30
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	98 ab       	std	Y+48, r25	; 0x30
    180e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	8f a5       	ldd	r24, Y+47	; 0x2f
    1812:	98 a9       	ldd	r25, Y+48	; 0x30
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	69 f7       	brne	.-38     	; 0x17f2 <HLCD_voidInit+0x1be>
    1818:	14 c0       	rjmp	.+40     	; 0x1842 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	69 a9       	ldd	r22, Y+49	; 0x31
    181c:	7a a9       	ldd	r23, Y+50	; 0x32
    181e:	8b a9       	ldd	r24, Y+51	; 0x33
    1820:	9c a9       	ldd	r25, Y+52	; 0x34
    1822:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	98 ab       	std	Y+48, r25	; 0x30
    182c:	8f a7       	std	Y+47, r24	; 0x2f
    182e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1830:	98 a9       	ldd	r25, Y+48	; 0x30
    1832:	9c a7       	std	Y+44, r25	; 0x2c
    1834:	8b a7       	std	Y+43, r24	; 0x2b
    1836:	8b a5       	ldd	r24, Y+43	; 0x2b
    1838:	9c a5       	ldd	r25, Y+44	; 0x2c
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <HLCD_voidInit+0x206>
    183e:	9c a7       	std	Y+44, r25	; 0x2c
    1840:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	//Display On/Off Control The wait 39 Ms
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    1842:	8f e0       	ldi	r24, 0x0F	; 15
    1844:	0e 94 de 09 	call	0x13bc	; 0x13bc <HLCD_voidSendCommand>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e8       	ldi	r26, 0x80	; 128
    184e:	bf e3       	ldi	r27, 0x3F	; 63
    1850:	8f a3       	std	Y+39, r24	; 0x27
    1852:	98 a7       	std	Y+40, r25	; 0x28
    1854:	a9 a7       	std	Y+41, r26	; 0x29
    1856:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	6f a1       	ldd	r22, Y+39	; 0x27
    185a:	78 a5       	ldd	r23, Y+40	; 0x28
    185c:	89 a5       	ldd	r24, Y+41	; 0x29
    185e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a ef       	ldi	r20, 0xFA	; 250
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8b a3       	std	Y+35, r24	; 0x23
    1872:	9c a3       	std	Y+36, r25	; 0x24
    1874:	ad a3       	std	Y+37, r26	; 0x25
    1876:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1878:	6b a1       	ldd	r22, Y+35	; 0x23
    187a:	7c a1       	ldd	r23, Y+36	; 0x24
    187c:	8d a1       	ldd	r24, Y+37	; 0x25
    187e:	9e a1       	ldd	r25, Y+38	; 0x26
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <HLCD_voidInit+0x266>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9a a3       	std	Y+34, r25	; 0x22
    1896:	89 a3       	std	Y+33, r24	; 0x21
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    189a:	6b a1       	ldd	r22, Y+35	; 0x23
    189c:	7c a1       	ldd	r23, Y+36	; 0x24
    189e:	8d a1       	ldd	r24, Y+37	; 0x25
    18a0:	9e a1       	ldd	r25, Y+38	; 0x26
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	6f a1       	ldd	r22, Y+39	; 0x27
    18b4:	78 a5       	ldd	r23, Y+40	; 0x28
    18b6:	89 a5       	ldd	r24, Y+41	; 0x29
    18b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9a a3       	std	Y+34, r25	; 0x22
    18d8:	89 a3       	std	Y+33, r24	; 0x21
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <HLCD_voidInit+0x2c6>
    18dc:	88 ec       	ldi	r24, 0xC8	; 200
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	98 a3       	std	Y+32, r25	; 0x20
    18e2:	8f 8f       	std	Y+31, r24	; 0x1f
    18e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e6:	98 a1       	ldd	r25, Y+32	; 0x20
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <HLCD_voidInit+0x2b4>
    18ec:	98 a3       	std	Y+32, r25	; 0x20
    18ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	89 a1       	ldd	r24, Y+33	; 0x21
    18f2:	9a a1       	ldd	r25, Y+34	; 0x22
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	9a a3       	std	Y+34, r25	; 0x22
    18f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	89 a1       	ldd	r24, Y+33	; 0x21
    18fc:	9a a1       	ldd	r25, Y+34	; 0x22
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <HLCD_voidInit+0x2a8>
    1902:	14 c0       	rjmp	.+40     	; 0x192c <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	6b a1       	ldd	r22, Y+35	; 0x23
    1906:	7c a1       	ldd	r23, Y+36	; 0x24
    1908:	8d a1       	ldd	r24, Y+37	; 0x25
    190a:	9e a1       	ldd	r25, Y+38	; 0x26
    190c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9a a3       	std	Y+34, r25	; 0x22
    1916:	89 a3       	std	Y+33, r24	; 0x21
    1918:	89 a1       	ldd	r24, Y+33	; 0x21
    191a:	9a a1       	ldd	r25, Y+34	; 0x22
    191c:	9e 8f       	std	Y+30, r25	; 0x1e
    191e:	8d 8f       	std	Y+29, r24	; 0x1d
    1920:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1922:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <HLCD_voidInit+0x2f0>
    1928:	9e 8f       	std	Y+30, r25	; 0x1e
    192a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//Display Clear Then wait 2 ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 de 09 	call	0x13bc	; 0x13bc <HLCD_voidSendCommand>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e4       	ldi	r27, 0x40	; 64
    193a:	89 8f       	std	Y+25, r24	; 0x19
    193c:	9a 8f       	std	Y+26, r25	; 0x1a
    193e:	ab 8f       	std	Y+27, r26	; 0x1b
    1940:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	69 8d       	ldd	r22, Y+25	; 0x19
    1944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a ef       	ldi	r20, 0xFA	; 250
    1950:	54 e4       	ldi	r21, 0x44	; 68
    1952:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8d 8b       	std	Y+21, r24	; 0x15
    195c:	9e 8b       	std	Y+22, r25	; 0x16
    195e:	af 8b       	std	Y+23, r26	; 0x17
    1960:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1962:	6d 89       	ldd	r22, Y+21	; 0x15
    1964:	7e 89       	ldd	r23, Y+22	; 0x16
    1966:	8f 89       	ldd	r24, Y+23	; 0x17
    1968:	98 8d       	ldd	r25, Y+24	; 0x18
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <HLCD_voidInit+0x350>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9c 8b       	std	Y+20, r25	; 0x14
    1980:	8b 8b       	std	Y+19, r24	; 0x13
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1984:	6d 89       	ldd	r22, Y+21	; 0x15
    1986:	7e 89       	ldd	r23, Y+22	; 0x16
    1988:	8f 89       	ldd	r24, Y+23	; 0x17
    198a:	98 8d       	ldd	r25, Y+24	; 0x18
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	69 8d       	ldd	r22, Y+25	; 0x19
    199e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <HLCD_voidInit+0x3b0>
    19c6:	88 ec       	ldi	r24, 0xC8	; 200
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9a 8b       	std	Y+18, r25	; 0x12
    19cc:	89 8b       	std	Y+17, r24	; 0x11
    19ce:	89 89       	ldd	r24, Y+17	; 0x11
    19d0:	9a 89       	ldd	r25, Y+18	; 0x12
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <HLCD_voidInit+0x39e>
    19d6:	9a 8b       	std	Y+18, r25	; 0x12
    19d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	8b 89       	ldd	r24, Y+19	; 0x13
    19dc:	9c 89       	ldd	r25, Y+20	; 0x14
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9c 8b       	std	Y+20, r25	; 0x14
    19e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	8b 89       	ldd	r24, Y+19	; 0x13
    19e6:	9c 89       	ldd	r25, Y+20	; 0x14
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <HLCD_voidInit+0x392>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	6d 89       	ldd	r22, Y+21	; 0x15
    19f0:	7e 89       	ldd	r23, Y+22	; 0x16
    19f2:	8f 89       	ldd	r24, Y+23	; 0x17
    19f4:	98 8d       	ldd	r25, Y+24	; 0x18
    19f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
    1a02:	8b 89       	ldd	r24, Y+19	; 0x13
    1a04:	9c 89       	ldd	r25, Y+20	; 0x14
    1a06:	98 8b       	std	Y+16, r25	; 0x10
    1a08:	8f 87       	std	Y+15, r24	; 0x0f
    1a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0c:	98 89       	ldd	r25, Y+16	; 0x10
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <HLCD_voidInit+0x3da>
    1a12:	98 8b       	std	Y+16, r25	; 0x10
    1a14:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//Entry Mode Set Then wait 39 Ms
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1a16:	86 e0       	ldi	r24, 0x06	; 6
    1a18:	0e 94 de 09 	call	0x13bc	; 0x13bc <HLCD_voidSendCommand>
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a0 e8       	ldi	r26, 0x80	; 128
    1a22:	bf e3       	ldi	r27, 0x3F	; 63
    1a24:	8b 87       	std	Y+11, r24	; 0x0b
    1a26:	9c 87       	std	Y+12, r25	; 0x0c
    1a28:	ad 87       	std	Y+13, r26	; 0x0d
    1a2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a ef       	ldi	r20, 0xFA	; 250
    1a3a:	54 e4       	ldi	r21, 0x44	; 68
    1a3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8f 83       	std	Y+7, r24	; 0x07
    1a46:	98 87       	std	Y+8, r25	; 0x08
    1a48:	a9 87       	std	Y+9, r26	; 0x09
    1a4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4e:	78 85       	ldd	r23, Y+8	; 0x08
    1a50:	89 85       	ldd	r24, Y+9	; 0x09
    1a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <HLCD_voidInit+0x43a>
		__ticks = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	3f c0       	rjmp	.+126    	; 0x1aec <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a70:	78 85       	ldd	r23, Y+8	; 0x08
    1a72:	89 85       	ldd	r24, Y+9	; 0x09
    1a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	57 e4       	ldi	r21, 0x47	; 71
    1a7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	4c f5       	brge	.+82     	; 0x1ad8 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <HLCD_voidInit+0x49a>
    1ab0:	88 ec       	ldi	r24, 0xC8	; 200
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9c 83       	std	Y+4, r25	; 0x04
    1ab6:	8b 83       	std	Y+3, r24	; 0x03
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <HLCD_voidInit+0x488>
    1ac0:	9c 83       	std	Y+4, r25	; 0x04
    1ac2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	9e 83       	std	Y+6, r25	; 0x06
    1acc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	69 f7       	brne	.-38     	; 0x1ab0 <HLCD_voidInit+0x47c>
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    1ada:	78 85       	ldd	r23, Y+8	; 0x08
    1adc:	89 85       	ldd	r24, Y+9	; 0x09
    1ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	9a 81       	ldd	r25, Y+2	; 0x02
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <HLCD_voidInit+0x4c4>
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    1b00:	ca 5b       	subi	r28, 0xBA	; 186
    1b02:	df 4f       	sbci	r29, 0xFF	; 255
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	08 95       	ret

00001b18 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	2e 97       	sbiw	r28, 0x0e	; 14
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
	//Display Clear Then wait 2 ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	0e 94 de 09 	call	0x13bc	; 0x13bc <HLCD_voidSendCommand>
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 e0       	ldi	r26, 0x00	; 0
    1b38:	b0 e4       	ldi	r27, 0x40	; 64
    1b3a:	8b 87       	std	Y+11, r24	; 0x0b
    1b3c:	9c 87       	std	Y+12, r25	; 0x0c
    1b3e:	ad 87       	std	Y+13, r26	; 0x0d
    1b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	4a ef       	ldi	r20, 0xFA	; 250
    1b50:	54 e4       	ldi	r21, 0x44	; 68
    1b52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	8f 83       	std	Y+7, r24	; 0x07
    1b5c:	98 87       	std	Y+8, r25	; 0x08
    1b5e:	a9 87       	std	Y+9, r26	; 0x09
    1b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e8       	ldi	r20, 0x80	; 128
    1b70:	5f e3       	ldi	r21, 0x3F	; 63
    1b72:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9e 83       	std	Y+6, r25	; 0x06
    1b80:	8d 83       	std	Y+5, r24	; 0x05
    1b82:	3f c0       	rjmp	.+126    	; 0x1c02 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1b84:	6f 81       	ldd	r22, Y+7	; 0x07
    1b86:	78 85       	ldd	r23, Y+8	; 0x08
    1b88:	89 85       	ldd	r24, Y+9	; 0x09
    1b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	3f ef       	ldi	r19, 0xFF	; 255
    1b90:	4f e7       	ldi	r20, 0x7F	; 127
    1b92:	57 e4       	ldi	r21, 0x47	; 71
    1b94:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b98:	18 16       	cp	r1, r24
    1b9a:	4c f5       	brge	.+82     	; 0x1bee <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e2       	ldi	r20, 0x20	; 32
    1baa:	51 e4       	ldi	r21, 0x41	; 65
    1bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <HLCD_voidClearDisplay+0xcc>
    1bc6:	88 ec       	ldi	r24, 0xC8	; 200
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <HLCD_voidClearDisplay+0xba>
    1bd6:	9c 83       	std	Y+4, r25	; 0x04
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <HLCD_voidClearDisplay+0xae>
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf0:	78 85       	ldd	r23, Y+8	; 0x08
    1bf2:	89 85       	ldd	r24, Y+9	; 0x09
    1bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <HLCD_voidClearDisplay+0xf6>
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1c16:	2e 96       	adiw	r28, 0x0e	; 14
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <HLCD_DisplayString>:

void HLCD_DisplayString(u8 *A_u8PtrToString)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <HLCD_DisplayString+0x6>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	0b c0       	rjmp	.+22     	; 0x1c4e <HLCD_DisplayString+0x26>
	while(*A_u8PtrToString > 0)
	{
		HLCD_voidSendData(*A_u8PtrToString++);
    1c38:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3c:	20 81       	ld	r18, Z
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a 81       	ldd	r25, Y+2	; 0x02
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	82 2f       	mov	r24, r18
    1c4a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendData>

}

void HLCD_DisplayString(u8 *A_u8PtrToString)
{
	while(*A_u8PtrToString > 0)
    1c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c50:	fa 81       	ldd	r31, Y+2	; 0x02
    1c52:	80 81       	ld	r24, Z
    1c54:	88 23       	and	r24, r24
    1c56:	81 f7       	brne	.-32     	; 0x1c38 <HLCD_DisplayString+0x10>
	{
		HLCD_voidSendData(*A_u8PtrToString++);
	}
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <HLCD_GoToPos>:


void HLCD_GoToPos(LCD_ROW_E A_LCDRow,LCD_COL_E A_LCDCol)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <HLCD_GoToPos+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <HLCD_GoToPos+0x8>
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_LCDRow)
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	3c 83       	std	Y+4, r19	; 0x04
    1c7a:	2b 83       	std	Y+3, r18	; 0x03
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c80:	81 30       	cpi	r24, 0x01	; 1
    1c82:	91 05       	cpc	r25, r1
    1c84:	31 f0       	breq	.+12     	; 0x1c92 <HLCD_GoToPos+0x30>
    1c86:	2b 81       	ldd	r18, Y+3	; 0x03
    1c88:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	31 f0       	breq	.+12     	; 0x1c9c <HLCD_GoToPos+0x3a>
    1c90:	09 c0       	rjmp	.+18     	; 0x1ca4 <HLCD_GoToPos+0x42>
	{
	case LCD_ROW1:
		HLCD_voidSendCommand(ROW1_BASE_ADD + A_LCDCol);
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	81 58       	subi	r24, 0x81	; 129
    1c96:	0e 94 de 09 	call	0x13bc	; 0x13bc <HLCD_voidSendCommand>
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <HLCD_GoToPos+0x42>
		break;
	case LCD_ROW2:
		HLCD_voidSendCommand(ROW2_BASE_ADD + A_LCDCol);
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	81 54       	subi	r24, 0x41	; 65
    1ca0:	0e 94 de 09 	call	0x13bc	; 0x13bc <HLCD_voidSendCommand>
		break;

	}
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber (u32 A_u32Number)
{
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	28 97       	sbiw	r28, 0x08	; 8
    1cc4:	0f b6       	in	r0, 0x3f	; 63
    1cc6:	f8 94       	cli
    1cc8:	de bf       	out	0x3e, r29	; 62
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	6d 83       	std	Y+5, r22	; 0x05
    1cd0:	7e 83       	std	Y+6, r23	; 0x06
    1cd2:	8f 83       	std	Y+7, r24	; 0x07
    1cd4:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Num = 1;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e0       	ldi	r26, 0x00	; 0
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	ab 83       	std	Y+3, r26	; 0x03
    1ce4:	bc 83       	std	Y+4, r27	; 0x04
	if (A_u32Number == 0)
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	af 81       	ldd	r26, Y+7	; 0x07
    1cec:	b8 85       	ldd	r27, Y+8	; 0x08
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	a1 05       	cpc	r26, r1
    1cf2:	b1 05       	cpc	r27, r1
    1cf4:	d1 f5       	brne	.+116    	; 0x1d6a <HLCD_voidDisplayNumber+0xb8>
	{
		HLCD_voidSendData('0');
    1cf6:	80 e3       	ldi	r24, 0x30	; 48
    1cf8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendData>
    1cfc:	36 c0       	rjmp	.+108    	; 0x1d6a <HLCD_voidDisplayNumber+0xb8>
	}

	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	ab 81       	ldd	r26, Y+3	; 0x03
    1d04:	bc 81       	ldd	r27, Y+4	; 0x04
    1d06:	2a e0       	ldi	r18, 0x0A	; 10
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 be 10 	call	0x217c	; 0x217c <__mulsi3>
    1d16:	7b 01       	movw	r14, r22
    1d18:	8c 01       	movw	r16, r24
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	af 81       	ldd	r26, Y+7	; 0x07
    1d20:	b8 85       	ldd	r27, Y+8	; 0x08
    1d22:	2a e0       	ldi	r18, 0x0A	; 10
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8e 0d       	add	r24, r14
    1d38:	9f 1d       	adc	r25, r15
    1d3a:	a0 1f       	adc	r26, r16
    1d3c:	b1 1f       	adc	r27, r17
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	ab 83       	std	Y+3, r26	; 0x03
    1d44:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number / 10;
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	af 81       	ldd	r26, Y+7	; 0x07
    1d4c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d4e:	2a e0       	ldi	r18, 0x0A	; 10
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	bc 01       	movw	r22, r24
    1d58:	cd 01       	movw	r24, r26
    1d5a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
    1d5e:	da 01       	movw	r26, r20
    1d60:	c9 01       	movw	r24, r18
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	af 83       	std	Y+7, r26	; 0x07
    1d68:	b8 87       	std	Y+8, r27	; 0x08
	if (A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}

	while (A_u32Number != 0)
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	af 81       	ldd	r26, Y+7	; 0x07
    1d70:	b8 85       	ldd	r27, Y+8	; 0x08
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	a1 05       	cpc	r26, r1
    1d76:	b1 05       	cpc	r27, r1
    1d78:	11 f6       	brne	.-124    	; 0x1cfe <HLCD_voidDisplayNumber+0x4c>
    1d7a:	23 c0       	rjmp	.+70     	; 0x1dc2 <HLCD_voidDisplayNumber+0x110>
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	ab 81       	ldd	r26, Y+3	; 0x03
    1d82:	bc 81       	ldd	r27, Y+4	; 0x04
    1d84:	2a e0       	ldi	r18, 0x0A	; 10
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	80 5d       	subi	r24, 0xD0	; 208
    1d9a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendData>
		local_u32Num = local_u32Num / 10;
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	ab 81       	ldd	r26, Y+3	; 0x03
    1da4:	bc 81       	ldd	r27, Y+4	; 0x04
    1da6:	2a e0       	ldi	r18, 0x0A	; 10
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__udivmodsi4>
    1db6:	da 01       	movw	r26, r20
    1db8:	c9 01       	movw	r24, r18
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	9a 83       	std	Y+2, r25	; 0x02
    1dbe:	ab 83       	std	Y+3, r26	; 0x03
    1dc0:	bc 83       	std	Y+4, r27	; 0x04
	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	ab 81       	ldd	r26, Y+3	; 0x03
    1dc8:	bc 81       	ldd	r27, Y+4	; 0x04
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	91 05       	cpc	r25, r1
    1dce:	a1 05       	cpc	r26, r1
    1dd0:	b1 05       	cpc	r27, r1
    1dd2:	a1 f6       	brne	.-88     	; 0x1d7c <HLCD_voidDisplayNumber+0xca>
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
		local_u32Num = local_u32Num / 10;
	}
}
    1dd4:	28 96       	adiw	r28, 0x08	; 8
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	08 95       	ret

00001dee <HLCD_SendSpecialSymbol>:


void HLCD_SendSpecialSymbol(u8 *A_pu8SSymbolArray,LCD_PATTERN_E A_PatternNum,LCD_ROW_E A_RowNo,LCD_COL_E A_ColNo)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	27 97       	sbiw	r28, 0x07	; 7
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	9c 83       	std	Y+4, r25	; 0x04
    1e04:	8b 83       	std	Y+3, r24	; 0x03
    1e06:	6d 83       	std	Y+5, r22	; 0x05
    1e08:	4e 83       	std	Y+6, r20	; 0x06
    1e0a:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAdsress;
	//Calculate CGRAM Address
	local_u8CGRAMAdsress = A_PatternNum * 8;
    1e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAdsress,6);
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	80 64       	ori	r24, 0x40	; 64
    1e24:	8a 83       	std	Y+2, r24	; 0x02
	//Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAdsress);
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	0e 94 de 09 	call	0x13bc	; 0x13bc <HLCD_voidSendCommand>

	for(u8 local_u8Counter = 0; local_u8Counter<8; local_u8Counter++)
    1e2c:	19 82       	std	Y+1, r1	; 0x01
    1e2e:	0e c0       	rjmp	.+28     	; 0x1e4c <HLCD_SendSpecialSymbol+0x5e>
	{
		//Send Byte by Byte From Symbol Array
		HLCD_voidSendData(A_pu8SSymbolArray[local_u8Counter]);
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
    1e40:	80 81       	ld	r24, Z
    1e42:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendData>
	local_u8CGRAMAdsress = A_PatternNum * 8;
	SET_BIT(local_u8CGRAMAdsress,6);
	//Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAdsress);

	for(u8 local_u8Counter = 0; local_u8Counter<8; local_u8Counter++)
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	8f 5f       	subi	r24, 0xFF	; 255
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	88 30       	cpi	r24, 0x08	; 8
    1e50:	78 f3       	brcs	.-34     	; 0x1e30 <HLCD_SendSpecialSymbol+0x42>
		//Send Byte by Byte From Symbol Array
		HLCD_voidSendData(A_pu8SSymbolArray[local_u8Counter]);

	}
	//Send Command To set DDRAM Address
	HLCD_GoToPos(A_RowNo,A_ColNo);
    1e52:	8e 81       	ldd	r24, Y+6	; 0x06
    1e54:	6f 81       	ldd	r22, Y+7	; 0x07
    1e56:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <HLCD_GoToPos>
	//Display Pattern
	HLCD_voidSendData(A_PatternNum);
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HLCD_voidSendData>

}
    1e60:	27 96       	adiw	r28, 0x07	; 7
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	de bf       	out	0x3e, r29	; 62
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	cd bf       	out	0x3d, r28	; 61
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <HLED_voidTurnLEDOn>:
#include "../include/HAL/LED/LED_Interface.h"
#include "../include/HAL/LED/LED_Private.h"
#include "../include/HAL/LED/LED_Cfg.h"

void HLED_voidTurnLEDOn(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <HLED_voidTurnLEDOn+0x6>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_portID,A_pinID,DIO_SET);
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	6a 81       	ldd	r22, Y+2	; 0x02
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>

}
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <HLED_voidTurnLEDOff>:


void HLED_voidTurnLEDOff(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <HLED_voidTurnLEDOff+0x6>
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinValue(A_portID,A_pinID,DIO_RESET);
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	6a 81       	ldd	r22, Y+2	; 0x02
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	0e 94 ee 06 	call	0xddc	; 0xddc <MDIO_voidSetPinValue>
}
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <HLED_voidToggleLED>:


void HLED_voidToggleLED(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <HLED_voidToggleLED+0x6>
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_portID,A_pinID);
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ec8:	0e 94 92 08 	call	0x1124	; 0x1124 <MDIO_voidTogglePinValue>
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <MUART_voidInit>:
#define F_CPU 8000000UL
#define NULL 0


void MUART_voidInit(void)
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <MUART_voidInit+0x6>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRate = BAUD_RATE_EQUATION;
    1ee0:	83 e3       	ldi	r24, 0x33	; 51
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	//Set Baudrate
	UBRRL = (u8) local_u16BaudRate;
    1ee8:	e9 e2       	ldi	r30, 0x29	; 41
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	80 83       	st	Z, r24
	UBRRH = ((u8) local_u16BaudRate >> 8);
    1ef0:	e0 e4       	ldi	r30, 0x40	; 64
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	88 2f       	mov	r24, r24
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	89 2f       	mov	r24, r25
    1efc:	99 0f       	add	r25, r25
    1efe:	99 0b       	sbc	r25, r25
    1f00:	80 83       	st	Z, r24

	//Character Size 8-Bit
	CLR_BIT(UCSRB,2);
    1f02:	aa e2       	ldi	r26, 0x2A	; 42
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	ea e2       	ldi	r30, 0x2A	; 42
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8b 7f       	andi	r24, 0xFB	; 251
    1f0e:	8c 93       	st	X, r24
	// 1 Stop Bit
	CONC_BIT(1,0,0,0,0,1,1,0);

	//TX Enable
	//RX Enable
	SET_BIT(UCSRB,3);
    1f10:	aa e2       	ldi	r26, 0x2A	; 42
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	ea e2       	ldi	r30, 0x2A	; 42
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 60       	ori	r24, 0x08	; 8
    1f1c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,4);
    1f1e:	aa e2       	ldi	r26, 0x2A	; 42
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	ea e2       	ldi	r30, 0x2A	; 42
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 61       	ori	r24, 0x10	; 16
    1f2a:	8c 93       	st	X, r24
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <MUART_voidSendByteSyncBlocking>:

void MUART_voidSendByteSyncBlocking(u8 A_u8DataByte)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	0f 92       	push	r0
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	89 83       	std	Y+1, r24	; 0x01
	//Wait Until UDR is Empty
	while(GET_BIT(UCSRA,5) == 0);
    1f42:	eb e2       	ldi	r30, 0x2B	; 43
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	82 95       	swap	r24
    1f4a:	86 95       	lsr	r24
    1f4c:	87 70       	andi	r24, 0x07	; 7
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	81 70       	andi	r24, 0x01	; 1
    1f54:	90 70       	andi	r25, 0x00	; 0
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	a1 f3       	breq	.-24     	; 0x1f42 <MUART_voidSendByteSyncBlocking+0xc>

	//Send Data into TX Register and Start Transmission
	UDR = A_u8DataByte;
    1f5a:	ec e2       	ldi	r30, 0x2C	; 44
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	80 83       	st	Z, r24

	//Wait Until UDR is Empty
	while(GET_BIT(UCSRA,5) == 0);
    1f62:	eb e2       	ldi	r30, 0x2B	; 43
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	82 95       	swap	r24
    1f6a:	86 95       	lsr	r24
    1f6c:	87 70       	andi	r24, 0x07	; 7
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	81 70       	andi	r24, 0x01	; 1
    1f74:	90 70       	andi	r25, 0x00	; 0
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	a1 f3       	breq	.-24     	; 0x1f62 <MUART_voidSendByteSyncBlocking+0x2c>

	//Clear Transmit Interrupt Flag
	SET_BIT(UCSRA,6);
    1f7a:	ab e2       	ldi	r26, 0x2B	; 43
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	eb e2       	ldi	r30, 0x2B	; 43
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	80 64       	ori	r24, 0x40	; 64
    1f86:	8c 93       	st	X, r24
}
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <MUART_voidSendByteSyncNonBlocking>:

void MUART_voidSendByteSyncNonBlocking(u8 A_u8DataByte)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <MUART_voidSendByteSyncNonBlocking+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <MUART_voidSendByteSyncNonBlocking+0x8>
    1f98:	0f 92       	push	r0
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
	u32 local_u32TimeOut = 0;
    1fa0:	19 82       	std	Y+1, r1	; 0x01
    1fa2:	1a 82       	std	Y+2, r1	; 0x02
    1fa4:	1b 82       	std	Y+3, r1	; 0x03
    1fa6:	1c 82       	std	Y+4, r1	; 0x04
    1fa8:	17 c0       	rjmp	.+46     	; 0x1fd8 <MUART_voidSendByteSyncNonBlocking+0x48>
	//Wait Until UDR is Empty
	while(GET_BIT(UCSRA,5) == 0)
	{
		local_u32TimeOut++;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	ab 81       	ldd	r26, Y+3	; 0x03
    1fb0:	bc 81       	ldd	r27, Y+4	; 0x04
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	a1 1d       	adc	r26, r1
    1fb6:	b1 1d       	adc	r27, r1
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	ab 83       	std	Y+3, r26	; 0x03
    1fbe:	bc 83       	std	Y+4, r27	; 0x04
		if(local_u32TimeOut == NON_BLOCKING_TIME_OUT)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	ab 81       	ldd	r26, Y+3	; 0x03
    1fc6:	bc 81       	ldd	r27, Y+4	; 0x04
    1fc8:	88 38       	cpi	r24, 0x88	; 136
    1fca:	23 e1       	ldi	r18, 0x13	; 19
    1fcc:	92 07       	cpc	r25, r18
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	a2 07       	cpc	r26, r18
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	b2 07       	cpc	r27, r18
    1fd6:	61 f0       	breq	.+24     	; 0x1ff0 <MUART_voidSendByteSyncNonBlocking+0x60>

void MUART_voidSendByteSyncNonBlocking(u8 A_u8DataByte)
{
	u32 local_u32TimeOut = 0;
	//Wait Until UDR is Empty
	while(GET_BIT(UCSRA,5) == 0)
    1fd8:	eb e2       	ldi	r30, 0x2B	; 43
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	82 95       	swap	r24
    1fe0:	86 95       	lsr	r24
    1fe2:	87 70       	andi	r24, 0x07	; 7
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	81 70       	andi	r24, 0x01	; 1
    1fea:	90 70       	andi	r25, 0x00	; 0
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	e9 f2       	breq	.-70     	; 0x1faa <MUART_voidSendByteSyncNonBlocking+0x1a>
		if(local_u32TimeOut == NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if(local_u32TimeOut != NON_BLOCKING_TIME_OUT)
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ff6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ff8:	88 38       	cpi	r24, 0x88	; 136
    1ffa:	23 e1       	ldi	r18, 0x13	; 19
    1ffc:	92 07       	cpc	r25, r18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	a2 07       	cpc	r26, r18
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	b2 07       	cpc	r27, r18
    2006:	61 f1       	breq	.+88     	; 0x2060 <MUART_voidSendByteSyncNonBlocking+0xd0>
	{
		local_u32TimeOut = 0;
    2008:	19 82       	std	Y+1, r1	; 0x01
    200a:	1a 82       	std	Y+2, r1	; 0x02
    200c:	1b 82       	std	Y+3, r1	; 0x03
    200e:	1c 82       	std	Y+4, r1	; 0x04
		//Send Data into TX Register and Start Transmission
		UDR = A_u8DataByte;
    2010:	ec e2       	ldi	r30, 0x2C	; 44
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	80 83       	st	Z, r24
    2018:	17 c0       	rjmp	.+46     	; 0x2048 <MUART_voidSendByteSyncNonBlocking+0xb8>

		//Wait Until UDR is Empty
		while(GET_BIT(UCSRA,5) == 0)
		{
			local_u32TimeOut++;
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	ab 81       	ldd	r26, Y+3	; 0x03
    2020:	bc 81       	ldd	r27, Y+4	; 0x04
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	a1 1d       	adc	r26, r1
    2026:	b1 1d       	adc	r27, r1
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	ab 83       	std	Y+3, r26	; 0x03
    202e:	bc 83       	std	Y+4, r27	; 0x04
			if(local_u32TimeOut == NON_BLOCKING_TIME_OUT)
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	ab 81       	ldd	r26, Y+3	; 0x03
    2036:	bc 81       	ldd	r27, Y+4	; 0x04
    2038:	88 38       	cpi	r24, 0x88	; 136
    203a:	23 e1       	ldi	r18, 0x13	; 19
    203c:	92 07       	cpc	r25, r18
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	a2 07       	cpc	r26, r18
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	b2 07       	cpc	r27, r18
    2046:	61 f0       	breq	.+24     	; 0x2060 <MUART_voidSendByteSyncNonBlocking+0xd0>
		local_u32TimeOut = 0;
		//Send Data into TX Register and Start Transmission
		UDR = A_u8DataByte;

		//Wait Until UDR is Empty
		while(GET_BIT(UCSRA,5) == 0)
    2048:	eb e2       	ldi	r30, 0x2B	; 43
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	82 95       	swap	r24
    2050:	86 95       	lsr	r24
    2052:	87 70       	andi	r24, 0x07	; 7
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	81 70       	andi	r24, 0x01	; 1
    205a:	90 70       	andi	r25, 0x00	; 0
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	e9 f2       	breq	.-70     	; 0x201a <MUART_voidSendByteSyncNonBlocking+0x8a>
				break;
			}
		}
	}
	//Clear Transmit Interrupt Flag
	SET_BIT(UCSRA,6);
    2060:	ab e2       	ldi	r26, 0x2B	; 43
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	eb e2       	ldi	r30, 0x2B	; 43
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	80 64       	ori	r24, 0x40	; 64
    206c:	8c 93       	st	X, r24
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <MUART_voidSendStringSyncNonBlocking>:

void MUART_voidSendStringSyncNonBlocking(u8 *A_pu8String)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <MUART_voidSendStringSyncNonBlocking+0x6>
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	0b c0       	rjmp	.+22     	; 0x20a4 <MUART_voidSendStringSyncNonBlocking+0x26>
	while(*A_pu8String > 0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
    208e:	e9 81       	ldd	r30, Y+1	; 0x01
    2090:	fa 81       	ldd	r31, Y+2	; 0x02
    2092:	20 81       	ld	r18, Z
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	9a 81       	ldd	r25, Y+2	; 0x02
    2098:	01 96       	adiw	r24, 0x01	; 1
    209a:	9a 83       	std	Y+2, r25	; 0x02
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	82 2f       	mov	r24, r18
    20a0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <MUART_voidSendByteSyncNonBlocking>
	SET_BIT(UCSRA,6);
}

void MUART_voidSendStringSyncNonBlocking(u8 *A_pu8String)
{
	while(*A_pu8String > 0)
    20a4:	e9 81       	ldd	r30, Y+1	; 0x01
    20a6:	fa 81       	ldd	r31, Y+2	; 0x02
    20a8:	80 81       	ld	r24, Z
    20aa:	88 23       	and	r24, r24
    20ac:	81 f7       	brne	.-32     	; 0x208e <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_pu8String++);
	}
}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <MUART_voidSendByteAsync>:

void MUART_voidSendByteAsync(u8 A_u8DataByte)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	0f 92       	push	r0
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	89 83       	std	Y+1, r24	; 0x01
	//Check if Data Register is Empty
	if(GET_BIT(UCSRA,5) == 1)
    20c4:	eb e2       	ldi	r30, 0x2B	; 43
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	82 95       	swap	r24
    20cc:	86 95       	lsr	r24
    20ce:	87 70       	andi	r24, 0x07	; 7
    20d0:	88 2f       	mov	r24, r24
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	81 70       	andi	r24, 0x01	; 1
    20d6:	90 70       	andi	r25, 0x00	; 0
    20d8:	88 23       	and	r24, r24
    20da:	21 f0       	breq	.+8      	; 0x20e4 <MUART_voidSendByteAsync+0x2c>
	{
		//Send Data
		UDR = A_u8DataByte;
    20dc:	ec e2       	ldi	r30, 0x2C	; 44
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	80 83       	st	Z, r24
	}
}
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <MUART_u8ReadByteSyncBlocking>:

u8 MUART_u8ReadByteSyncBlocking(void)
{
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,7) == 0);
    20f4:	eb e2       	ldi	r30, 0x2B	; 43
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	88 23       	and	r24, r24
    20fc:	dc f7       	brge	.-10     	; 0x20f4 <MUART_u8ReadByteSyncBlocking+0x8>
	return UDR;
    20fe:	ec e2       	ldi	r30, 0x2C	; 44
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
}
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <MUART_u8ReadByteAsync>:

u8 MUART_u8ReadByteAsync(void)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    2112:	ec e2       	ldi	r30, 0x2C	; 44
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
}
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking(void)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <MUART_u8ReadByteSyncNonBlocking+0x6>
    2124:	00 d0       	rcall	.+0      	; 0x2126 <MUART_u8ReadByteSyncNonBlocking+0x8>
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ReceivedData = NO_VALUE_RETURNED;
    212a:	8f ef       	ldi	r24, 0xFF	; 255
    212c:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16TimeOut = 0;
    212e:	1a 82       	std	Y+2, r1	; 0x02
    2130:	19 82       	std	Y+1, r1	; 0x01
	while(GET_BIT(UCSRA,7) == 0)
    2132:	eb e2       	ldi	r30, 0x2B	; 43
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	88 23       	and	r24, r24
    213a:	cc f0       	brlt	.+50     	; 0x216e <MUART_u8ReadByteSyncNonBlocking+0x50>
	{
		local_u16TimeOut++;
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	9a 81       	ldd	r25, Y+2	; 0x02
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
		if(local_u16TimeOut == NON_BLOCKING_TIME_OUT)
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	23 e1       	ldi	r18, 0x13	; 19
    214c:	88 38       	cpi	r24, 0x88	; 136
    214e:	92 07       	cpc	r25, r18
    2150:	71 f0       	breq	.+28     	; 0x216e <MUART_u8ReadByteSyncNonBlocking+0x50>
		{
			break;
		}
		if(local_u16TimeOut != NON_BLOCKING_TIME_OUT)
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	9a 81       	ldd	r25, Y+2	; 0x02
    2156:	23 e1       	ldi	r18, 0x13	; 19
    2158:	88 38       	cpi	r24, 0x88	; 136
    215a:	92 07       	cpc	r25, r18
    215c:	21 f0       	breq	.+8      	; 0x2166 <MUART_u8ReadByteSyncNonBlocking+0x48>
		{
			//Read Received Data From UDR
			local_u8ReceivedData = UDR;
    215e:	ec e2       	ldi	r30, 0x2C	; 44
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	8b 83       	std	Y+3, r24	; 0x03
		}
		return local_u8ReceivedData;
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	8c 83       	std	Y+4, r24	; 0x04
	}
}
    216a:	8c 81       	ldd	r24, Y+4	; 0x04
    216c:	00 c0       	rjmp	.+0      	; 0x216e <MUART_u8ReadByteSyncNonBlocking+0x50>
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <__mulsi3>:
    217c:	62 9f       	mul	r22, r18
    217e:	d0 01       	movw	r26, r0
    2180:	73 9f       	mul	r23, r19
    2182:	f0 01       	movw	r30, r0
    2184:	82 9f       	mul	r24, r18
    2186:	e0 0d       	add	r30, r0
    2188:	f1 1d       	adc	r31, r1
    218a:	64 9f       	mul	r22, r20
    218c:	e0 0d       	add	r30, r0
    218e:	f1 1d       	adc	r31, r1
    2190:	92 9f       	mul	r25, r18
    2192:	f0 0d       	add	r31, r0
    2194:	83 9f       	mul	r24, r19
    2196:	f0 0d       	add	r31, r0
    2198:	74 9f       	mul	r23, r20
    219a:	f0 0d       	add	r31, r0
    219c:	65 9f       	mul	r22, r21
    219e:	f0 0d       	add	r31, r0
    21a0:	99 27       	eor	r25, r25
    21a2:	72 9f       	mul	r23, r18
    21a4:	b0 0d       	add	r27, r0
    21a6:	e1 1d       	adc	r30, r1
    21a8:	f9 1f       	adc	r31, r25
    21aa:	63 9f       	mul	r22, r19
    21ac:	b0 0d       	add	r27, r0
    21ae:	e1 1d       	adc	r30, r1
    21b0:	f9 1f       	adc	r31, r25
    21b2:	bd 01       	movw	r22, r26
    21b4:	cf 01       	movw	r24, r30
    21b6:	11 24       	eor	r1, r1
    21b8:	08 95       	ret

000021ba <__udivmodsi4>:
    21ba:	a1 e2       	ldi	r26, 0x21	; 33
    21bc:	1a 2e       	mov	r1, r26
    21be:	aa 1b       	sub	r26, r26
    21c0:	bb 1b       	sub	r27, r27
    21c2:	fd 01       	movw	r30, r26
    21c4:	0d c0       	rjmp	.+26     	; 0x21e0 <__udivmodsi4_ep>

000021c6 <__udivmodsi4_loop>:
    21c6:	aa 1f       	adc	r26, r26
    21c8:	bb 1f       	adc	r27, r27
    21ca:	ee 1f       	adc	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	a2 17       	cp	r26, r18
    21d0:	b3 07       	cpc	r27, r19
    21d2:	e4 07       	cpc	r30, r20
    21d4:	f5 07       	cpc	r31, r21
    21d6:	20 f0       	brcs	.+8      	; 0x21e0 <__udivmodsi4_ep>
    21d8:	a2 1b       	sub	r26, r18
    21da:	b3 0b       	sbc	r27, r19
    21dc:	e4 0b       	sbc	r30, r20
    21de:	f5 0b       	sbc	r31, r21

000021e0 <__udivmodsi4_ep>:
    21e0:	66 1f       	adc	r22, r22
    21e2:	77 1f       	adc	r23, r23
    21e4:	88 1f       	adc	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	1a 94       	dec	r1
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <__udivmodsi4_loop>
    21ec:	60 95       	com	r22
    21ee:	70 95       	com	r23
    21f0:	80 95       	com	r24
    21f2:	90 95       	com	r25
    21f4:	9b 01       	movw	r18, r22
    21f6:	ac 01       	movw	r20, r24
    21f8:	bd 01       	movw	r22, r26
    21fa:	cf 01       	movw	r24, r30
    21fc:	08 95       	ret

000021fe <__prologue_saves__>:
    21fe:	2f 92       	push	r2
    2200:	3f 92       	push	r3
    2202:	4f 92       	push	r4
    2204:	5f 92       	push	r5
    2206:	6f 92       	push	r6
    2208:	7f 92       	push	r7
    220a:	8f 92       	push	r8
    220c:	9f 92       	push	r9
    220e:	af 92       	push	r10
    2210:	bf 92       	push	r11
    2212:	cf 92       	push	r12
    2214:	df 92       	push	r13
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	ca 1b       	sub	r28, r26
    2228:	db 0b       	sbc	r29, r27
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	09 94       	ijmp

00002236 <__epilogue_restores__>:
    2236:	2a 88       	ldd	r2, Y+18	; 0x12
    2238:	39 88       	ldd	r3, Y+17	; 0x11
    223a:	48 88       	ldd	r4, Y+16	; 0x10
    223c:	5f 84       	ldd	r5, Y+15	; 0x0f
    223e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2240:	7d 84       	ldd	r7, Y+13	; 0x0d
    2242:	8c 84       	ldd	r8, Y+12	; 0x0c
    2244:	9b 84       	ldd	r9, Y+11	; 0x0b
    2246:	aa 84       	ldd	r10, Y+10	; 0x0a
    2248:	b9 84       	ldd	r11, Y+9	; 0x09
    224a:	c8 84       	ldd	r12, Y+8	; 0x08
    224c:	df 80       	ldd	r13, Y+7	; 0x07
    224e:	ee 80       	ldd	r14, Y+6	; 0x06
    2250:	fd 80       	ldd	r15, Y+5	; 0x05
    2252:	0c 81       	ldd	r16, Y+4	; 0x04
    2254:	1b 81       	ldd	r17, Y+3	; 0x03
    2256:	aa 81       	ldd	r26, Y+2	; 0x02
    2258:	b9 81       	ldd	r27, Y+1	; 0x01
    225a:	ce 0f       	add	r28, r30
    225c:	d1 1d       	adc	r29, r1
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	ed 01       	movw	r28, r26
    226a:	08 95       	ret

0000226c <_exit>:
    226c:	f8 94       	cli

0000226e <__stop_program>:
    226e:	ff cf       	rjmp	.-2      	; 0x226e <__stop_program>
