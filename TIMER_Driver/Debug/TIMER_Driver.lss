
TIMER_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000027f8  0000288c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080006e  0080006e  0000289a  2**0
                  ALLOC
  3 .stab         0000243c  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000141f  00000000  00000000  00004cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000060f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006237  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a843  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_1>
       8:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_2>
       c:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__vector_10>
      2c:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 13 	jmp	0x27be	; 0x27be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 13 	jmp	0x2786	; 0x2786 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 13 	jmp	0x27be	; 0x27be <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 cf 13 	jmp	0x279e	; 0x279e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ef 13 	jmp	0x27de	; 0x27de <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 * LCD Data Port --> Port C --> O/P Low
 * LCD Control Port --> Port D 3,4,5 --> O/P Low
 */

void main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
     b4e:	0e 94 08 0a 	call	0x1410	; 0x1410 <MDIO_voidInit>
	HLCD_voidInit();
     b52:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <HLCD_voidInit>
	MEXTI_voidSetCallBack(EXTI0,ICU_SW);
     b56:	21 ef       	ldi	r18, 0xF1	; 241
     b58:	35 e0       	ldi	r19, 0x05	; 5
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	b9 01       	movw	r22, r18
     b5e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <MEXTI_voidSetCallBack>
	MEXTI_voidConfig(EXTI0,RISING_EDGE);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	63 e0       	ldi	r22, 0x03	; 3
     b66:	0e 94 2a 0a 	call	0x1454	; 0x1454 <MEXTI_voidConfig>
	MEXTI_voidEnable(EXTI0);
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	0e 94 9d 0a 	call	0x153a	; 0x153a <MEXTI_voidEnable>
	MGI_voidEnable();
     b70:	0e 94 24 0c 	call	0x1848	; 0x1848 <MGI_voidEnable>
	MTIMER0_voidInit();
     b74:	0e 94 cd 11 	call	0x239a	; 0x239a <MTIMER0_voidInit>
	MTIMER1_voidICUSWInit();
     b78:	0e 94 22 13 	call	0x2644	; 0x2644 <MTIMER1_voidICUSWInit>

	while(1)
	{
		while((global_u16PeriodTicks == 0) || (global_u16OnTicks == 0));
     b7c:	80 91 7b 00 	lds	r24, 0x007B
     b80:	90 91 7c 00 	lds	r25, 0x007C
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	d1 f3       	breq	.-12     	; 0xb7c <main+0x36>
     b88:	80 91 79 00 	lds	r24, 0x0079
     b8c:	90 91 7a 00 	lds	r25, 0x007A
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 f3       	breq	.-24     	; 0xb7c <main+0x36>
		HLCD_GoToPos(LCD_ROW1,LCD_COL1);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	0e 94 93 10 	call	0x2126	; 0x2126 <HLCD_GoToPos>
		HLCD_DisplayString("--> ");
     b9c:	80 e6       	ldi	r24, 0x60	; 96
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 76 10 	call	0x20ec	; 0x20ec <HLCD_DisplayString>
		HLCD_voidDisplayNumber(global_u16PeriodTicks);
     ba4:	80 91 7b 00 	lds	r24, 0x007B
     ba8:	90 91 7c 00 	lds	r25, 0x007C
     bac:	cc 01       	movw	r24, r24
     bae:	a0 e0       	ldi	r26, 0x00	; 0
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	bc 01       	movw	r22, r24
     bb4:	cd 01       	movw	r24, r26
     bb6:	0e 94 bb 10 	call	0x2176	; 0x2176 <HLCD_voidDisplayNumber>
		HLCD_GoToPos(LCD_ROW2,LCD_COL1);
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	0e 94 93 10 	call	0x2126	; 0x2126 <HLCD_GoToPos>
		HLCD_DisplayString("--> ");
     bc2:	80 e6       	ldi	r24, 0x60	; 96
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 76 10 	call	0x20ec	; 0x20ec <HLCD_DisplayString>
		HLCD_voidDisplayNumber(global_u16OnTicks);
     bca:	80 91 79 00 	lds	r24, 0x0079
     bce:	90 91 7a 00 	lds	r25, 0x007A
     bd2:	cc 01       	movw	r24, r24
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 bb 10 	call	0x2176	; 0x2176 <HLCD_voidDisplayNumber>
     be0:	cd cf       	rjmp	.-102    	; 0xb7c <main+0x36>

00000be2 <ICU_SW>:
	}



void ICU_SW(void)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
	static u8 local_u8Counter = 0;
	local_u8Counter++;
     bea:	80 91 6e 00 	lds	r24, 0x006E
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	80 93 6e 00 	sts	0x006E, r24
	if(local_u8Counter == 1)
     bf4:	80 91 6e 00 	lds	r24, 0x006E
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	29 f4       	brne	.+10     	; 0xc06 <ICU_SW+0x24>
	{
		//First Rising Edge
		MTIMER1_voidSetTimerValue(0);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 3e 13 	call	0x267c	; 0x267c <MTIMER1_voidSetTimerValue>
     c04:	2e c0       	rjmp	.+92     	; 0xc62 <ICU_SW+0x80>
	}
	else if(local_u8Counter == 2)
     c06:	80 91 6e 00 	lds	r24, 0x006E
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	59 f4       	brne	.+22     	; 0xc24 <ICU_SW+0x42>
	{
		//Second Rising Edge
		global_u16PeriodTicks = MTIMER1_u16ReadTimerValue();
     c0e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <MTIMER1_u16ReadTimerValue>
     c12:	90 93 7c 00 	sts	0x007C, r25
     c16:	80 93 7b 00 	sts	0x007B, r24
		MEXTI_voidConfig(EXTI0,FALLING_EDGE);
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <MEXTI_voidConfig>
     c22:	1f c0       	rjmp	.+62     	; 0xc62 <ICU_SW+0x80>
	}
	else if(local_u8Counter == 3)
     c24:	80 91 6e 00 	lds	r24, 0x006E
     c28:	83 30       	cpi	r24, 0x03	; 3
     c2a:	d9 f4       	brne	.+54     	; 0xc62 <ICU_SW+0x80>
	{
		global_u16OnTicks = MTIMER1_u16ReadTimerValue();
     c2c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <MTIMER1_u16ReadTimerValue>
     c30:	90 93 7a 00 	sts	0x007A, r25
     c34:	80 93 79 00 	sts	0x0079, r24
		global_u16OnTicks -= global_u16PeriodTicks;
     c38:	20 91 79 00 	lds	r18, 0x0079
     c3c:	30 91 7a 00 	lds	r19, 0x007A
     c40:	80 91 7b 00 	lds	r24, 0x007B
     c44:	90 91 7c 00 	lds	r25, 0x007C
     c48:	a9 01       	movw	r20, r18
     c4a:	48 1b       	sub	r20, r24
     c4c:	59 0b       	sbc	r21, r25
     c4e:	ca 01       	movw	r24, r20
     c50:	90 93 7a 00 	sts	0x007A, r25
     c54:	80 93 79 00 	sts	0x0079, r24
		MEXTI_voidDisable(EXTI0);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MEXTI_voidDisable>
		local_u8Counter = 0;
     c5e:	10 92 6e 00 	sts	0x006E, r1
	}
}
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <MDIO_voidSetPinDirection>:
#include "../include/MCAL/DIO/DIO_Private.h"
#include "../include/MCAL/DIO/DIO_Cfg.h"


void MDIO_voidSetPinDirection(DIO_PORT_e A_portID,DIO_PIN_e A_pinID,DIO_DIRECTION_e A_pinDirection)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	2d 97       	sbiw	r28, 0x0d	; 13
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	6a 83       	std	Y+2, r22	; 0x02
     c80:	4b 83       	std	Y+3, r20	; 0x03
	//Input validation
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT))
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	84 30       	cpi	r24, 0x04	; 4
     c86:	08 f0       	brcs	.+2      	; 0xc8a <MDIO_voidSetPinDirection+0x22>
     c88:	09 c1       	rjmp	.+530    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	88 30       	cpi	r24, 0x08	; 8
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <MDIO_voidSetPinDirection+0x2a>
     c90:	05 c1       	rjmp	.+522    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f0       	brcs	.+2      	; 0xc9a <MDIO_voidSetPinDirection+0x32>
     c98:	01 c1       	rjmp	.+514    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
	{
		switch(A_portID)
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	3d 87       	std	Y+13, r19	; 0x0d
     ca2:	2c 87       	std	Y+12, r18	; 0x0c
     ca4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	91 05       	cpc	r25, r1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <MDIO_voidSetPinDirection+0x48>
     cae:	4f c0       	rjmp	.+158    	; 0xd4e <MDIO_voidSetPinDirection+0xe6>
     cb0:	2c 85       	ldd	r18, Y+12	; 0x0c
     cb2:	3d 85       	ldd	r19, Y+13	; 0x0d
     cb4:	22 30       	cpi	r18, 0x02	; 2
     cb6:	31 05       	cpc	r19, r1
     cb8:	2c f4       	brge	.+10     	; 0xcc4 <MDIO_voidSetPinDirection+0x5c>
     cba:	8c 85       	ldd	r24, Y+12	; 0x0c
     cbc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	71 f0       	breq	.+28     	; 0xcde <MDIO_voidSetPinDirection+0x76>
     cc2:	ec c0       	rjmp	.+472    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
     cc4:	2c 85       	ldd	r18, Y+12	; 0x0c
     cc6:	3d 85       	ldd	r19, Y+13	; 0x0d
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <MDIO_voidSetPinDirection+0x68>
     cce:	77 c0       	rjmp	.+238    	; 0xdbe <MDIO_voidSetPinDirection+0x156>
     cd0:	8c 85       	ldd	r24, Y+12	; 0x0c
     cd2:	9d 85       	ldd	r25, Y+13	; 0x0d
     cd4:	83 30       	cpi	r24, 0x03	; 3
     cd6:	91 05       	cpc	r25, r1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <MDIO_voidSetPinDirection+0x74>
     cda:	a9 c0       	rjmp	.+338    	; 0xe2e <MDIO_voidSetPinDirection+0x1c6>
     cdc:	df c0       	rjmp	.+446    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch(A_pinDirection)
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	3b 87       	std	Y+11, r19	; 0x0b
     ce6:	2a 87       	std	Y+10, r18	; 0x0a
     ce8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cea:	9b 85       	ldd	r25, Y+11	; 0x0b
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	31 f0       	breq	.+12     	; 0xcfc <MDIO_voidSetPinDirection+0x94>
     cf0:	2a 85       	ldd	r18, Y+10	; 0x0a
     cf2:	3b 85       	ldd	r19, Y+11	; 0x0b
     cf4:	21 30       	cpi	r18, 0x01	; 1
     cf6:	31 05       	cpc	r19, r1
     cf8:	b1 f0       	breq	.+44     	; 0xd26 <MDIO_voidSetPinDirection+0xbe>
     cfa:	d0 c0       	rjmp	.+416    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <MDIO_voidSetPinDirection+0xb2>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <MDIO_voidSetPinDirection+0xae>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	bb c0       	rjmp	.+374    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <MDIO_voidSetPinDirection+0xdc>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <MDIO_voidSetPinDirection+0xd8>
     d48:	84 2b       	or	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	a7 c0       	rjmp	.+334    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			case DIO_PORTB:
				switch(A_pinDirection)
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	39 87       	std	Y+9, r19	; 0x09
     d56:	28 87       	std	Y+8, r18	; 0x08
     d58:	88 85       	ldd	r24, Y+8	; 0x08
     d5a:	99 85       	ldd	r25, Y+9	; 0x09
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	31 f0       	breq	.+12     	; 0xd6c <MDIO_voidSetPinDirection+0x104>
     d60:	28 85       	ldd	r18, Y+8	; 0x08
     d62:	39 85       	ldd	r19, Y+9	; 0x09
     d64:	21 30       	cpi	r18, 0x01	; 1
     d66:	31 05       	cpc	r19, r1
     d68:	b1 f0       	breq	.+44     	; 0xd96 <MDIO_voidSetPinDirection+0x12e>
     d6a:	98 c0       	rjmp	.+304    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
				{
				case DIO_INPUT:
					CLR_BIT(DDRB_REG,A_pinID);
     d6c:	a7 e3       	ldi	r26, 0x37	; 55
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e7 e3       	ldi	r30, 0x37	; 55
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <MDIO_voidSetPinDirection+0x122>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <MDIO_voidSetPinDirection+0x11e>
     d8e:	80 95       	com	r24
     d90:	84 23       	and	r24, r20
     d92:	8c 93       	st	X, r24
     d94:	83 c0       	rjmp	.+262    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
					break;
				case DIO_OUTPUT:
					SET_BIT(DDRB_REG,A_pinID);
     d96:	a7 e3       	ldi	r26, 0x37	; 55
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e7 e3       	ldi	r30, 0x37	; 55
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <MDIO_voidSetPinDirection+0x14c>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <MDIO_voidSetPinDirection+0x148>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	6f c0       	rjmp	.+222    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
					break;
				}
				break;
				case DIO_PORTC:
					switch(A_pinDirection)
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3f 83       	std	Y+7, r19	; 0x07
     dc6:	2e 83       	std	Y+6, r18	; 0x06
     dc8:	8e 81       	ldd	r24, Y+6	; 0x06
     dca:	9f 81       	ldd	r25, Y+7	; 0x07
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	31 f0       	breq	.+12     	; 0xddc <MDIO_voidSetPinDirection+0x174>
     dd0:	2e 81       	ldd	r18, Y+6	; 0x06
     dd2:	3f 81       	ldd	r19, Y+7	; 0x07
     dd4:	21 30       	cpi	r18, 0x01	; 1
     dd6:	31 05       	cpc	r19, r1
     dd8:	b1 f0       	breq	.+44     	; 0xe06 <MDIO_voidSetPinDirection+0x19e>
     dda:	60 c0       	rjmp	.+192    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
					{
					case DIO_INPUT:
						CLR_BIT(DDRC_REG,A_pinID);
     ddc:	a4 e3       	ldi	r26, 0x34	; 52
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e4 e3       	ldi	r30, 0x34	; 52
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	48 2f       	mov	r20, r24
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <MDIO_voidSetPinDirection+0x192>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <MDIO_voidSetPinDirection+0x18e>
     dfe:	80 95       	com	r24
     e00:	84 23       	and	r24, r20
     e02:	8c 93       	st	X, r24
     e04:	4b c0       	rjmp	.+150    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
						break;
					case DIO_OUTPUT:
						SET_BIT(DDRC_REG,A_pinID);
     e06:	a4 e3       	ldi	r26, 0x34	; 52
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e4 e3       	ldi	r30, 0x34	; 52
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <MDIO_voidSetPinDirection+0x1bc>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <MDIO_voidSetPinDirection+0x1b8>
     e28:	84 2b       	or	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	37 c0       	rjmp	.+110    	; 0xe9c <MDIO_voidSetPinDirection+0x234>
						break;
					}
					break;
					case DIO_PORTD:
						switch(A_pinDirection)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	3d 83       	std	Y+5, r19	; 0x05
     e36:	2c 83       	std	Y+4, r18	; 0x04
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	9d 81       	ldd	r25, Y+5	; 0x05
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	31 f0       	breq	.+12     	; 0xe4c <MDIO_voidSetPinDirection+0x1e4>
     e40:	2c 81       	ldd	r18, Y+4	; 0x04
     e42:	3d 81       	ldd	r19, Y+5	; 0x05
     e44:	21 30       	cpi	r18, 0x01	; 1
     e46:	31 05       	cpc	r19, r1
     e48:	b1 f0       	breq	.+44     	; 0xe76 <MDIO_voidSetPinDirection+0x20e>
     e4a:	28 c0       	rjmp	.+80     	; 0xe9c <MDIO_voidSetPinDirection+0x234>
						{
						case DIO_INPUT:
							CLR_BIT(DDRD_REG,A_pinID);
     e4c:	a1 e3       	ldi	r26, 0x31	; 49
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e1 e3       	ldi	r30, 0x31	; 49
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	48 2f       	mov	r20, r24
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <MDIO_voidSetPinDirection+0x202>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <MDIO_voidSetPinDirection+0x1fe>
     e6e:	80 95       	com	r24
     e70:	84 23       	and	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	13 c0       	rjmp	.+38     	; 0xe9c <MDIO_voidSetPinDirection+0x234>
							break;
						case DIO_OUTPUT:
							SET_BIT(DDRD_REG,A_pinID);
     e76:	a1 e3       	ldi	r26, 0x31	; 49
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e1 e3       	ldi	r30, 0x31	; 49
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <MDIO_voidSetPinDirection+0x22c>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <MDIO_voidSetPinDirection+0x228>
     e98:	84 2b       	or	r24, r20
     e9a:	8c 93       	st	X, r24
	}
	else
	{
		//DO Nothing
	}
}
     e9c:	2d 96       	adiw	r28, 0x0d	; 13
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID,DIO_VALUE_e A_pinValue)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	2d 97       	sbiw	r28, 0x0d	; 13
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	6a 83       	std	Y+2, r22	; 0x02
     ec6:	4b 83       	std	Y+3, r20	; 0x03
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_SET))
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	08 f0       	brcs	.+2      	; 0xed0 <MDIO_voidSetPinValue+0x22>
     ece:	09 c1       	rjmp	.+530    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	88 30       	cpi	r24, 0x08	; 8
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <MDIO_voidSetPinValue+0x2a>
     ed6:	05 c1       	rjmp	.+522    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	08 f0       	brcs	.+2      	; 0xee0 <MDIO_voidSetPinValue+0x32>
     ede:	01 c1       	rjmp	.+514    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
	{
		switch(A_portID)
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	3d 87       	std	Y+13, r19	; 0x0d
     ee8:	2c 87       	std	Y+12, r18	; 0x0c
     eea:	8c 85       	ldd	r24, Y+12	; 0x0c
     eec:	9d 85       	ldd	r25, Y+13	; 0x0d
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <MDIO_voidSetPinValue+0x48>
     ef4:	4f c0       	rjmp	.+158    	; 0xf94 <MDIO_voidSetPinValue+0xe6>
     ef6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef8:	3d 85       	ldd	r19, Y+13	; 0x0d
     efa:	22 30       	cpi	r18, 0x02	; 2
     efc:	31 05       	cpc	r19, r1
     efe:	2c f4       	brge	.+10     	; 0xf0a <MDIO_voidSetPinValue+0x5c>
     f00:	8c 85       	ldd	r24, Y+12	; 0x0c
     f02:	9d 85       	ldd	r25, Y+13	; 0x0d
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	71 f0       	breq	.+28     	; 0xf24 <MDIO_voidSetPinValue+0x76>
     f08:	ec c0       	rjmp	.+472    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
     f0a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f0c:	3d 85       	ldd	r19, Y+13	; 0x0d
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <MDIO_voidSetPinValue+0x68>
     f14:	77 c0       	rjmp	.+238    	; 0x1004 <MDIO_voidSetPinValue+0x156>
     f16:	8c 85       	ldd	r24, Y+12	; 0x0c
     f18:	9d 85       	ldd	r25, Y+13	; 0x0d
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <MDIO_voidSetPinValue+0x74>
     f20:	a9 c0       	rjmp	.+338    	; 0x1074 <MDIO_voidSetPinValue+0x1c6>
     f22:	df c0       	rjmp	.+446    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch(A_pinValue)
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	3b 87       	std	Y+11, r19	; 0x0b
     f2c:	2a 87       	std	Y+10, r18	; 0x0a
     f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f30:	9b 85       	ldd	r25, Y+11	; 0x0b
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	31 f0       	breq	.+12     	; 0xf42 <MDIO_voidSetPinValue+0x94>
     f36:	2a 85       	ldd	r18, Y+10	; 0x0a
     f38:	3b 85       	ldd	r19, Y+11	; 0x0b
     f3a:	21 30       	cpi	r18, 0x01	; 1
     f3c:	31 05       	cpc	r19, r1
     f3e:	b1 f0       	breq	.+44     	; 0xf6c <MDIO_voidSetPinValue+0xbe>
     f40:	d0 c0       	rjmp	.+416    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <MDIO_voidSetPinValue+0xb2>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <MDIO_voidSetPinValue+0xae>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	bb c0       	rjmp	.+374    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
     f6c:	ab e3       	ldi	r26, 0x3B	; 59
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	eb e3       	ldi	r30, 0x3B	; 59
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <MDIO_voidSetPinValue+0xdc>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <MDIO_voidSetPinValue+0xd8>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	a7 c0       	rjmp	.+334    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			case DIO_PORTB:
				switch(A_pinValue)
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	39 87       	std	Y+9, r19	; 0x09
     f9c:	28 87       	std	Y+8, r18	; 0x08
     f9e:	88 85       	ldd	r24, Y+8	; 0x08
     fa0:	99 85       	ldd	r25, Y+9	; 0x09
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <MDIO_voidSetPinValue+0x104>
     fa6:	28 85       	ldd	r18, Y+8	; 0x08
     fa8:	39 85       	ldd	r19, Y+9	; 0x09
     faa:	21 30       	cpi	r18, 0x01	; 1
     fac:	31 05       	cpc	r19, r1
     fae:	b1 f0       	breq	.+44     	; 0xfdc <MDIO_voidSetPinValue+0x12e>
     fb0:	98 c0       	rjmp	.+304    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
				{
				case DIO_RESET:
					CLR_BIT(PORTB_REG,A_pinID);
     fb2:	a8 e3       	ldi	r26, 0x38	; 56
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e8 e3       	ldi	r30, 0x38	; 56
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <MDIO_voidSetPinValue+0x122>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <MDIO_voidSetPinValue+0x11e>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	83 c0       	rjmp	.+262    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
					break;
				case DIO_SET:
					SET_BIT(PORTB_REG,A_pinID);
     fdc:	a8 e3       	ldi	r26, 0x38	; 56
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e8 e3       	ldi	r30, 0x38	; 56
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <MDIO_voidSetPinValue+0x14c>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <MDIO_voidSetPinValue+0x148>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	6f c0       	rjmp	.+222    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
					break;
				}
				break;
				case DIO_PORTC:
					switch(A_pinValue)
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3f 83       	std	Y+7, r19	; 0x07
    100c:	2e 83       	std	Y+6, r18	; 0x06
    100e:	8e 81       	ldd	r24, Y+6	; 0x06
    1010:	9f 81       	ldd	r25, Y+7	; 0x07
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	31 f0       	breq	.+12     	; 0x1022 <MDIO_voidSetPinValue+0x174>
    1016:	2e 81       	ldd	r18, Y+6	; 0x06
    1018:	3f 81       	ldd	r19, Y+7	; 0x07
    101a:	21 30       	cpi	r18, 0x01	; 1
    101c:	31 05       	cpc	r19, r1
    101e:	b1 f0       	breq	.+44     	; 0x104c <MDIO_voidSetPinValue+0x19e>
    1020:	60 c0       	rjmp	.+192    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
					{
					case DIO_RESET:
						CLR_BIT(PORTC_REG,A_pinID);
    1022:	a5 e3       	ldi	r26, 0x35	; 53
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e5 e3       	ldi	r30, 0x35	; 53
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <MDIO_voidSetPinValue+0x192>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <MDIO_voidSetPinValue+0x18e>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	4b c0       	rjmp	.+150    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
						break;
					case DIO_SET:
						SET_BIT(PORTC_REG,A_pinID);
    104c:	a5 e3       	ldi	r26, 0x35	; 53
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e3       	ldi	r30, 0x35	; 53
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <MDIO_voidSetPinValue+0x1bc>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <MDIO_voidSetPinValue+0x1b8>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	37 c0       	rjmp	.+110    	; 0x10e2 <MDIO_voidSetPinValue+0x234>
						break;
					}
					break;
					case DIO_PORTD:
						switch(A_pinValue)
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3d 83       	std	Y+5, r19	; 0x05
    107c:	2c 83       	std	Y+4, r18	; 0x04
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	31 f0       	breq	.+12     	; 0x1092 <MDIO_voidSetPinValue+0x1e4>
    1086:	2c 81       	ldd	r18, Y+4	; 0x04
    1088:	3d 81       	ldd	r19, Y+5	; 0x05
    108a:	21 30       	cpi	r18, 0x01	; 1
    108c:	31 05       	cpc	r19, r1
    108e:	b1 f0       	breq	.+44     	; 0x10bc <MDIO_voidSetPinValue+0x20e>
    1090:	28 c0       	rjmp	.+80     	; 0x10e2 <MDIO_voidSetPinValue+0x234>
						{
						case DIO_RESET:
							CLR_BIT(PORTD_REG,A_pinID);
    1092:	a2 e3       	ldi	r26, 0x32	; 50
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e2 e3       	ldi	r30, 0x32	; 50
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <MDIO_voidSetPinValue+0x202>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <MDIO_voidSetPinValue+0x1fe>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	13 c0       	rjmp	.+38     	; 0x10e2 <MDIO_voidSetPinValue+0x234>
							break;
						case DIO_SET:
							SET_BIT(PORTD_REG,A_pinID);
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <MDIO_voidSetPinValue+0x22c>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <MDIO_voidSetPinValue+0x228>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
	}
	else
	{
		//DO Nothing
	}
}
    10e2:	2d 96       	adiw	r28, 0x0d	; 13
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <MDIO_getPinValue>:


DIO_VALUE_e MDIO_getPinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <MDIO_getPinValue+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <MDIO_getPinValue+0x8>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	8a 83       	std	Y+2, r24	; 0x02
    1104:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7))
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	84 30       	cpi	r24, 0x04	; 4
    110a:	08 f0       	brcs	.+2      	; 0x110e <MDIO_getPinValue+0x1a>
    110c:	6b c0       	rjmp	.+214    	; 0x11e4 <MDIO_getPinValue+0xf0>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 30       	cpi	r24, 0x08	; 8
    1112:	08 f0       	brcs	.+2      	; 0x1116 <MDIO_getPinValue+0x22>
    1114:	67 c0       	rjmp	.+206    	; 0x11e4 <MDIO_getPinValue+0xf0>
	{
		switch(A_portID)
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	3d 83       	std	Y+5, r19	; 0x05
    111e:	2c 83       	std	Y+4, r18	; 0x04
    1120:	4c 81       	ldd	r20, Y+4	; 0x04
    1122:	5d 81       	ldd	r21, Y+5	; 0x05
    1124:	41 30       	cpi	r20, 0x01	; 1
    1126:	51 05       	cpc	r21, r1
    1128:	41 f1       	breq	.+80     	; 0x117a <MDIO_getPinValue+0x86>
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	9d 81       	ldd	r25, Y+5	; 0x05
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	91 05       	cpc	r25, r1
    1132:	34 f4       	brge	.+12     	; 0x1140 <MDIO_getPinValue+0x4c>
    1134:	2c 81       	ldd	r18, Y+4	; 0x04
    1136:	3d 81       	ldd	r19, Y+5	; 0x05
    1138:	21 15       	cp	r18, r1
    113a:	31 05       	cpc	r19, r1
    113c:	61 f0       	breq	.+24     	; 0x1156 <MDIO_getPinValue+0x62>
    113e:	52 c0       	rjmp	.+164    	; 0x11e4 <MDIO_getPinValue+0xf0>
    1140:	4c 81       	ldd	r20, Y+4	; 0x04
    1142:	5d 81       	ldd	r21, Y+5	; 0x05
    1144:	42 30       	cpi	r20, 0x02	; 2
    1146:	51 05       	cpc	r21, r1
    1148:	51 f1       	breq	.+84     	; 0x119e <MDIO_getPinValue+0xaa>
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	b9 f1       	breq	.+110    	; 0x11c2 <MDIO_getPinValue+0xce>
    1154:	47 c0       	rjmp	.+142    	; 0x11e4 <MDIO_getPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1156:	e9 e3       	ldi	r30, 0x39	; 57
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <MDIO_getPinValue+0x7a>
    116a:	55 95       	asr	r21
    116c:	47 95       	ror	r20
    116e:	8a 95       	dec	r24
    1170:	e2 f7       	brpl	.-8      	; 0x116a <MDIO_getPinValue+0x76>
    1172:	ca 01       	movw	r24, r20
    1174:	81 70       	andi	r24, 0x01	; 1
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	35 c0       	rjmp	.+106    	; 0x11e4 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    117a:	e6 e3       	ldi	r30, 0x36	; 54
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <MDIO_getPinValue+0x9e>
    118e:	55 95       	asr	r21
    1190:	47 95       	ror	r20
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <MDIO_getPinValue+0x9a>
    1196:	ca 01       	movw	r24, r20
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	23 c0       	rjmp	.+70     	; 0x11e4 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    119e:	e3 e3       	ldi	r30, 0x33	; 51
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a9 01       	movw	r20, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <MDIO_getPinValue+0xc2>
    11b2:	55 95       	asr	r21
    11b4:	47 95       	ror	r20
    11b6:	8a 95       	dec	r24
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <MDIO_getPinValue+0xbe>
    11ba:	ca 01       	movw	r24, r20
    11bc:	81 70       	andi	r24, 0x01	; 1
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	11 c0       	rjmp	.+34     	; 0x11e4 <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    11c2:	e0 e3       	ldi	r30, 0x30	; 48
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a9 01       	movw	r20, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <MDIO_getPinValue+0xe6>
    11d6:	55 95       	asr	r21
    11d8:	47 95       	ror	r20
    11da:	8a 95       	dec	r24
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <MDIO_getPinValue+0xe2>
    11de:	ca 01       	movw	r24, r20
    11e0:	81 70       	andi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01
	{
		//Do Nothing
	}


	return local_PinValue;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <MDIO_voidTogglePinValue>:




void MDIO_voidTogglePinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <MDIO_voidTogglePinValue+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <MDIO_voidTogglePinValue+0x8>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7))
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	08 f0       	brcs	.+2      	; 0x120e <MDIO_voidTogglePinValue+0x18>
    120c:	72 c0       	rjmp	.+228    	; 0x12f2 <MDIO_voidTogglePinValue+0xfc>
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	88 30       	cpi	r24, 0x08	; 8
    1212:	08 f0       	brcs	.+2      	; 0x1216 <MDIO_voidTogglePinValue+0x20>
    1214:	6e c0       	rjmp	.+220    	; 0x12f2 <MDIO_voidTogglePinValue+0xfc>
	{
		switch(A_portID)
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	91 05       	cpc	r25, r1
    1228:	49 f1       	breq	.+82     	; 0x127c <MDIO_voidTogglePinValue+0x86>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	22 30       	cpi	r18, 0x02	; 2
    1230:	31 05       	cpc	r19, r1
    1232:	2c f4       	brge	.+10     	; 0x123e <MDIO_voidTogglePinValue+0x48>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	61 f0       	breq	.+24     	; 0x1254 <MDIO_voidTogglePinValue+0x5e>
    123c:	5a c0       	rjmp	.+180    	; 0x12f2 <MDIO_voidTogglePinValue+0xfc>
    123e:	2b 81       	ldd	r18, Y+3	; 0x03
    1240:	3c 81       	ldd	r19, Y+4	; 0x04
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	71 f1       	breq	.+92     	; 0x12a4 <MDIO_voidTogglePinValue+0xae>
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	9c 81       	ldd	r25, Y+4	; 0x04
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	91 05       	cpc	r25, r1
    1250:	e9 f1       	breq	.+122    	; 0x12cc <MDIO_voidTogglePinValue+0xd6>
    1252:	4f c0       	rjmp	.+158    	; 0x12f2 <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOG_BIT(PORTA_REG,A_pinID);
    1254:	ab e3       	ldi	r26, 0x3B	; 59
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	eb e3       	ldi	r30, 0x3B	; 59
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <MDIO_voidTogglePinValue+0x7c>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <MDIO_voidTogglePinValue+0x78>
    1276:	84 27       	eor	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	3b c0       	rjmp	.+118    	; 0x12f2 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOG_BIT(PORTB_REG,A_pinID);
    127c:	a8 e3       	ldi	r26, 0x38	; 56
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e8 e3       	ldi	r30, 0x38	; 56
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <MDIO_voidTogglePinValue+0xa4>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <MDIO_voidTogglePinValue+0xa0>
    129e:	84 27       	eor	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	27 c0       	rjmp	.+78     	; 0x12f2 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOG_BIT(PORTC_REG,A_pinID);
    12a4:	a5 e3       	ldi	r26, 0x35	; 53
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e3       	ldi	r30, 0x35	; 53
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <MDIO_voidTogglePinValue+0xcc>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <MDIO_voidTogglePinValue+0xc8>
    12c6:	84 27       	eor	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	13 c0       	rjmp	.+38     	; 0x12f2 <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOG_BIT(PORTD_REG,A_pinID);
    12cc:	a2 e3       	ldi	r26, 0x32	; 50
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e2 e3       	ldi	r30, 0x32	; 50
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <MDIO_voidTogglePinValue+0xf4>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <MDIO_voidTogglePinValue+0xf0>
    12ee:	84 27       	eor	r24, r20
    12f0:	8c 93       	st	X, r24
	else
	{
		//Do Nothing
	}

}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(DIO_PORT_e A_portID,u8 A_u8PortDirection)
{
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <MDIO_voidSetPortDirection+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <MDIO_voidSetPortDirection+0x8>
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	6a 83       	std	Y+2, r22	; 0x02
	if(A_portID <= DIO_PORTD)
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	84 30       	cpi	r24, 0x04	; 4
    1314:	90 f5       	brcc	.+100    	; 0x137a <MDIO_voidSetPortDirection+0x7a>
	{
		switch(A_portID)
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	3c 83       	std	Y+4, r19	; 0x04
    131e:	2b 83       	std	Y+3, r18	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	91 05       	cpc	r25, r1
    1328:	d1 f0       	breq	.+52     	; 0x135e <MDIO_voidSetPortDirection+0x5e>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	2c f4       	brge	.+10     	; 0x133e <MDIO_voidSetPortDirection+0x3e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 f0       	breq	.+24     	; 0x1354 <MDIO_voidSetPortDirection+0x54>
    133c:	1e c0       	rjmp	.+60     	; 0x137a <MDIO_voidSetPortDirection+0x7a>
    133e:	2b 81       	ldd	r18, Y+3	; 0x03
    1340:	3c 81       	ldd	r19, Y+4	; 0x04
    1342:	22 30       	cpi	r18, 0x02	; 2
    1344:	31 05       	cpc	r19, r1
    1346:	81 f0       	breq	.+32     	; 0x1368 <MDIO_voidSetPortDirection+0x68>
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	83 30       	cpi	r24, 0x03	; 3
    134e:	91 05       	cpc	r25, r1
    1350:	81 f0       	breq	.+32     	; 0x1372 <MDIO_voidSetPortDirection+0x72>
    1352:	13 c0       	rjmp	.+38     	; 0x137a <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    1354:	ea e3       	ldi	r30, 0x3A	; 58
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	80 83       	st	Z, r24
    135c:	0e c0       	rjmp	.+28     	; 0x137a <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    135e:	e7 e3       	ldi	r30, 0x37	; 55
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	80 83       	st	Z, r24
    1366:	09 c0       	rjmp	.+18     	; 0x137a <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1368:	e4 e3       	ldi	r30, 0x34	; 52
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	80 83       	st	Z, r24
    1370:	04 c0       	rjmp	.+8      	; 0x137a <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    1372:	e1 e3       	ldi	r30, 0x31	; 49
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	80 83       	st	Z, r24
	else
	{
		//Do Nothing
	}

}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(DIO_PORT_e A_portID,u8 A_u8PortValue)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <MDIO_voidSetPortValue+0x6>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <MDIO_voidSetPortValue+0x8>
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	6a 83       	std	Y+2, r22	; 0x02
	if(A_portID <= DIO_PORTD)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	90 f5       	brcc	.+100    	; 0x1402 <MDIO_voidSetPortValue+0x7a>
	{
		switch(A_portID)
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3c 83       	std	Y+4, r19	; 0x04
    13a6:	2b 83       	std	Y+3, r18	; 0x03
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	d1 f0       	breq	.+52     	; 0x13e6 <MDIO_voidSetPortValue+0x5e>
    13b2:	2b 81       	ldd	r18, Y+3	; 0x03
    13b4:	3c 81       	ldd	r19, Y+4	; 0x04
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <MDIO_voidSetPortValue+0x3e>
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	61 f0       	breq	.+24     	; 0x13dc <MDIO_voidSetPortValue+0x54>
    13c4:	1e c0       	rjmp	.+60     	; 0x1402 <MDIO_voidSetPortValue+0x7a>
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	81 f0       	breq	.+32     	; 0x13f0 <MDIO_voidSetPortValue+0x68>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	81 f0       	breq	.+32     	; 0x13fa <MDIO_voidSetPortValue+0x72>
    13da:	13 c0       	rjmp	.+38     	; 0x1402 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	80 83       	st	Z, r24
    13e4:	0e c0       	rjmp	.+28     	; 0x1402 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    13e6:	e8 e3       	ldi	r30, 0x38	; 56
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	80 83       	st	Z, r24
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	80 83       	st	Z, r24
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    13fa:	e2 e3       	ldi	r30, 0x32	; 50
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <MDIO_voidInit>:


MDIO_voidInit(void)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);
    1418:	ea e3       	ldi	r30, 0x3A	; 58
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	10 82       	st	Z, r1

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);
    141e:	e7 e3       	ldi	r30, 0x37	; 55
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	88 e0       	ldi	r24, 0x08	; 8
    1424:	80 83       	st	Z, r24

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);
    1426:	e4 e3       	ldi	r30, 0x34	; 52
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	80 83       	st	Z, r24

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);
    142e:	e1 e3       	ldi	r30, 0x31	; 49
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	88 e3       	ldi	r24, 0x38	; 56
    1434:	80 83       	st	Z, r24



	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);
    1436:	eb e3       	ldi	r30, 0x3B	; 59
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	10 82       	st	Z, r1

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);
    143c:	e8 e3       	ldi	r30, 0x38	; 56
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	10 82       	st	Z, r1

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);
    1442:	e5 e3       	ldi	r30, 0x35	; 53
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	10 82       	st	Z, r1

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
    1448:	e2 e3       	ldi	r30, 0x32	; 50
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	10 82       	st	Z, r1


}
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <MEXTI_voidConfig>:
void (*EXTI0_CallBack) (void) = NULL;
void (*EXTI1_CallBack) (void) = NULL;
void (*EXTI2_CallBack) (void) = NULL;

void MEXTI_voidConfig(EXTI_ID A_EXTI_ID,EXTI_SENSE_MODE A_EXTISenseMode)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <MEXTI_voidConfig+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <MEXTI_voidConfig+0x8>
    145c:	00 d0       	rcall	.+0      	; 0x145e <MEXTI_voidConfig+0xa>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if((A_EXTI_ID <= EXTI2) && (A_EXTISenseMode <= RISING_EDGE))
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	08 f0       	brcs	.+2      	; 0x146e <MEXTI_voidConfig+0x1a>
    146c:	5d c0       	rjmp	.+186    	; 0x1528 <MEXTI_voidConfig+0xd4>
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	08 f0       	brcs	.+2      	; 0x1476 <MEXTI_voidConfig+0x22>
    1474:	59 c0       	rjmp	.+178    	; 0x1528 <MEXTI_voidConfig+0xd4>
	{
		switch(A_EXTI_ID)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3e 83       	std	Y+6, r19	; 0x06
    147e:	2d 83       	std	Y+5, r18	; 0x05
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	d1 f0       	breq	.+52     	; 0x14be <MEXTI_voidConfig+0x6a>
    148a:	2d 81       	ldd	r18, Y+5	; 0x05
    148c:	3e 81       	ldd	r19, Y+6	; 0x06
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	61 f1       	breq	.+88     	; 0x14ec <MEXTI_voidConfig+0x98>
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	09 f0       	breq	.+2      	; 0x149e <MEXTI_voidConfig+0x4a>
    149c:	45 c0       	rjmp	.+138    	; 0x1528 <MEXTI_voidConfig+0xd4>
		{
		case EXTI0:
			MCUCR &= ~(SENSE_MODE_MASK << EXTI0_SENSE_MODE_BITS);
    149e:	a5 e5       	ldi	r26, 0x55	; 85
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e5 e5       	ldi	r30, 0x55	; 85
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8c 7f       	andi	r24, 0xFC	; 252
    14aa:	8c 93       	st	X, r24
			MCUCR |=  (A_EXTISenseMode << EXTI0_SENSE_MODE_BITS);
    14ac:	a5 e5       	ldi	r26, 0x55	; 85
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e5       	ldi	r30, 0x55	; 85
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	90 81       	ld	r25, Z
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	89 2b       	or	r24, r25
    14ba:	8c 93       	st	X, r24
    14bc:	35 c0       	rjmp	.+106    	; 0x1528 <MEXTI_voidConfig+0xd4>
			break;
		case EXTI1:
			MCUCR &= ~(SENSE_MODE_MASK << EXTI1_SENSE_MODE_BITS);
    14be:	a5 e5       	ldi	r26, 0x55	; 85
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e5       	ldi	r30, 0x55	; 85
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	83 7f       	andi	r24, 0xF3	; 243
    14ca:	8c 93       	st	X, r24
			MCUCR |=  (A_EXTISenseMode << EXTI1_SENSE_MODE_BITS);
    14cc:	a5 e5       	ldi	r26, 0x55	; 85
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e5 e5       	ldi	r30, 0x55	; 85
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	28 2f       	mov	r18, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	82 2b       	or	r24, r18
    14e8:	8c 93       	st	X, r24
    14ea:	1e c0       	rjmp	.+60     	; 0x1528 <MEXTI_voidConfig+0xd4>
			break;
		case EXTI2:
			switch(A_EXTISenseMode)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3c 83       	std	Y+4, r19	; 0x04
    14f4:	2b 83       	std	Y+3, r18	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	91 05       	cpc	r25, r1
    14fe:	69 f0       	breq	.+26     	; 0x151a <MEXTI_voidConfig+0xc6>
    1500:	2b 81       	ldd	r18, Y+3	; 0x03
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	23 30       	cpi	r18, 0x03	; 3
    1506:	31 05       	cpc	r19, r1
    1508:	79 f4       	brne	.+30     	; 0x1528 <MEXTI_voidConfig+0xd4>
			{
			case RISING_EDGE:
				SET_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    150a:	a4 e5       	ldi	r26, 0x54	; 84
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e4 e5       	ldi	r30, 0x54	; 84
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 64       	ori	r24, 0x40	; 64
    1516:	8c 93       	st	X, r24
    1518:	07 c0       	rjmp	.+14     	; 0x1528 <MEXTI_voidConfig+0xd4>
				break;
			case FALLING_EDGE:
				CLR_BIT(MCUCSR,EXTI2_SENSE_MODE_BITS);
    151a:	a4 e5       	ldi	r26, 0x54	; 84
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e4 e5       	ldi	r30, 0x54	; 84
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 7b       	andi	r24, 0xBF	; 191
    1526:	8c 93       	st	X, r24
			}
				break;
		default: break;
		}
	}
}
    1528:	26 96       	adiw	r28, 0x06	; 6
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <MEXTI_voidEnable>:

void MEXTI_voidEnable(EXTI_ID A_EXTI_ID)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <MEXTI_voidEnable+0x6>
    1540:	0f 92       	push	r0
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	89 83       	std	Y+1, r24	; 0x01
	if((A_EXTI_ID <= EXTI2))
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	83 30       	cpi	r24, 0x03	; 3
    154c:	50 f5       	brcc	.+84     	; 0x15a2 <MEXTI_voidEnable+0x68>
		{
		switch(A_EXTI_ID)
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3b 83       	std	Y+3, r19	; 0x03
    1556:	2a 83       	std	Y+2, r18	; 0x02
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	9b 81       	ldd	r25, Y+3	; 0x03
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	91 05       	cpc	r25, r1
    1560:	89 f0       	breq	.+34     	; 0x1584 <MEXTI_voidEnable+0x4a>
    1562:	2a 81       	ldd	r18, Y+2	; 0x02
    1564:	3b 81       	ldd	r19, Y+3	; 0x03
    1566:	22 30       	cpi	r18, 0x02	; 2
    1568:	31 05       	cpc	r19, r1
    156a:	a1 f0       	breq	.+40     	; 0x1594 <MEXTI_voidEnable+0x5a>
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	b9 f4       	brne	.+46     	; 0x15a2 <MEXTI_voidEnable+0x68>
		{
		case EXTI0:
			SET_BIT(GICR,EXTI0_ENABLE_BIT);
    1574:	ab e5       	ldi	r26, 0x5B	; 91
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	eb e5       	ldi	r30, 0x5B	; 91
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 64       	ori	r24, 0x40	; 64
    1580:	8c 93       	st	X, r24
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <MEXTI_voidEnable+0x68>
			break;
		case EXTI1:
			SET_BIT(GICR,EXTI1_ENABLE_BIT);
    1584:	ab e5       	ldi	r26, 0x5B	; 91
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	eb e5       	ldi	r30, 0x5B	; 91
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	80 68       	ori	r24, 0x80	; 128
    1590:	8c 93       	st	X, r24
    1592:	07 c0       	rjmp	.+14     	; 0x15a2 <MEXTI_voidEnable+0x68>
			break;
		case EXTI2:
			SET_BIT(GICR,EXTI2_ENABLE_BIT);
    1594:	ab e5       	ldi	r26, 0x5B	; 91
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	eb e5       	ldi	r30, 0x5B	; 91
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 62       	ori	r24, 0x20	; 32
    15a0:	8c 93       	st	X, r24
			break;
		}
		}
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <MEXTI_voidDisable>:


void MEXTI_voidDisable(EXTI_ID A_EXTI_ID)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <MEXTI_voidDisable+0x6>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
	if((A_EXTI_ID <= EXTI2))
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	50 f5       	brcc	.+84     	; 0x1616 <MEXTI_voidDisable+0x68>
		{
		switch(A_EXTI_ID)
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3b 83       	std	Y+3, r19	; 0x03
    15ca:	2a 83       	std	Y+2, r18	; 0x02
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	9b 81       	ldd	r25, Y+3	; 0x03
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	89 f0       	breq	.+34     	; 0x15f8 <MEXTI_voidDisable+0x4a>
    15d6:	2a 81       	ldd	r18, Y+2	; 0x02
    15d8:	3b 81       	ldd	r19, Y+3	; 0x03
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	a1 f0       	breq	.+40     	; 0x1608 <MEXTI_voidDisable+0x5a>
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	b9 f4       	brne	.+46     	; 0x1616 <MEXTI_voidDisable+0x68>
		{
		case EXTI0:
		CLR_BIT(GICR,EXTI0_ENABLE_BIT);
    15e8:	ab e5       	ldi	r26, 0x5B	; 91
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e5       	ldi	r30, 0x5B	; 91
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7b       	andi	r24, 0xBF	; 191
    15f4:	8c 93       	st	X, r24
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <MEXTI_voidDisable+0x68>
			break;
		case EXTI1:
		CLR_BIT(GICR,EXTI1_ENABLE_BIT);
    15f8:	ab e5       	ldi	r26, 0x5B	; 91
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	eb e5       	ldi	r30, 0x5B	; 91
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8f 77       	andi	r24, 0x7F	; 127
    1604:	8c 93       	st	X, r24
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <MEXTI_voidDisable+0x68>
			break;
		case EXTI2:
		CLR_BIT(GICR,EXTI2_ENABLE_BIT);
    1608:	ab e5       	ldi	r26, 0x5B	; 91
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	eb e5       	ldi	r30, 0x5B	; 91
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 7d       	andi	r24, 0xDF	; 223
    1614:	8c 93       	st	X, r24
			break;
		}
		}
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <MEXTI_voidClearFlag>:


void MEXTI_voidClearFlag(EXTI_ID A_EXTI_ID)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <MEXTI_voidClearFlag+0x6>
    1628:	0f 92       	push	r0
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	50 f5       	brcc	.+84     	; 0x168a <MEXTI_voidClearFlag+0x68>
	    {
		switch(A_EXTI_ID)
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3b 83       	std	Y+3, r19	; 0x03
    163e:	2a 83       	std	Y+2, r18	; 0x02
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	91 05       	cpc	r25, r1
    1648:	89 f0       	breq	.+34     	; 0x166c <MEXTI_voidClearFlag+0x4a>
    164a:	2a 81       	ldd	r18, Y+2	; 0x02
    164c:	3b 81       	ldd	r19, Y+3	; 0x03
    164e:	22 30       	cpi	r18, 0x02	; 2
    1650:	31 05       	cpc	r19, r1
    1652:	a1 f0       	breq	.+40     	; 0x167c <MEXTI_voidClearFlag+0x5a>
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	b9 f4       	brne	.+46     	; 0x168a <MEXTI_voidClearFlag+0x68>
		{
		case EXTI0:
			SET_BIT(GIFR,EXTI0_ENABLE_BIT);
    165c:	aa e5       	ldi	r26, 0x5A	; 90
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ea e5       	ldi	r30, 0x5A	; 90
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 64       	ori	r24, 0x40	; 64
    1668:	8c 93       	st	X, r24
    166a:	0f c0       	rjmp	.+30     	; 0x168a <MEXTI_voidClearFlag+0x68>
			break;
		case EXTI1:
			SET_BIT(GIFR,EXTI1_ENABLE_BIT);
    166c:	aa e5       	ldi	r26, 0x5A	; 90
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ea e5       	ldi	r30, 0x5A	; 90
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 68       	ori	r24, 0x80	; 128
    1678:	8c 93       	st	X, r24
    167a:	07 c0       	rjmp	.+14     	; 0x168a <MEXTI_voidClearFlag+0x68>
			break;
		case EXTI2:
			SET_BIT(GIFR,EXTI2_ENABLE_BIT);
    167c:	aa e5       	ldi	r26, 0x5A	; 90
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ea e5       	ldi	r30, 0x5A	; 90
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 62       	ori	r24, 0x20	; 32
    1688:	8c 93       	st	X, r24
			break;
		}
		}
}
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <MEXTI_voidSetCallBack>:


void MEXTI_voidSetCallBack(EXTI_ID A_EXTI_ID, void(*A_ptrToFunc)(void))
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <MEXTI_voidSetCallBack+0x6>
    169c:	00 d0       	rcall	.+0      	; 0x169e <MEXTI_voidSetCallBack+0x8>
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	7b 83       	std	Y+3, r23	; 0x03
    16a8:	6a 83       	std	Y+2, r22	; 0x02
	if((A_EXTI_ID <= EXTI2) && (A_ptrToFunc != NULL))
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	58 f5       	brcc	.+86     	; 0x1706 <MEXTI_voidSetCallBack+0x70>
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	9b 81       	ldd	r25, Y+3	; 0x03
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	39 f1       	breq	.+78     	; 0x1706 <MEXTI_voidSetCallBack+0x70>
		{
		switch(A_EXTI_ID)
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	3d 83       	std	Y+5, r19	; 0x05
    16c0:	2c 83       	std	Y+4, r18	; 0x04
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	91 05       	cpc	r25, r1
    16ca:	81 f0       	breq	.+32     	; 0x16ec <MEXTI_voidSetCallBack+0x56>
    16cc:	2c 81       	ldd	r18, Y+4	; 0x04
    16ce:	3d 81       	ldd	r19, Y+5	; 0x05
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	91 f0       	breq	.+36     	; 0x16fa <MEXTI_voidSetCallBack+0x64>
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	9d 81       	ldd	r25, Y+5	; 0x05
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	a1 f4       	brne	.+40     	; 0x1706 <MEXTI_voidSetCallBack+0x70>
		 {
	        case EXTI0:
	        EXTI0_CallBack = A_ptrToFunc;
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	9b 81       	ldd	r25, Y+3	; 0x03
    16e2:	90 93 70 00 	sts	0x0070, r25
    16e6:	80 93 6f 00 	sts	0x006F, r24
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <MEXTI_voidSetCallBack+0x70>
		    break;
		    case EXTI1:
		    EXTI1_CallBack = A_ptrToFunc;
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	90 93 72 00 	sts	0x0072, r25
    16f4:	80 93 71 00 	sts	0x0071, r24
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <MEXTI_voidSetCallBack+0x70>
			break;
			case EXTI2:
			EXTI2_CallBack = A_ptrToFunc;
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	9b 81       	ldd	r25, Y+3	; 0x03
    16fe:	90 93 74 00 	sts	0x0074, r25
    1702:	80 93 73 00 	sts	0x0073, r24
			break;
		 }
		}
}
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	0f 92       	push	r0
    171e:	11 24       	eor	r1, r1
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_CallBack != NULL)
    1740:	80 91 6f 00 	lds	r24, 0x006F
    1744:	90 91 70 00 	lds	r25, 0x0070
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	29 f0       	breq	.+10     	; 0x1756 <__vector_1+0x40>
	{
		EXTI0_CallBack();
    174c:	e0 91 6f 00 	lds	r30, 0x006F
    1750:	f0 91 70 00 	lds	r31, 0x0070
    1754:	09 95       	icall
	}
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	2f 93       	push	r18
    1788:	3f 93       	push	r19
    178a:	4f 93       	push	r20
    178c:	5f 93       	push	r21
    178e:	6f 93       	push	r22
    1790:	7f 93       	push	r23
    1792:	8f 93       	push	r24
    1794:	9f 93       	push	r25
    1796:	af 93       	push	r26
    1798:	bf 93       	push	r27
    179a:	ef 93       	push	r30
    179c:	ff 93       	push	r31
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_CallBack != NULL)
    17a6:	80 91 71 00 	lds	r24, 0x0071
    17aa:	90 91 72 00 	lds	r25, 0x0072
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	29 f0       	breq	.+10     	; 0x17bc <__vector_2+0x40>
	{
		EXTI1_CallBack();
    17b2:	e0 91 71 00 	lds	r30, 0x0071
    17b6:	f0 91 72 00 	lds	r31, 0x0072
    17ba:	09 95       	icall
	}
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	2f 93       	push	r18
    17ee:	3f 93       	push	r19
    17f0:	4f 93       	push	r20
    17f2:	5f 93       	push	r21
    17f4:	6f 93       	push	r22
    17f6:	7f 93       	push	r23
    17f8:	8f 93       	push	r24
    17fa:	9f 93       	push	r25
    17fc:	af 93       	push	r26
    17fe:	bf 93       	push	r27
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_CallBack != NULL)
    180c:	80 91 73 00 	lds	r24, 0x0073
    1810:	90 91 74 00 	lds	r25, 0x0074
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	29 f0       	breq	.+10     	; 0x1822 <__vector_3+0x40>
	{
		EXTI2_CallBack();
    1818:	e0 91 73 00 	lds	r30, 0x0073
    181c:	f0 91 74 00 	lds	r31, 0x0074
    1820:	09 95       	icall
	}
}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	ff 91       	pop	r31
    1828:	ef 91       	pop	r30
    182a:	bf 91       	pop	r27
    182c:	af 91       	pop	r26
    182e:	9f 91       	pop	r25
    1830:	8f 91       	pop	r24
    1832:	7f 91       	pop	r23
    1834:	6f 91       	pop	r22
    1836:	5f 91       	pop	r21
    1838:	4f 91       	pop	r20
    183a:	3f 91       	pop	r19
    183c:	2f 91       	pop	r18
    183e:	0f 90       	pop	r0
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	0f 90       	pop	r0
    1844:	1f 90       	pop	r1
    1846:	18 95       	reti

00001848 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_Cfg.h"


void MGI_voidEnable (void)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    1850:	af e5       	ldi	r26, 0x5F	; 95
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ef e5       	ldi	r30, 0x5F	; 95
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	80 68       	ori	r24, 0x80	; 128
    185c:	8c 93       	st	X, r24
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    186c:	af e5       	ldi	r26, 0x5F	; 95
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	ef e5       	ldi	r30, 0x5F	; 95
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8f 77       	andi	r24, 0x7F	; 127
    1878:	8c 93       	st	X, r24
}
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <HLCD_voidSendCommand>:
#include <util/delay.h>

#define F_CPU	8000000UL

void HLCD_voidSendCommand(u8 A_u8Command)
 {
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	2f 97       	sbiw	r28, 0x0f	; 15
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	8f 87       	std	Y+15, r24	; 0x0f
	 //To Send Command	(RS-->0,RW-->0)
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_RESET);
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	63 e0       	ldi	r22, 0x03	; 3
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_RESET);
    18a0:	83 e0       	ldi	r24, 0x03	; 3
    18a2:	64 e0       	ldi	r22, 0x04	; 4
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>

	 //Send Command
	 MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ae:	0e 94 c4 09 	call	0x1388	; 0x1388 <MDIO_voidSetPortValue>

	 //Set Pulse On E Pin
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_SET);
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	65 e0       	ldi	r22, 0x05	; 5
    18b6:	41 e0       	ldi	r20, 0x01	; 1
    18b8:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e0       	ldi	r26, 0x00	; 0
    18c2:	b0 e4       	ldi	r27, 0x40	; 64
    18c4:	8b 87       	std	Y+11, r24	; 0x0b
    18c6:	9c 87       	std	Y+12, r25	; 0x0c
    18c8:	ad 87       	std	Y+13, r26	; 0x0d
    18ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a ef       	ldi	r20, 0xFA	; 250
    18da:	54 e4       	ldi	r21, 0x44	; 68
    18dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	8f 83       	std	Y+7, r24	; 0x07
    18e6:	98 87       	std	Y+8, r25	; 0x08
    18e8:	a9 87       	std	Y+9, r26	; 0x09
    18ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ec:	6f 81       	ldd	r22, Y+7	; 0x07
    18ee:	78 85       	ldd	r23, Y+8	; 0x08
    18f0:	89 85       	ldd	r24, Y+9	; 0x09
    18f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e8       	ldi	r20, 0x80	; 128
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1900:	88 23       	and	r24, r24
    1902:	2c f4       	brge	.+10     	; 0x190e <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	3f c0       	rjmp	.+126    	; 0x198c <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    190e:	6f 81       	ldd	r22, Y+7	; 0x07
    1910:	78 85       	ldd	r23, Y+8	; 0x08
    1912:	89 85       	ldd	r24, Y+9	; 0x09
    1914:	9a 85       	ldd	r25, Y+10	; 0x0a
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	3f ef       	ldi	r19, 0xFF	; 255
    191a:	4f e7       	ldi	r20, 0x7F	; 127
    191c:	57 e4       	ldi	r21, 0x47	; 71
    191e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1922:	18 16       	cp	r1, r24
    1924:	4c f5       	brge	.+82     	; 0x1978 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1926:	6b 85       	ldd	r22, Y+11	; 0x0b
    1928:	7c 85       	ldd	r23, Y+12	; 0x0c
    192a:	8d 85       	ldd	r24, Y+13	; 0x0d
    192c:	9e 85       	ldd	r25, Y+14	; 0x0e
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e2       	ldi	r20, 0x20	; 32
    1934:	51 e4       	ldi	r21, 0x41	; 65
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	bc 01       	movw	r22, r24
    1940:	cd 01       	movw	r24, r26
    1942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	0f c0       	rjmp	.+30     	; 0x196e <HLCD_voidSendCommand+0xee>
    1950:	88 ec       	ldi	r24, 0xC8	; 200
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9c 83       	std	Y+4, r25	; 0x04
    1956:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <HLCD_voidSendCommand+0xdc>
    1960:	9c 83       	std	Y+4, r25	; 0x04
    1962:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	69 f7       	brne	.-38     	; 0x1950 <HLCD_voidSendCommand+0xd0>
    1976:	14 c0       	rjmp	.+40     	; 0x19a0 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1978:	6f 81       	ldd	r22, Y+7	; 0x07
    197a:	78 85       	ldd	r23, Y+8	; 0x08
    197c:	89 85       	ldd	r24, Y+9	; 0x09
    197e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9e 83       	std	Y+6, r25	; 0x06
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	9a 81       	ldd	r25, Y+2	; 0x02
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <HLCD_voidSendCommand+0x118>
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_RESET);
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	65 e0       	ldi	r22, 0x05	; 5
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>


 }
    19aa:	2f 96       	adiw	r28, 0x0f	; 15
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
 {
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	2f 97       	sbiw	r28, 0x0f	; 15
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	8f 87       	std	Y+15, r24	; 0x0f
	     //To Send Data(RS-->1,RW-->0)
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_SET);
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	63 e0       	ldi	r22, 0x03	; 3
    19d6:	41 e0       	ldi	r20, 0x01	; 1
    19d8:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_RESET);
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	64 e0       	ldi	r22, 0x04	; 4
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>

	 	 //Send Data
	 	 MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    19ea:	0e 94 c4 09 	call	0x1388	; 0x1388 <MDIO_voidSetPortValue>

	 	 //Set Pulse On E Pin
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_SET);
    19ee:	83 e0       	ldi	r24, 0x03	; 3
    19f0:	65 e0       	ldi	r22, 0x05	; 5
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a0 e0       	ldi	r26, 0x00	; 0
    19fe:	b0 e4       	ldi	r27, 0x40	; 64
    1a00:	8b 87       	std	Y+11, r24	; 0x0b
    1a02:	9c 87       	std	Y+12, r25	; 0x0c
    1a04:	ad 87       	std	Y+13, r26	; 0x0d
    1a06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a ef       	ldi	r20, 0xFA	; 250
    1a16:	54 e4       	ldi	r21, 0x44	; 68
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8f 83       	std	Y+7, r24	; 0x07
    1a22:	98 87       	std	Y+8, r25	; 0x08
    1a24:	a9 87       	std	Y+9, r26	; 0x09
    1a26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a28:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2a:	78 85       	ldd	r23, Y+8	; 0x08
    1a2c:	89 85       	ldd	r24, Y+9	; 0x09
    1a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4c:	78 85       	ldd	r23, Y+8	; 0x08
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <HLCD_voidSendData+0xee>
    1a8c:	88 ec       	ldi	r24, 0xC8	; 200
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <HLCD_voidSendData+0xdc>
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <HLCD_voidSendData+0xd0>
    1ab2:	14 c0       	rjmp	.+40     	; 0x1adc <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab6:	78 85       	ldd	r23, Y+8	; 0x08
    1ab8:	89 85       	ldd	r24, Y+9	; 0x09
    1aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <HLCD_voidSendData+0x118>
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
	 	 _delay_ms(2);
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_RESET);
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	65 e0       	ldi	r22, 0x05	; 5
    1ae0:	40 e0       	ldi	r20, 0x00	; 0
    1ae2:	0e 94 57 07 	call	0xeae	; 0xeae <MDIO_voidSetPinValue>


 }
    1ae6:	2f 96       	adiw	r28, 0x0f	; 15
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	c6 54       	subi	r28, 0x46	; 70
    1b06:	d0 40       	sbci	r29, 0x00	; 0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	fe 01       	movw	r30, r28
    1b14:	ed 5b       	subi	r30, 0xBD	; 189
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a0 ef       	ldi	r26, 0xF0	; 240
    1b1e:	b1 e4       	ldi	r27, 0x41	; 65
    1b20:	80 83       	st	Z, r24
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	a2 83       	std	Z+2, r26	; 0x02
    1b26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	8e 01       	movw	r16, r28
    1b2a:	01 5c       	subi	r16, 0xC1	; 193
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ed 5b       	subi	r30, 0xBD	; 189
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a ef       	ldi	r20, 0xFA	; 250
    1b42:	54 e4       	ldi	r21, 0x44	; 68
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	80 83       	st	Z, r24
    1b50:	91 83       	std	Z+1, r25	; 0x01
    1b52:	a2 83       	std	Z+2, r26	; 0x02
    1b54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b56:	fe 01       	movw	r30, r28
    1b58:	ff 96       	adiw	r30, 0x3f	; 63
    1b5a:	60 81       	ld	r22, Z
    1b5c:	71 81       	ldd	r23, Z+1	; 0x01
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	93 81       	ldd	r25, Z+3	; 0x03
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <HLCD_voidInit+0x84>
		__ticks = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9e af       	std	Y+62, r25	; 0x3e
    1b78:	8d af       	std	Y+61, r24	; 0x3d
    1b7a:	46 c0       	rjmp	.+140    	; 0x1c08 <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	ff 96       	adiw	r30, 0x3f	; 63
    1b80:	60 81       	ld	r22, Z
    1b82:	71 81       	ldd	r23, Z+1	; 0x01
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	93 81       	ldd	r25, Z+3	; 0x03
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	3f ef       	ldi	r19, 0xFF	; 255
    1b8c:	4f e7       	ldi	r20, 0x7F	; 127
    1b8e:	57 e4       	ldi	r21, 0x47	; 71
    1b90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b94:	18 16       	cp	r1, r24
    1b96:	64 f5       	brge	.+88     	; 0x1bf0 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ed 5b       	subi	r30, 0xBD	; 189
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e2       	ldi	r20, 0x20	; 32
    1bac:	51 e4       	ldi	r21, 0x41	; 65
    1bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	bc 01       	movw	r22, r24
    1bb8:	cd 01       	movw	r24, r26
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e af       	std	Y+62, r25	; 0x3e
    1bc4:	8d af       	std	Y+61, r24	; 0x3d
    1bc6:	0f c0       	rjmp	.+30     	; 0x1be6 <HLCD_voidInit+0xee>
    1bc8:	88 ec       	ldi	r24, 0xC8	; 200
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9c af       	std	Y+60, r25	; 0x3c
    1bce:	8b af       	std	Y+59, r24	; 0x3b
    1bd0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bd2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <HLCD_voidInit+0xdc>
    1bd8:	9c af       	std	Y+60, r25	; 0x3c
    1bda:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	9e af       	std	Y+62, r25	; 0x3e
    1be4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1be8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	69 f7       	brne	.-38     	; 0x1bc8 <HLCD_voidInit+0xd0>
    1bee:	16 c0       	rjmp	.+44     	; 0x1c1c <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ff 96       	adiw	r30, 0x3f	; 63
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9e af       	std	Y+62, r25	; 0x3e
    1c06:	8d af       	std	Y+61, r24	; 0x3d
    1c08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c0c:	9a af       	std	Y+58, r25	; 0x3a
    1c0e:	89 af       	std	Y+57, r24	; 0x39
    1c10:	89 ad       	ldd	r24, Y+57	; 0x39
    1c12:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <HLCD_voidInit+0x11c>
    1c18:	9a af       	std	Y+58, r25	; 0x3a
    1c1a:	89 af       	std	Y+57, r24	; 0x39
	//Wait For more than 30ms after VDD rises to 4.5v
	_delay_ms(30);

	//Function Set then wait 39	Ms
	HLCD_voidSendCommand(FUNCTION_SET);
    1c1c:	88 e3       	ldi	r24, 0x38	; 56
    1c1e:	0e 94 40 0c 	call	0x1880	; 0x1880 <HLCD_voidSendCommand>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a0 e8       	ldi	r26, 0x80	; 128
    1c28:	bf e3       	ldi	r27, 0x3F	; 63
    1c2a:	8d ab       	std	Y+53, r24	; 0x35
    1c2c:	9e ab       	std	Y+54, r25	; 0x36
    1c2e:	af ab       	std	Y+55, r26	; 0x37
    1c30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	6d a9       	ldd	r22, Y+53	; 0x35
    1c34:	7e a9       	ldd	r23, Y+54	; 0x36
    1c36:	8f a9       	ldd	r24, Y+55	; 0x37
    1c38:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a ef       	ldi	r20, 0xFA	; 250
    1c40:	54 e4       	ldi	r21, 0x44	; 68
    1c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	89 ab       	std	Y+49, r24	; 0x31
    1c4c:	9a ab       	std	Y+50, r25	; 0x32
    1c4e:	ab ab       	std	Y+51, r26	; 0x33
    1c50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c52:	69 a9       	ldd	r22, Y+49	; 0x31
    1c54:	7a a9       	ldd	r23, Y+50	; 0x32
    1c56:	8b a9       	ldd	r24, Y+51	; 0x33
    1c58:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <HLCD_voidInit+0x17c>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	98 ab       	std	Y+48, r25	; 0x30
    1c70:	8f a7       	std	Y+47, r24	; 0x2f
    1c72:	3f c0       	rjmp	.+126    	; 0x1cf2 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1c74:	69 a9       	ldd	r22, Y+49	; 0x31
    1c76:	7a a9       	ldd	r23, Y+50	; 0x32
    1c78:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	4c f5       	brge	.+82     	; 0x1cde <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c90:	8f a9       	ldd	r24, Y+55	; 0x37
    1c92:	98 ad       	ldd	r25, Y+56	; 0x38
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	98 ab       	std	Y+48, r25	; 0x30
    1cb2:	8f a7       	std	Y+47, r24	; 0x2f
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <HLCD_voidInit+0x1dc>
    1cb6:	88 ec       	ldi	r24, 0xC8	; 200
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e a7       	std	Y+46, r25	; 0x2e
    1cbc:	8d a7       	std	Y+45, r24	; 0x2d
    1cbe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cc0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <HLCD_voidInit+0x1ca>
    1cc6:	9e a7       	std	Y+46, r25	; 0x2e
    1cc8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ccc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	98 ab       	std	Y+48, r25	; 0x30
    1cd2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	69 f7       	brne	.-38     	; 0x1cb6 <HLCD_voidInit+0x1be>
    1cdc:	14 c0       	rjmp	.+40     	; 0x1d06 <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	98 ab       	std	Y+48, r25	; 0x30
    1cf0:	8f a7       	std	Y+47, r24	; 0x2f
    1cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf6:	9c a7       	std	Y+44, r25	; 0x2c
    1cf8:	8b a7       	std	Y+43, r24	; 0x2b
    1cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <HLCD_voidInit+0x206>
    1d02:	9c a7       	std	Y+44, r25	; 0x2c
    1d04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	//Display On/Off Control The wait 39 Ms
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    1d06:	8f e0       	ldi	r24, 0x0F	; 15
    1d08:	0e 94 40 0c 	call	0x1880	; 0x1880 <HLCD_voidSendCommand>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a0 e8       	ldi	r26, 0x80	; 128
    1d12:	bf e3       	ldi	r27, 0x3F	; 63
    1d14:	8f a3       	std	Y+39, r24	; 0x27
    1d16:	98 a7       	std	Y+40, r25	; 0x28
    1d18:	a9 a7       	std	Y+41, r26	; 0x29
    1d1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d20:	89 a5       	ldd	r24, Y+41	; 0x29
    1d22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a ef       	ldi	r20, 0xFA	; 250
    1d2a:	54 e4       	ldi	r21, 0x44	; 68
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8b a3       	std	Y+35, r24	; 0x23
    1d36:	9c a3       	std	Y+36, r25	; 0x24
    1d38:	ad a3       	std	Y+37, r26	; 0x25
    1d3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d40:	8d a1       	ldd	r24, Y+37	; 0x25
    1d42:	9e a1       	ldd	r25, Y+38	; 0x26
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <HLCD_voidInit+0x266>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9a a3       	std	Y+34, r25	; 0x22
    1d5a:	89 a3       	std	Y+33, r24	; 0x21
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d60:	7c a1       	ldd	r23, Y+36	; 0x24
    1d62:	8d a1       	ldd	r24, Y+37	; 0x25
    1d64:	9e a1       	ldd	r25, Y+38	; 0x26
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6f a1       	ldd	r22, Y+39	; 0x27
    1d78:	78 a5       	ldd	r23, Y+40	; 0x28
    1d7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9a a3       	std	Y+34, r25	; 0x22
    1d9c:	89 a3       	std	Y+33, r24	; 0x21
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <HLCD_voidInit+0x2c6>
    1da0:	88 ec       	ldi	r24, 0xC8	; 200
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	98 a3       	std	Y+32, r25	; 0x20
    1da6:	8f 8f       	std	Y+31, r24	; 0x1f
    1da8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1daa:	98 a1       	ldd	r25, Y+32	; 0x20
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <HLCD_voidInit+0x2b4>
    1db0:	98 a3       	std	Y+32, r25	; 0x20
    1db2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	89 a1       	ldd	r24, Y+33	; 0x21
    1db6:	9a a1       	ldd	r25, Y+34	; 0x22
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9a a3       	std	Y+34, r25	; 0x22
    1dbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <HLCD_voidInit+0x2a8>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dca:	7c a1       	ldd	r23, Y+36	; 0x24
    1dcc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dce:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9a a3       	std	Y+34, r25	; 0x22
    1dda:	89 a3       	std	Y+33, r24	; 0x21
    1ddc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dde:	9a a1       	ldd	r25, Y+34	; 0x22
    1de0:	9e 8f       	std	Y+30, r25	; 0x1e
    1de2:	8d 8f       	std	Y+29, r24	; 0x1d
    1de4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1de6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <HLCD_voidInit+0x2f0>
    1dec:	9e 8f       	std	Y+30, r25	; 0x1e
    1dee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//Display Clear Then wait 2 ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	0e 94 40 0c 	call	0x1880	; 0x1880 <HLCD_voidSendCommand>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	a0 e0       	ldi	r26, 0x00	; 0
    1dfc:	b0 e4       	ldi	r27, 0x40	; 64
    1dfe:	89 8f       	std	Y+25, r24	; 0x19
    1e00:	9a 8f       	std	Y+26, r25	; 0x1a
    1e02:	ab 8f       	std	Y+27, r26	; 0x1b
    1e04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	69 8d       	ldd	r22, Y+25	; 0x19
    1e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a ef       	ldi	r20, 0xFA	; 250
    1e14:	54 e4       	ldi	r21, 0x44	; 68
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8d 8b       	std	Y+21, r24	; 0x15
    1e20:	9e 8b       	std	Y+22, r25	; 0x16
    1e22:	af 8b       	std	Y+23, r26	; 0x17
    1e24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e26:	6d 89       	ldd	r22, Y+21	; 0x15
    1e28:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <HLCD_voidInit+0x350>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
    1e46:	3f c0       	rjmp	.+126    	; 0x1ec6 <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	4c f5       	brge	.+82     	; 0x1eb2 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e60:	69 8d       	ldd	r22, Y+25	; 0x19
    1e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9c 8b       	std	Y+20, r25	; 0x14
    1e86:	8b 8b       	std	Y+19, r24	; 0x13
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <HLCD_voidInit+0x3b0>
    1e8a:	88 ec       	ldi	r24, 0xC8	; 200
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9a 8b       	std	Y+18, r25	; 0x12
    1e90:	89 8b       	std	Y+17, r24	; 0x11
    1e92:	89 89       	ldd	r24, Y+17	; 0x11
    1e94:	9a 89       	ldd	r25, Y+18	; 0x12
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <HLCD_voidInit+0x39e>
    1e9a:	9a 8b       	std	Y+18, r25	; 0x12
    1e9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	9c 8b       	std	Y+20, r25	; 0x14
    1ea6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	69 f7       	brne	.-38     	; 0x1e8a <HLCD_voidInit+0x392>
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9c 8b       	std	Y+20, r25	; 0x14
    1ec4:	8b 8b       	std	Y+19, r24	; 0x13
    1ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eca:	98 8b       	std	Y+16, r25	; 0x10
    1ecc:	8f 87       	std	Y+15, r24	; 0x0f
    1ece:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed0:	98 89       	ldd	r25, Y+16	; 0x10
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <HLCD_voidInit+0x3da>
    1ed6:	98 8b       	std	Y+16, r25	; 0x10
    1ed8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//Entry Mode Set Then wait 39 Ms
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1eda:	86 e0       	ldi	r24, 0x06	; 6
    1edc:	0e 94 40 0c 	call	0x1880	; 0x1880 <HLCD_voidSendCommand>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e8       	ldi	r26, 0x80	; 128
    1ee6:	bf e3       	ldi	r27, 0x3F	; 63
    1ee8:	8b 87       	std	Y+11, r24	; 0x0b
    1eea:	9c 87       	std	Y+12, r25	; 0x0c
    1eec:	ad 87       	std	Y+13, r26	; 0x0d
    1eee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8f 83       	std	Y+7, r24	; 0x07
    1f0a:	98 87       	std	Y+8, r25	; 0x08
    1f0c:	a9 87       	std	Y+9, r26	; 0x09
    1f0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <HLCD_voidInit+0x43a>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <HLCD_voidInit+0x49a>
    1f74:	88 ec       	ldi	r24, 0xC8	; 200
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9c 83       	std	Y+4, r25	; 0x04
    1f7a:	8b 83       	std	Y+3, r24	; 0x03
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <HLCD_voidInit+0x488>
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <HLCD_voidInit+0x47c>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <HLCD_voidInit+0x4c4>
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    1fc4:	ca 5b       	subi	r28, 0xBA	; 186
    1fc6:	df 4f       	sbci	r29, 0xFF	; 255
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

00001fdc <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	2e 97       	sbiw	r28, 0x0e	; 14
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	de bf       	out	0x3e, r29	; 62
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	cd bf       	out	0x3d, r28	; 61
	//Display Clear Then wait 2 ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	0e 94 40 0c 	call	0x1880	; 0x1880 <HLCD_voidSendCommand>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	a0 e0       	ldi	r26, 0x00	; 0
    1ffc:	b0 e4       	ldi	r27, 0x40	; 64
    1ffe:	8b 87       	std	Y+11, r24	; 0x0b
    2000:	9c 87       	std	Y+12, r25	; 0x0c
    2002:	ad 87       	std	Y+13, r26	; 0x0d
    2004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2006:	6b 85       	ldd	r22, Y+11	; 0x0b
    2008:	7c 85       	ldd	r23, Y+12	; 0x0c
    200a:	8d 85       	ldd	r24, Y+13	; 0x0d
    200c:	9e 85       	ldd	r25, Y+14	; 0x0e
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	8f 83       	std	Y+7, r24	; 0x07
    2020:	98 87       	std	Y+8, r25	; 0x08
    2022:	a9 87       	std	Y+9, r26	; 0x09
    2024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	2c f4       	brge	.+10     	; 0x2048 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9e 83       	std	Y+6, r25	; 0x06
    2044:	8d 83       	std	Y+5, r24	; 0x05
    2046:	3f c0       	rjmp	.+126    	; 0x20c6 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	3f ef       	ldi	r19, 0xFF	; 255
    2054:	4f e7       	ldi	r20, 0x7F	; 127
    2056:	57 e4       	ldi	r21, 0x47	; 71
    2058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    205c:	18 16       	cp	r1, r24
    205e:	4c f5       	brge	.+82     	; 0x20b2 <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	6b 85       	ldd	r22, Y+11	; 0x0b
    2062:	7c 85       	ldd	r23, Y+12	; 0x0c
    2064:	8d 85       	ldd	r24, Y+13	; 0x0d
    2066:	9e 85       	ldd	r25, Y+14	; 0x0e
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <HLCD_voidClearDisplay+0xcc>
    208a:	88 ec       	ldi	r24, 0xC8	; 200
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	9c 81       	ldd	r25, Y+4	; 0x04
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <HLCD_voidClearDisplay+0xba>
    209a:	9c 83       	std	Y+4, r25	; 0x04
    209c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	69 f7       	brne	.-38     	; 0x208a <HLCD_voidClearDisplay+0xae>
    20b0:	14 c0       	rjmp	.+40     	; 0x20da <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	6f 81       	ldd	r22, Y+7	; 0x07
    20b4:	78 85       	ldd	r23, Y+8	; 0x08
    20b6:	89 85       	ldd	r24, Y+9	; 0x09
    20b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	8d 81       	ldd	r24, Y+5	; 0x05
    20c8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <HLCD_voidClearDisplay+0xf6>
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    20da:	2e 96       	adiw	r28, 0x0e	; 14
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <HLCD_DisplayString>:

void HLCD_DisplayString(u8 *A_u8PtrToString)
{
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <HLCD_DisplayString+0x6>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	0b c0       	rjmp	.+22     	; 0x2112 <HLCD_DisplayString+0x26>
	while(*A_u8PtrToString > 0)
	{
		HLCD_voidSendData(*A_u8PtrToString++);
    20fc:	e9 81       	ldd	r30, Y+1	; 0x01
    20fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2100:	20 81       	ld	r18, Z
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	01 96       	adiw	r24, 0x01	; 1
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	82 2f       	mov	r24, r18
    210e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <HLCD_voidSendData>

}

void HLCD_DisplayString(u8 *A_u8PtrToString)
{
	while(*A_u8PtrToString > 0)
    2112:	e9 81       	ldd	r30, Y+1	; 0x01
    2114:	fa 81       	ldd	r31, Y+2	; 0x02
    2116:	80 81       	ld	r24, Z
    2118:	88 23       	and	r24, r24
    211a:	81 f7       	brne	.-32     	; 0x20fc <HLCD_DisplayString+0x10>
	{
		HLCD_voidSendData(*A_u8PtrToString++);
	}
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <HLCD_GoToPos>:


void HLCD_GoToPos(LCD_ROW_E A_LCDRow,LCD_COL_E A_LCDCol)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <HLCD_GoToPos+0x6>
    212c:	00 d0       	rcall	.+0      	; 0x212e <HLCD_GoToPos+0x8>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_LCDRow)
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	3c 83       	std	Y+4, r19	; 0x04
    213e:	2b 83       	std	Y+3, r18	; 0x03
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	91 05       	cpc	r25, r1
    2148:	31 f0       	breq	.+12     	; 0x2156 <HLCD_GoToPos+0x30>
    214a:	2b 81       	ldd	r18, Y+3	; 0x03
    214c:	3c 81       	ldd	r19, Y+4	; 0x04
    214e:	22 30       	cpi	r18, 0x02	; 2
    2150:	31 05       	cpc	r19, r1
    2152:	31 f0       	breq	.+12     	; 0x2160 <HLCD_GoToPos+0x3a>
    2154:	09 c0       	rjmp	.+18     	; 0x2168 <HLCD_GoToPos+0x42>
	{
	case LCD_ROW1:
		HLCD_voidSendCommand(ROW1_BASE_ADD + A_LCDCol);
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	81 58       	subi	r24, 0x81	; 129
    215a:	0e 94 40 0c 	call	0x1880	; 0x1880 <HLCD_voidSendCommand>
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <HLCD_GoToPos+0x42>
		break;
	case LCD_ROW2:
		HLCD_voidSendCommand(ROW2_BASE_ADD + A_LCDCol);
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	81 54       	subi	r24, 0x41	; 65
    2164:	0e 94 40 0c 	call	0x1880	; 0x1880 <HLCD_voidSendCommand>
		break;

	}
}
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber (u32 A_u32Number)
{
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	28 97       	sbiw	r28, 0x08	; 8
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	6d 83       	std	Y+5, r22	; 0x05
    2194:	7e 83       	std	Y+6, r23	; 0x06
    2196:	8f 83       	std	Y+7, r24	; 0x07
    2198:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Num = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e0       	ldi	r26, 0x00	; 0
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	ab 83       	std	Y+3, r26	; 0x03
    21a8:	bc 83       	std	Y+4, r27	; 0x04
	if (A_u32Number == 0)
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	af 81       	ldd	r26, Y+7	; 0x07
    21b0:	b8 85       	ldd	r27, Y+8	; 0x08
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	a1 05       	cpc	r26, r1
    21b6:	b1 05       	cpc	r27, r1
    21b8:	d1 f5       	brne	.+116    	; 0x222e <HLCD_voidDisplayNumber+0xb8>
	{
		HLCD_voidSendData('0');
    21ba:	80 e3       	ldi	r24, 0x30	; 48
    21bc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <HLCD_voidSendData>
    21c0:	36 c0       	rjmp	.+108    	; 0x222e <HLCD_voidDisplayNumber+0xb8>
	}

	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	ab 81       	ldd	r26, Y+3	; 0x03
    21c8:	bc 81       	ldd	r27, Y+4	; 0x04
    21ca:	2a e0       	ldi	r18, 0x0A	; 10
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 82 13 	call	0x2704	; 0x2704 <__mulsi3>
    21da:	7b 01       	movw	r14, r22
    21dc:	8c 01       	movw	r16, r24
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	9e 81       	ldd	r25, Y+6	; 0x06
    21e2:	af 81       	ldd	r26, Y+7	; 0x07
    21e4:	b8 85       	ldd	r27, Y+8	; 0x08
    21e6:	2a e0       	ldi	r18, 0x0A	; 10
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	8e 0d       	add	r24, r14
    21fc:	9f 1d       	adc	r25, r15
    21fe:	a0 1f       	adc	r26, r16
    2200:	b1 1f       	adc	r27, r17
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	9a 83       	std	Y+2, r25	; 0x02
    2206:	ab 83       	std	Y+3, r26	; 0x03
    2208:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number / 10;
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	af 81       	ldd	r26, Y+7	; 0x07
    2210:	b8 85       	ldd	r27, Y+8	; 0x08
    2212:	2a e0       	ldi	r18, 0x0A	; 10
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    2222:	da 01       	movw	r26, r20
    2224:	c9 01       	movw	r24, r18
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	af 83       	std	Y+7, r26	; 0x07
    222c:	b8 87       	std	Y+8, r27	; 0x08
	if (A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}

	while (A_u32Number != 0)
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	af 81       	ldd	r26, Y+7	; 0x07
    2234:	b8 85       	ldd	r27, Y+8	; 0x08
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	a1 05       	cpc	r26, r1
    223a:	b1 05       	cpc	r27, r1
    223c:	11 f6       	brne	.-124    	; 0x21c2 <HLCD_voidDisplayNumber+0x4c>
    223e:	23 c0       	rjmp	.+70     	; 0x2286 <HLCD_voidDisplayNumber+0x110>
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	ab 81       	ldd	r26, Y+3	; 0x03
    2246:	bc 81       	ldd	r27, Y+4	; 0x04
    2248:	2a e0       	ldi	r18, 0x0A	; 10
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e0       	ldi	r20, 0x00	; 0
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	80 5d       	subi	r24, 0xD0	; 208
    225e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <HLCD_voidSendData>
		local_u32Num = local_u32Num / 10;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	9a 81       	ldd	r25, Y+2	; 0x02
    2266:	ab 81       	ldd	r26, Y+3	; 0x03
    2268:	bc 81       	ldd	r27, Y+4	; 0x04
    226a:	2a e0       	ldi	r18, 0x0A	; 10
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 a1 13 	call	0x2742	; 0x2742 <__udivmodsi4>
    227a:	da 01       	movw	r26, r20
    227c:	c9 01       	movw	r24, r18
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	ab 83       	std	Y+3, r26	; 0x03
    2284:	bc 83       	std	Y+4, r27	; 0x04
	while (A_u32Number != 0)
	{
		local_u32Num = (local_u32Num * 10) + (A_u32Number % 10);
		A_u32Number = A_u32Number / 10;
	}
	while (local_u32Num != 1)
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	ab 81       	ldd	r26, Y+3	; 0x03
    228c:	bc 81       	ldd	r27, Y+4	; 0x04
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	91 05       	cpc	r25, r1
    2292:	a1 05       	cpc	r26, r1
    2294:	b1 05       	cpc	r27, r1
    2296:	a1 f6       	brne	.-88     	; 0x2240 <HLCD_voidDisplayNumber+0xca>
	{
		HLCD_voidSendData ((local_u32Num % 10) + 48);
		local_u32Num = local_u32Num / 10;
	}
}
    2298:	28 96       	adiw	r28, 0x08	; 8
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	ff 90       	pop	r15
    22ae:	ef 90       	pop	r14
    22b0:	08 95       	ret

000022b2 <HLCD_SendSpecialSymbol>:


void HLCD_SendSpecialSymbol(u8 *A_pu8SSymbolArray,LCD_PATTERN_E A_PatternNum,LCD_ROW_E A_RowNo,LCD_COL_E A_ColNo)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	27 97       	sbiw	r28, 0x07	; 7
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	9c 83       	std	Y+4, r25	; 0x04
    22c8:	8b 83       	std	Y+3, r24	; 0x03
    22ca:	6d 83       	std	Y+5, r22	; 0x05
    22cc:	4e 83       	std	Y+6, r20	; 0x06
    22ce:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAdsress;
	//Calculate CGRAM Address
	local_u8CGRAMAdsress = A_PatternNum * 8;
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAdsress,6);
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	80 64       	ori	r24, 0x40	; 64
    22e8:	8a 83       	std	Y+2, r24	; 0x02
	//Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAdsress);
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	0e 94 40 0c 	call	0x1880	; 0x1880 <HLCD_voidSendCommand>

	for(u8 local_u8Counter = 0; local_u8Counter<8; local_u8Counter++)
    22f0:	19 82       	std	Y+1, r1	; 0x01
    22f2:	0e c0       	rjmp	.+28     	; 0x2310 <HLCD_SendSpecialSymbol+0x5e>
	{
		//Send Byte by Byte From Symbol Array
		HLCD_voidSendData(A_pu8SSymbolArray[local_u8Counter]);
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	fc 01       	movw	r30, r24
    2300:	e2 0f       	add	r30, r18
    2302:	f3 1f       	adc	r31, r19
    2304:	80 81       	ld	r24, Z
    2306:	0e 94 de 0c 	call	0x19bc	; 0x19bc <HLCD_voidSendData>
	local_u8CGRAMAdsress = A_PatternNum * 8;
	SET_BIT(local_u8CGRAMAdsress,6);
	//Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAdsress);

	for(u8 local_u8Counter = 0; local_u8Counter<8; local_u8Counter++)
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	88 30       	cpi	r24, 0x08	; 8
    2314:	78 f3       	brcs	.-34     	; 0x22f4 <HLCD_SendSpecialSymbol+0x42>
		//Send Byte by Byte From Symbol Array
		HLCD_voidSendData(A_pu8SSymbolArray[local_u8Counter]);

	}
	//Send Command To set DDRAM Address
	HLCD_GoToPos(A_RowNo,A_ColNo);
    2316:	8e 81       	ldd	r24, Y+6	; 0x06
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	0e 94 93 10 	call	0x2126	; 0x2126 <HLCD_GoToPos>
	//Display Pattern
	HLCD_voidSendData(A_PatternNum);
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	0e 94 de 0c 	call	0x19bc	; 0x19bc <HLCD_voidSendData>

}
    2324:	27 96       	adiw	r28, 0x07	; 7
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <HLED_voidTurnLEDOn>:
#include "../include/HAL/LED/LED_Interface.h"
#include "../include/HAL/LED/LED_Private.h"
#include "../include/HAL/LED/LED_Cfg.h"

void HLED_voidTurnLEDOn(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	00 d0       	rcall	.+0      	; 0x233c <HLED_voidTurnLEDOn+0x6>
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinDirection(A_portID,A_pinID,DIO_SET);
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	6a 81       	ldd	r22, Y+2	; 0x02
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 34 06 	call	0xc68	; 0xc68 <MDIO_voidSetPinDirection>

}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <HLED_voidTurnLEDOff>:


void HLED_voidTurnLEDOff(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <HLED_voidTurnLEDOff+0x6>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidSetPinDirection(A_portID,A_pinID,DIO_RESET);
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	6a 81       	ldd	r22, Y+2	; 0x02
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 34 06 	call	0xc68	; 0xc68 <MDIO_voidSetPinDirection>
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <HLED_voidToggleLED>:


void HLED_voidToggleLED(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	00 d0       	rcall	.+0      	; 0x2380 <HLED_voidToggleLED+0x6>
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_portID,A_pinID);
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	6a 81       	ldd	r22, Y+2	; 0x02
    238c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <MDIO_voidTogglePinValue>
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <MTIMER0_voidInit>:
void (*TIMER0_OVF_CALLBACK)(void) = NULL;
void (*TIMER0_CTC_CALLBACK)(void) = NULL;


void MTIMER0_voidInit(void)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLK_OCR_MASK;
	TCCR0 |= (TIMER0_CLK | (OCR0_MODE << 4));

	#elif TIMER0_MODE == FAST_PWM_MODE
	// Set Wave Generation To CTC Mode
	SET_BIT(TCCR0,6);
    23a2:	a3 e5       	ldi	r26, 0x53	; 83
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e3 e5       	ldi	r30, 0x53	; 83
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	80 64       	ori	r24, 0x40	; 64
    23ae:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    23b0:	a3 e5       	ldi	r26, 0x53	; 83
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	e3 e5       	ldi	r30, 0x53	; 83
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	80 81       	ld	r24, Z
    23ba:	88 60       	ori	r24, 0x08	; 8
    23bc:	8c 93       	st	X, r24

	//Disable All Timers Interrupt
	CLR_BIT(TIMSK,1);
    23be:	a9 e5       	ldi	r26, 0x59	; 89
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e9 e5       	ldi	r30, 0x59	; 89
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8d 7f       	andi	r24, 0xFD	; 253
    23ca:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,0);
    23cc:	a9 e5       	ldi	r26, 0x59	; 89
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e9 e5       	ldi	r30, 0x59	; 89
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8e 7f       	andi	r24, 0xFE	; 254
    23d8:	8c 93       	st	X, r24

	//Set OCR0 Value
	OCR0 = OCR0_VALUE;
    23da:	ec e5       	ldi	r30, 0x5C	; 92
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	87 ec       	ldi	r24, 0xC7	; 199
    23e0:	80 83       	st	Z, r24

	//Set OC0 Cfg
	//Start Timer By Setting Its CLK
	TCCR0 &= TIMER0_CLK_OCR_MASK;
    23e2:	a3 e5       	ldi	r26, 0x53	; 83
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e3 e5       	ldi	r30, 0x53	; 83
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	88 7c       	andi	r24, 0xC8	; 200
    23ee:	8c 93       	st	X, r24
	TCCR0 |= (TIMER0_CLK | (OCR0_MODE << 4));
    23f0:	a3 e5       	ldi	r26, 0x53	; 83
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e3 e5       	ldi	r30, 0x53	; 83
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	82 62       	ori	r24, 0x22	; 34
    23fc:	8c 93       	st	X, r24


	#endif


}
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <MTIMER0_voidSetPreLoadValue>:

void MTIMER0_voidSetPreLoadValue(u8 A_u8NoOfTicks)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	0f 92       	push	r0
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8NoOfTicks;
    2410:	e2 e5       	ldi	r30, 0x52	; 82
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	80 83       	st	Z, r24
}
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <MTIMER0_voidStopTimer>:

void MTIMER0_voidStopTimer(void)
{
    2420:	df 93       	push	r29
    2422:	cf 93       	push	r28
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_CLK_MASK;
    2428:	a3 e5       	ldi	r26, 0x53	; 83
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e3 e5       	ldi	r30, 0x53	; 83
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	88 7f       	andi	r24, 0xF8	; 248
    2434:	8c 93       	st	X, r24
}
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <MTIMER0_voidSetOCR0Value>:

void MTIMER0_voidSetOCR0Value(u8 A_u8OCR0Value)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
    2448:	ec e5       	ldi	r30, 0x5C	; 92
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	80 83       	st	Z, r24
}
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <MTIMER0_voidSetOVFCallBack>:

void MTIMER0_voidSetOVFCallBack(void (*A_PtrToFunc)(void))
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <MTIMER0_voidSetOVFCallBack+0x6>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	9a 83       	std	Y+2, r25	; 0x02
    2464:	89 83       	std	Y+1, r24	; 0x01
	if(A_PtrToFunc != NULL)
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	31 f0       	breq	.+12     	; 0x247a <MTIMER0_voidSetOVFCallBack+0x22>
	{
		TIMER0_OVF_CALLBACK = A_PtrToFunc;
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	90 93 76 00 	sts	0x0076, r25
    2476:	80 93 75 00 	sts	0x0075, r24
	}
}
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <MTIMER0_voidSetCTCCallBack>:


void MTIMER0_voidSetCTCCallBack(void (*A_PtrToFunc)(void))
{
    2484:	df 93       	push	r29
    2486:	cf 93       	push	r28
    2488:	00 d0       	rcall	.+0      	; 0x248a <MTIMER0_voidSetCTCCallBack+0x6>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
	if(A_PtrToFunc != NULL)
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	31 f0       	breq	.+12     	; 0x24a6 <MTIMER0_voidSetCTCCallBack+0x22>
		{
			TIMER0_CTC_CALLBACK = A_PtrToFunc;
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	90 93 78 00 	sts	0x0078, r25
    24a2:	80 93 77 00 	sts	0x0077, r24
		}
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <__vector_11>:



void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    24b0:	1f 92       	push	r1
    24b2:	0f 92       	push	r0
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	0f 92       	push	r0
    24b8:	11 24       	eor	r1, r1
    24ba:	2f 93       	push	r18
    24bc:	3f 93       	push	r19
    24be:	4f 93       	push	r20
    24c0:	5f 93       	push	r21
    24c2:	6f 93       	push	r22
    24c4:	7f 93       	push	r23
    24c6:	8f 93       	push	r24
    24c8:	9f 93       	push	r25
    24ca:	af 93       	push	r26
    24cc:	bf 93       	push	r27
    24ce:	ef 93       	push	r30
    24d0:	ff 93       	push	r31
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVF_CALLBACK != NULL)
    24da:	80 91 75 00 	lds	r24, 0x0075
    24de:	90 91 76 00 	lds	r25, 0x0076
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	29 f0       	breq	.+10     	; 0x24f0 <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    24e6:	e0 91 75 00 	lds	r30, 0x0075
    24ea:	f0 91 76 00 	lds	r31, 0x0076
    24ee:	09 95       	icall
	}
}
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	ff 91       	pop	r31
    24f6:	ef 91       	pop	r30
    24f8:	bf 91       	pop	r27
    24fa:	af 91       	pop	r26
    24fc:	9f 91       	pop	r25
    24fe:	8f 91       	pop	r24
    2500:	7f 91       	pop	r23
    2502:	6f 91       	pop	r22
    2504:	5f 91       	pop	r21
    2506:	4f 91       	pop	r20
    2508:	3f 91       	pop	r19
    250a:	2f 91       	pop	r18
    250c:	0f 90       	pop	r0
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	0f 90       	pop	r0
    2512:	1f 90       	pop	r1
    2514:	18 95       	reti

00002516 <__vector_10>:


void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2516:	1f 92       	push	r1
    2518:	0f 92       	push	r0
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	0f 92       	push	r0
    251e:	11 24       	eor	r1, r1
    2520:	2f 93       	push	r18
    2522:	3f 93       	push	r19
    2524:	4f 93       	push	r20
    2526:	5f 93       	push	r21
    2528:	6f 93       	push	r22
    252a:	7f 93       	push	r23
    252c:	8f 93       	push	r24
    252e:	9f 93       	push	r25
    2530:	af 93       	push	r26
    2532:	bf 93       	push	r27
    2534:	ef 93       	push	r30
    2536:	ff 93       	push	r31
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CTC_CALLBACK != NULL)
    2540:	80 91 77 00 	lds	r24, 0x0077
    2544:	90 91 78 00 	lds	r25, 0x0078
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	29 f0       	breq	.+10     	; 0x2556 <__vector_10+0x40>
	{
		TIMER0_CTC_CALLBACK();
    254c:	e0 91 77 00 	lds	r30, 0x0077
    2550:	f0 91 78 00 	lds	r31, 0x0078
    2554:	09 95       	icall
	}
}
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	ff 91       	pop	r31
    255c:	ef 91       	pop	r30
    255e:	bf 91       	pop	r27
    2560:	af 91       	pop	r26
    2562:	9f 91       	pop	r25
    2564:	8f 91       	pop	r24
    2566:	7f 91       	pop	r23
    2568:	6f 91       	pop	r22
    256a:	5f 91       	pop	r21
    256c:	4f 91       	pop	r20
    256e:	3f 91       	pop	r19
    2570:	2f 91       	pop	r18
    2572:	0f 90       	pop	r0
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	0f 90       	pop	r0
    2578:	1f 90       	pop	r1
    257a:	18 95       	reti

0000257c <MTIMER1_voidInit>:


void MTIMER1_voidInit()
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
	//Select Timer Mode --> 14
	SET_BIT(TCCR1A,1);
    2584:	af e4       	ldi	r26, 0x4F	; 79
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	ef e4       	ldi	r30, 0x4F	; 79
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	82 60       	ori	r24, 0x02	; 2
    2590:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    2592:	ae e4       	ldi	r26, 0x4E	; 78
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	ee e4       	ldi	r30, 0x4E	; 78
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	88 60       	ori	r24, 0x08	; 8
    259e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    25a0:	ae e4       	ldi	r26, 0x4E	; 78
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	ee e4       	ldi	r30, 0x4E	; 78
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	80 61       	ori	r24, 0x10	; 16
    25ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,0);
    25ae:	af e4       	ldi	r26, 0x4F	; 79
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	ef e4       	ldi	r30, 0x4F	; 79
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	8e 7f       	andi	r24, 0xFE	; 254
    25ba:	8c 93       	st	X, r24
	//Non-Inverting Mode For OC1A
	SET_BIT(TCCR1A,7);
    25bc:	af e4       	ldi	r26, 0x4F	; 79
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	ef e4       	ldi	r30, 0x4F	; 79
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 68       	ori	r24, 0x80	; 128
    25c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
    25ca:	af e4       	ldi	r26, 0x4F	; 79
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	ef e4       	ldi	r30, 0x4F	; 79
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	8f 7b       	andi	r24, 0xBF	; 191
    25d6:	8c 93       	st	X, r24
	//ICR1 --> 19999
	ICR1 = 19999;
    25d8:	e6 e4       	ldi	r30, 0x46	; 70
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	8f e1       	ldi	r24, 0x1F	; 31
    25de:	9e e4       	ldi	r25, 0x4E	; 78
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
	//OCR1 --> 1000
	OCR1A = 1500;
    25e4:	ea e4       	ldi	r30, 0x4A	; 74
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	8c ed       	ldi	r24, 0xDC	; 220
    25ea:	95 e0       	ldi	r25, 0x05	; 5
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
	//Start Timer By Setting Its CLK
	SET_BIT(TCCR1B,1);
    25f0:	ae e4       	ldi	r26, 0x4E	; 78
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	ee e4       	ldi	r30, 0x4E	; 78
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	82 60       	ori	r24, 0x02	; 2
    25fc:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    25fe:	ae e4       	ldi	r26, 0x4E	; 78
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	ee e4       	ldi	r30, 0x4E	; 78
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8e 7f       	andi	r24, 0xFE	; 254
    260a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    260c:	ae e4       	ldi	r26, 0x4E	; 78
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ee e4       	ldi	r30, 0x4E	; 78
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8b 7f       	andi	r24, 0xFB	; 251
    2618:	8c 93       	st	X, r24

}
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <MTIMER1_voidSetOCR1AValue>:

void MTIMER1_voidSetOCR1AValue(u16 A_u16Value)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	00 d0       	rcall	.+0      	; 0x2626 <MTIMER1_voidSetOCR1AValue+0x6>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	9a 83       	std	Y+2, r25	; 0x02
    262c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16Value;
    262e:	ea e4       	ldi	r30, 0x4A	; 74
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	9a 81       	ldd	r25, Y+2	; 0x02
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <MTIMER1_voidICUSWInit>:


void MTIMER1_voidICUSWInit()
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
	//Start Timer By Setting Its CLK
	SET_BIT(TCCR1B,1);
    264c:	ae e4       	ldi	r26, 0x4E	; 78
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	ee e4       	ldi	r30, 0x4E	; 78
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	82 60       	ori	r24, 0x02	; 2
    2658:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    265a:	ae e4       	ldi	r26, 0x4E	; 78
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	ee e4       	ldi	r30, 0x4E	; 78
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	8e 7f       	andi	r24, 0xFE	; 254
    2666:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    2668:	ae e4       	ldi	r26, 0x4E	; 78
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	ee e4       	ldi	r30, 0x4E	; 78
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	8b 7f       	andi	r24, 0xFB	; 251
    2674:	8c 93       	st	X, r24
}
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <MTIMER1_voidSetTimerValue>:

void MTIMER1_voidSetTimerValue(u16 A_u16Value)
{
    267c:	df 93       	push	r29
    267e:	cf 93       	push	r28
    2680:	00 d0       	rcall	.+0      	; 0x2682 <MTIMER1_voidSetTimerValue+0x6>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = A_u16Value;
    268a:	ec e4       	ldi	r30, 0x4C	; 76
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <MTIMER1_u16ReadTimerValue>:

u16 MTIMER1_u16ReadTimerValue(void)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    26a8:	ec e4       	ldi	r30, 0x4C	; 76
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
}
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <MWDT_voidEnable>:
#include "../include/MCAL/WDT/WDT_Private.h"
#include "../include/MCAL/WDT/WDT_Cfg.h"


void MWDT_voidEnable(WDT_TIME_e A_TimeToReset)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	0f 92       	push	r0
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	89 83       	std	Y+1, r24	; 0x01
	WDTCR = 0x00;
    26c2:	e1 e4       	ldi	r30, 0x41	; 65
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	10 82       	st	Z, r1
	WDTCR |= ((1 << 3) | (A_TimeToReset));
    26c8:	a1 e4       	ldi	r26, 0x41	; 65
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e1 e4       	ldi	r30, 0x41	; 65
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	90 81       	ld	r25, Z
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	89 2b       	or	r24, r25
    26d6:	88 60       	ori	r24, 0x08	; 8
    26d8:	8c 93       	st	X, r24
}
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <MWDT_voidDisable>:
void MWDT_voidDisable(void)
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= ((1 << 3) | (1 << 4));
    26ea:	a1 e4       	ldi	r26, 0x41	; 65
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e1 e4       	ldi	r30, 0x41	; 65
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	88 61       	ori	r24, 0x18	; 24
    26f6:	8c 93       	st	X, r24
	WDTCR = 0x00;
    26f8:	e1 e4       	ldi	r30, 0x41	; 65
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	10 82       	st	Z, r1
}
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <__mulsi3>:
    2704:	62 9f       	mul	r22, r18
    2706:	d0 01       	movw	r26, r0
    2708:	73 9f       	mul	r23, r19
    270a:	f0 01       	movw	r30, r0
    270c:	82 9f       	mul	r24, r18
    270e:	e0 0d       	add	r30, r0
    2710:	f1 1d       	adc	r31, r1
    2712:	64 9f       	mul	r22, r20
    2714:	e0 0d       	add	r30, r0
    2716:	f1 1d       	adc	r31, r1
    2718:	92 9f       	mul	r25, r18
    271a:	f0 0d       	add	r31, r0
    271c:	83 9f       	mul	r24, r19
    271e:	f0 0d       	add	r31, r0
    2720:	74 9f       	mul	r23, r20
    2722:	f0 0d       	add	r31, r0
    2724:	65 9f       	mul	r22, r21
    2726:	f0 0d       	add	r31, r0
    2728:	99 27       	eor	r25, r25
    272a:	72 9f       	mul	r23, r18
    272c:	b0 0d       	add	r27, r0
    272e:	e1 1d       	adc	r30, r1
    2730:	f9 1f       	adc	r31, r25
    2732:	63 9f       	mul	r22, r19
    2734:	b0 0d       	add	r27, r0
    2736:	e1 1d       	adc	r30, r1
    2738:	f9 1f       	adc	r31, r25
    273a:	bd 01       	movw	r22, r26
    273c:	cf 01       	movw	r24, r30
    273e:	11 24       	eor	r1, r1
    2740:	08 95       	ret

00002742 <__udivmodsi4>:
    2742:	a1 e2       	ldi	r26, 0x21	; 33
    2744:	1a 2e       	mov	r1, r26
    2746:	aa 1b       	sub	r26, r26
    2748:	bb 1b       	sub	r27, r27
    274a:	fd 01       	movw	r30, r26
    274c:	0d c0       	rjmp	.+26     	; 0x2768 <__udivmodsi4_ep>

0000274e <__udivmodsi4_loop>:
    274e:	aa 1f       	adc	r26, r26
    2750:	bb 1f       	adc	r27, r27
    2752:	ee 1f       	adc	r30, r30
    2754:	ff 1f       	adc	r31, r31
    2756:	a2 17       	cp	r26, r18
    2758:	b3 07       	cpc	r27, r19
    275a:	e4 07       	cpc	r30, r20
    275c:	f5 07       	cpc	r31, r21
    275e:	20 f0       	brcs	.+8      	; 0x2768 <__udivmodsi4_ep>
    2760:	a2 1b       	sub	r26, r18
    2762:	b3 0b       	sbc	r27, r19
    2764:	e4 0b       	sbc	r30, r20
    2766:	f5 0b       	sbc	r31, r21

00002768 <__udivmodsi4_ep>:
    2768:	66 1f       	adc	r22, r22
    276a:	77 1f       	adc	r23, r23
    276c:	88 1f       	adc	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	1a 94       	dec	r1
    2772:	69 f7       	brne	.-38     	; 0x274e <__udivmodsi4_loop>
    2774:	60 95       	com	r22
    2776:	70 95       	com	r23
    2778:	80 95       	com	r24
    277a:	90 95       	com	r25
    277c:	9b 01       	movw	r18, r22
    277e:	ac 01       	movw	r20, r24
    2780:	bd 01       	movw	r22, r26
    2782:	cf 01       	movw	r24, r30
    2784:	08 95       	ret

00002786 <__prologue_saves__>:
    2786:	2f 92       	push	r2
    2788:	3f 92       	push	r3
    278a:	4f 92       	push	r4
    278c:	5f 92       	push	r5
    278e:	6f 92       	push	r6
    2790:	7f 92       	push	r7
    2792:	8f 92       	push	r8
    2794:	9f 92       	push	r9
    2796:	af 92       	push	r10
    2798:	bf 92       	push	r11
    279a:	cf 92       	push	r12
    279c:	df 92       	push	r13
    279e:	ef 92       	push	r14
    27a0:	ff 92       	push	r15
    27a2:	0f 93       	push	r16
    27a4:	1f 93       	push	r17
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	ca 1b       	sub	r28, r26
    27b0:	db 0b       	sbc	r29, r27
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	09 94       	ijmp

000027be <__epilogue_restores__>:
    27be:	2a 88       	ldd	r2, Y+18	; 0x12
    27c0:	39 88       	ldd	r3, Y+17	; 0x11
    27c2:	48 88       	ldd	r4, Y+16	; 0x10
    27c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    27cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    27ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    27d0:	b9 84       	ldd	r11, Y+9	; 0x09
    27d2:	c8 84       	ldd	r12, Y+8	; 0x08
    27d4:	df 80       	ldd	r13, Y+7	; 0x07
    27d6:	ee 80       	ldd	r14, Y+6	; 0x06
    27d8:	fd 80       	ldd	r15, Y+5	; 0x05
    27da:	0c 81       	ldd	r16, Y+4	; 0x04
    27dc:	1b 81       	ldd	r17, Y+3	; 0x03
    27de:	aa 81       	ldd	r26, Y+2	; 0x02
    27e0:	b9 81       	ldd	r27, Y+1	; 0x01
    27e2:	ce 0f       	add	r28, r30
    27e4:	d1 1d       	adc	r29, r1
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	ed 01       	movw	r28, r26
    27f2:	08 95       	ret

000027f4 <_exit>:
    27f4:	f8 94       	cli

000027f6 <__stop_program>:
    27f6:	ff cf       	rjmp	.-2      	; 0x27f6 <__stop_program>
