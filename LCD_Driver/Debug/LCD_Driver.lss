
LCD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000021e0  00002254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019e0  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000faf  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000079f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000087a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000935b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1c 06 	call	0xc38	; 0xc38 <main>
      7a:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e6       	ldi	r26, 0x6C	; 108
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b7 10 	jmp	0x216e	; 0x216e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e6       	ldi	r24, 0x6C	; 108
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MADC_voidInit>:
#include "../include/MCAL/ADC/ADC_Private.h"
#include "../include/MCAL/ADC/ADC_Cfg.h"


void MADC_voidInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	//Select AVCC With External Capacitor At AREF Pin
	SET_BIT(ADMUX,6);
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 64       	ori	r24, 0x40	; 64
     b4a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
     b4c:	a7 e2       	ldi	r26, 0x27	; 39
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e7 e2       	ldi	r30, 0x27	; 39
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	8c 93       	st	X, r24

	//Right Adjustment
	CLR_BIT(ADMUX,5);
     b5a:	a7 e2       	ldi	r26, 0x27	; 39
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e7 e2       	ldi	r30, 0x27	; 39
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 7d       	andi	r24, 0xDF	; 223
     b66:	8c 93       	st	X, r24

	//Disable Auto Trigger
	CLR_BIT(ADCSRA,5);
     b68:	a6 e2       	ldi	r26, 0x26	; 38
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e6 e2       	ldi	r30, 0x26	; 38
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8f 7d       	andi	r24, 0xDF	; 223
     b74:	8c 93       	st	X, r24

	//Select Clk/64
	SET_BIT(ADCSRA,2);
     b76:	a6 e2       	ldi	r26, 0x26	; 38
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e6 e2       	ldi	r30, 0x26	; 38
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	84 60       	ori	r24, 0x04	; 4
     b82:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
     b84:	a6 e2       	ldi	r26, 0x26	; 38
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e6 e2       	ldi	r30, 0x26	; 38
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,0);
     b92:	a6 e2       	ldi	r26, 0x26	; 38
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8e 7f       	andi	r24, 0xFE	; 254
     b9e:	8c 93       	st	X, r24

	//Enable ADC
	SET_BIT(ADCSRA,7);
     ba0:	a6 e2       	ldi	r26, 0x26	; 38
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 e2       	ldi	r30, 0x26	; 38
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	8c 93       	st	X, r24

}
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <MADC_u16GetDigitalValue>:

u16 MADC_u16GetDigitalValue(ADC_CHANNELS A_AdcChannel)
{
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	00 d0       	rcall	.+0      	; 0xbba <MADC_u16GetDigitalValue+0x6>
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalValue = 0;
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	19 82       	std	Y+1, r1	; 0x01
	if(A_AdcChannel < 32)
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	80 32       	cpi	r24, 0x20	; 32
     bca:	70 f5       	brcc	.+92     	; 0xc28 <MADC_u16GetDigitalValue+0x74>
	{
		//Clear The Channel 5-Bits
		ADMUX &= ADC_CHANNEL_MASK;
     bcc:	a7 e2       	ldi	r26, 0x27	; 39
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e7 e2       	ldi	r30, 0x27	; 39
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 7e       	andi	r24, 0xE0	; 224
     bd8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX,2);
		CLR_BIT(ADMUX,1);
		CLR_BIT(ADMUX,0);*/

		//Select Channel
		ADMUX |= A_AdcChannel;
     bda:	a7 e2       	ldi	r26, 0x27	; 39
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e2       	ldi	r30, 0x27	; 39
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	90 81       	ld	r25, Z
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	89 2b       	or	r24, r25
     be8:	8c 93       	st	X, r24
			SET_BIT(ADMUX,2);
			break;

		}*/
		//Start Conversion
		SET_BIT(ADCSRA,6);
     bea:	a6 e2       	ldi	r26, 0x26	; 38
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e6 e2       	ldi	r30, 0x26	; 38
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	80 64       	ori	r24, 0x40	; 64
     bf6:	8c 93       	st	X, r24

		//Polling On ADC Complete Flag
		while(GET_BIT(ADCSRA,4) == 0);
     bf8:	e6 e2       	ldi	r30, 0x26	; 38
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	82 95       	swap	r24
     c00:	8f 70       	andi	r24, 0x0F	; 15
     c02:	88 2f       	mov	r24, r24
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	81 70       	andi	r24, 0x01	; 1
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	a9 f3       	breq	.-22     	; 0xbf8 <MADC_u16GetDigitalValue+0x44>

		//Clear INt Flag
		SET_BIT(ADCSRA,4);
     c0e:	a6 e2       	ldi	r26, 0x26	; 38
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e6 e2       	ldi	r30, 0x26	; 38
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	80 61       	ori	r24, 0x10	; 16
     c1a:	8c 93       	st	X, r24

		//Read Conversion Value
		local_u16DigitalValue = ADCLH;
     c1c:	e4 e2       	ldi	r30, 0x24	; 36
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	91 81       	ldd	r25, Z+1	; 0x01
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	89 83       	std	Y+1, r24	; 0x01

	}
	//Return Result Of Conversion
	return local_u16DigitalValue;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <main>:


		}
}*/
void main(void)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
     c40:	0e 94 fd 09 	call	0x13fa	; 0x13fa <MDIO_voidInit>
	HLCD_voidInit();
     c44:	0e 94 57 0c 	call	0x18ae	; 0x18ae <HLCD_voidInit>
	HLCD_DisplayString("Abdelrahman");
     c48:	80 e6       	ldi	r24, 0x60	; 96
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <HLCD_DisplayString>
     c50:	ff cf       	rjmp	.-2      	; 0xc50 <main+0x18>

00000c52 <MDIO_voidSetPinDirection>:
#include "../include/MCAL/DIO/DIO_Private.h"
#include "../include/MCAL/DIO/DIO_Cfg.h"


void MDIO_voidSetPinDirection(DIO_PORT_e A_portID,DIO_PIN_e A_pinID,DIO_DIRECTION_e A_pinDirection)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	2d 97       	sbiw	r28, 0x0d	; 13
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	6a 83       	std	Y+2, r22	; 0x02
     c6a:	4b 83       	std	Y+3, r20	; 0x03
	//Input validation
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinDirection <= DIO_OUTPUT))
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	84 30       	cpi	r24, 0x04	; 4
     c70:	08 f0       	brcs	.+2      	; 0xc74 <MDIO_voidSetPinDirection+0x22>
     c72:	09 c1       	rjmp	.+530    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	08 f0       	brcs	.+2      	; 0xc7c <MDIO_voidSetPinDirection+0x2a>
     c7a:	05 c1       	rjmp	.+522    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	08 f0       	brcs	.+2      	; 0xc84 <MDIO_voidSetPinDirection+0x32>
     c82:	01 c1       	rjmp	.+514    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
	{
		switch(A_portID)
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	3d 87       	std	Y+13, r19	; 0x0d
     c8c:	2c 87       	std	Y+12, r18	; 0x0c
     c8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     c90:	9d 85       	ldd	r25, Y+13	; 0x0d
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	91 05       	cpc	r25, r1
     c96:	09 f4       	brne	.+2      	; 0xc9a <MDIO_voidSetPinDirection+0x48>
     c98:	4f c0       	rjmp	.+158    	; 0xd38 <MDIO_voidSetPinDirection+0xe6>
     c9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     c9c:	3d 85       	ldd	r19, Y+13	; 0x0d
     c9e:	22 30       	cpi	r18, 0x02	; 2
     ca0:	31 05       	cpc	r19, r1
     ca2:	2c f4       	brge	.+10     	; 0xcae <MDIO_voidSetPinDirection+0x5c>
     ca4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	71 f0       	breq	.+28     	; 0xcc8 <MDIO_voidSetPinDirection+0x76>
     cac:	ec c0       	rjmp	.+472    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
     cae:	2c 85       	ldd	r18, Y+12	; 0x0c
     cb0:	3d 85       	ldd	r19, Y+13	; 0x0d
     cb2:	22 30       	cpi	r18, 0x02	; 2
     cb4:	31 05       	cpc	r19, r1
     cb6:	09 f4       	brne	.+2      	; 0xcba <MDIO_voidSetPinDirection+0x68>
     cb8:	77 c0       	rjmp	.+238    	; 0xda8 <MDIO_voidSetPinDirection+0x156>
     cba:	8c 85       	ldd	r24, Y+12	; 0x0c
     cbc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cbe:	83 30       	cpi	r24, 0x03	; 3
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <MDIO_voidSetPinDirection+0x74>
     cc4:	a9 c0       	rjmp	.+338    	; 0xe18 <MDIO_voidSetPinDirection+0x1c6>
     cc6:	df c0       	rjmp	.+446    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
		{
		case DIO_PORTA:
			switch(A_pinDirection)
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3b 87       	std	Y+11, r19	; 0x0b
     cd0:	2a 87       	std	Y+10, r18	; 0x0a
     cd2:	8a 85       	ldd	r24, Y+10	; 0x0a
     cd4:	9b 85       	ldd	r25, Y+11	; 0x0b
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	31 f0       	breq	.+12     	; 0xce6 <MDIO_voidSetPinDirection+0x94>
     cda:	2a 85       	ldd	r18, Y+10	; 0x0a
     cdc:	3b 85       	ldd	r19, Y+11	; 0x0b
     cde:	21 30       	cpi	r18, 0x01	; 1
     ce0:	31 05       	cpc	r19, r1
     ce2:	b1 f0       	breq	.+44     	; 0xd10 <MDIO_voidSetPinDirection+0xbe>
     ce4:	d0 c0       	rjmp	.+416    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
			{
			case DIO_INPUT:
				CLR_BIT(DDRA_REG,A_pinID);
     ce6:	aa e3       	ldi	r26, 0x3A	; 58
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ea e3       	ldi	r30, 0x3A	; 58
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <MDIO_voidSetPinDirection+0xb2>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <MDIO_voidSetPinDirection+0xae>
     d08:	80 95       	com	r24
     d0a:	84 23       	and	r24, r20
     d0c:	8c 93       	st	X, r24
     d0e:	bb c0       	rjmp	.+374    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
				break;
			case DIO_OUTPUT:
				SET_BIT(DDRA_REG,A_pinID);
     d10:	aa e3       	ldi	r26, 0x3A	; 58
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e3       	ldi	r30, 0x3A	; 58
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <MDIO_voidSetPinDirection+0xdc>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <MDIO_voidSetPinDirection+0xd8>
     d32:	84 2b       	or	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	a7 c0       	rjmp	.+334    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
				break;
			}
			break;
			case DIO_PORTB:
				switch(A_pinDirection)
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	39 87       	std	Y+9, r19	; 0x09
     d40:	28 87       	std	Y+8, r18	; 0x08
     d42:	88 85       	ldd	r24, Y+8	; 0x08
     d44:	99 85       	ldd	r25, Y+9	; 0x09
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	31 f0       	breq	.+12     	; 0xd56 <MDIO_voidSetPinDirection+0x104>
     d4a:	28 85       	ldd	r18, Y+8	; 0x08
     d4c:	39 85       	ldd	r19, Y+9	; 0x09
     d4e:	21 30       	cpi	r18, 0x01	; 1
     d50:	31 05       	cpc	r19, r1
     d52:	b1 f0       	breq	.+44     	; 0xd80 <MDIO_voidSetPinDirection+0x12e>
     d54:	98 c0       	rjmp	.+304    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
				{
				case DIO_INPUT:
					CLR_BIT(DDRB_REG,A_pinID);
     d56:	a7 e3       	ldi	r26, 0x37	; 55
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e7 e3       	ldi	r30, 0x37	; 55
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <MDIO_voidSetPinDirection+0x122>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <MDIO_voidSetPinDirection+0x11e>
     d78:	80 95       	com	r24
     d7a:	84 23       	and	r24, r20
     d7c:	8c 93       	st	X, r24
     d7e:	83 c0       	rjmp	.+262    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
					break;
				case DIO_OUTPUT:
					SET_BIT(DDRB_REG,A_pinID);
     d80:	a7 e3       	ldi	r26, 0x37	; 55
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e7 e3       	ldi	r30, 0x37	; 55
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <MDIO_voidSetPinDirection+0x14c>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <MDIO_voidSetPinDirection+0x148>
     da2:	84 2b       	or	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	6f c0       	rjmp	.+222    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
					break;
				}
				break;
				case DIO_PORTC:
					switch(A_pinDirection)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	3f 83       	std	Y+7, r19	; 0x07
     db0:	2e 83       	std	Y+6, r18	; 0x06
     db2:	8e 81       	ldd	r24, Y+6	; 0x06
     db4:	9f 81       	ldd	r25, Y+7	; 0x07
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	31 f0       	breq	.+12     	; 0xdc6 <MDIO_voidSetPinDirection+0x174>
     dba:	2e 81       	ldd	r18, Y+6	; 0x06
     dbc:	3f 81       	ldd	r19, Y+7	; 0x07
     dbe:	21 30       	cpi	r18, 0x01	; 1
     dc0:	31 05       	cpc	r19, r1
     dc2:	b1 f0       	breq	.+44     	; 0xdf0 <MDIO_voidSetPinDirection+0x19e>
     dc4:	60 c0       	rjmp	.+192    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
					{
					case DIO_INPUT:
						CLR_BIT(DDRC_REG,A_pinID);
     dc6:	a4 e3       	ldi	r26, 0x34	; 52
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e4 e3       	ldi	r30, 0x34	; 52
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <MDIO_voidSetPinDirection+0x192>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <MDIO_voidSetPinDirection+0x18e>
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	4b c0       	rjmp	.+150    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
						break;
					case DIO_OUTPUT:
						SET_BIT(DDRC_REG,A_pinID);
     df0:	a4 e3       	ldi	r26, 0x34	; 52
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e4 e3       	ldi	r30, 0x34	; 52
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <MDIO_voidSetPinDirection+0x1bc>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <MDIO_voidSetPinDirection+0x1b8>
     e12:	84 2b       	or	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	37 c0       	rjmp	.+110    	; 0xe86 <MDIO_voidSetPinDirection+0x234>
						break;
					}
					break;
					case DIO_PORTD:
						switch(A_pinDirection)
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	3d 83       	std	Y+5, r19	; 0x05
     e20:	2c 83       	std	Y+4, r18	; 0x04
     e22:	8c 81       	ldd	r24, Y+4	; 0x04
     e24:	9d 81       	ldd	r25, Y+5	; 0x05
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	31 f0       	breq	.+12     	; 0xe36 <MDIO_voidSetPinDirection+0x1e4>
     e2a:	2c 81       	ldd	r18, Y+4	; 0x04
     e2c:	3d 81       	ldd	r19, Y+5	; 0x05
     e2e:	21 30       	cpi	r18, 0x01	; 1
     e30:	31 05       	cpc	r19, r1
     e32:	b1 f0       	breq	.+44     	; 0xe60 <MDIO_voidSetPinDirection+0x20e>
     e34:	28 c0       	rjmp	.+80     	; 0xe86 <MDIO_voidSetPinDirection+0x234>
						{
						case DIO_INPUT:
							CLR_BIT(DDRD_REG,A_pinID);
     e36:	a1 e3       	ldi	r26, 0x31	; 49
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e3       	ldi	r30, 0x31	; 49
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <MDIO_voidSetPinDirection+0x202>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <MDIO_voidSetPinDirection+0x1fe>
     e58:	80 95       	com	r24
     e5a:	84 23       	and	r24, r20
     e5c:	8c 93       	st	X, r24
     e5e:	13 c0       	rjmp	.+38     	; 0xe86 <MDIO_voidSetPinDirection+0x234>
							break;
						case DIO_OUTPUT:
							SET_BIT(DDRD_REG,A_pinID);
     e60:	a1 e3       	ldi	r26, 0x31	; 49
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e1 e3       	ldi	r30, 0x31	; 49
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <MDIO_voidSetPinDirection+0x22c>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <MDIO_voidSetPinDirection+0x228>
     e82:	84 2b       	or	r24, r20
     e84:	8c 93       	st	X, r24
	}
	else
	{
		//DO Nothing
	}
}
     e86:	2d 96       	adiw	r28, 0x0d	; 13
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	cf 91       	pop	r28
     e94:	df 91       	pop	r29
     e96:	08 95       	ret

00000e98 <MDIO_voidSetPinValue>:


void MDIO_voidSetPinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID,DIO_VALUE_e A_pinValue)
{
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	2d 97       	sbiw	r28, 0x0d	; 13
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	6a 83       	std	Y+2, r22	; 0x02
     eb0:	4b 83       	std	Y+3, r20	; 0x03
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7) && (A_pinValue <= DIO_SET))
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	84 30       	cpi	r24, 0x04	; 4
     eb6:	08 f0       	brcs	.+2      	; 0xeba <MDIO_voidSetPinValue+0x22>
     eb8:	09 c1       	rjmp	.+530    	; 0x10cc <MDIO_voidSetPinValue+0x234>
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	88 30       	cpi	r24, 0x08	; 8
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <MDIO_voidSetPinValue+0x2a>
     ec0:	05 c1       	rjmp	.+522    	; 0x10cc <MDIO_voidSetPinValue+0x234>
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	82 30       	cpi	r24, 0x02	; 2
     ec6:	08 f0       	brcs	.+2      	; 0xeca <MDIO_voidSetPinValue+0x32>
     ec8:	01 c1       	rjmp	.+514    	; 0x10cc <MDIO_voidSetPinValue+0x234>
	{
		switch(A_portID)
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	3d 87       	std	Y+13, r19	; 0x0d
     ed2:	2c 87       	std	Y+12, r18	; 0x0c
     ed4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <MDIO_voidSetPinValue+0x48>
     ede:	4f c0       	rjmp	.+158    	; 0xf7e <MDIO_voidSetPinValue+0xe6>
     ee0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee2:	3d 85       	ldd	r19, Y+13	; 0x0d
     ee4:	22 30       	cpi	r18, 0x02	; 2
     ee6:	31 05       	cpc	r19, r1
     ee8:	2c f4       	brge	.+10     	; 0xef4 <MDIO_voidSetPinValue+0x5c>
     eea:	8c 85       	ldd	r24, Y+12	; 0x0c
     eec:	9d 85       	ldd	r25, Y+13	; 0x0d
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	71 f0       	breq	.+28     	; 0xf0e <MDIO_voidSetPinValue+0x76>
     ef2:	ec c0       	rjmp	.+472    	; 0x10cc <MDIO_voidSetPinValue+0x234>
     ef4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ef6:	3d 85       	ldd	r19, Y+13	; 0x0d
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <MDIO_voidSetPinValue+0x68>
     efe:	77 c0       	rjmp	.+238    	; 0xfee <MDIO_voidSetPinValue+0x156>
     f00:	8c 85       	ldd	r24, Y+12	; 0x0c
     f02:	9d 85       	ldd	r25, Y+13	; 0x0d
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	91 05       	cpc	r25, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <MDIO_voidSetPinValue+0x74>
     f0a:	a9 c0       	rjmp	.+338    	; 0x105e <MDIO_voidSetPinValue+0x1c6>
     f0c:	df c0       	rjmp	.+446    	; 0x10cc <MDIO_voidSetPinValue+0x234>
		{
		case DIO_PORTA:
			switch(A_pinValue)
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3b 87       	std	Y+11, r19	; 0x0b
     f16:	2a 87       	std	Y+10, r18	; 0x0a
     f18:	8a 85       	ldd	r24, Y+10	; 0x0a
     f1a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	31 f0       	breq	.+12     	; 0xf2c <MDIO_voidSetPinValue+0x94>
     f20:	2a 85       	ldd	r18, Y+10	; 0x0a
     f22:	3b 85       	ldd	r19, Y+11	; 0x0b
     f24:	21 30       	cpi	r18, 0x01	; 1
     f26:	31 05       	cpc	r19, r1
     f28:	b1 f0       	breq	.+44     	; 0xf56 <MDIO_voidSetPinValue+0xbe>
     f2a:	d0 c0       	rjmp	.+416    	; 0x10cc <MDIO_voidSetPinValue+0x234>
			{
			case DIO_RESET:
				CLR_BIT(PORTA_REG,A_pinID);
     f2c:	ab e3       	ldi	r26, 0x3B	; 59
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	eb e3       	ldi	r30, 0x3B	; 59
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <MDIO_voidSetPinValue+0xb2>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <MDIO_voidSetPinValue+0xae>
     f4e:	80 95       	com	r24
     f50:	84 23       	and	r24, r20
     f52:	8c 93       	st	X, r24
     f54:	bb c0       	rjmp	.+374    	; 0x10cc <MDIO_voidSetPinValue+0x234>
				break;
			case DIO_SET:
				SET_BIT(PORTA_REG,A_pinID);
     f56:	ab e3       	ldi	r26, 0x3B	; 59
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	eb e3       	ldi	r30, 0x3B	; 59
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <MDIO_voidSetPinValue+0xdc>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <MDIO_voidSetPinValue+0xd8>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	a7 c0       	rjmp	.+334    	; 0x10cc <MDIO_voidSetPinValue+0x234>
				break;
			}
			break;
			case DIO_PORTB:
				switch(A_pinValue)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	39 87       	std	Y+9, r19	; 0x09
     f86:	28 87       	std	Y+8, r18	; 0x08
     f88:	88 85       	ldd	r24, Y+8	; 0x08
     f8a:	99 85       	ldd	r25, Y+9	; 0x09
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	31 f0       	breq	.+12     	; 0xf9c <MDIO_voidSetPinValue+0x104>
     f90:	28 85       	ldd	r18, Y+8	; 0x08
     f92:	39 85       	ldd	r19, Y+9	; 0x09
     f94:	21 30       	cpi	r18, 0x01	; 1
     f96:	31 05       	cpc	r19, r1
     f98:	b1 f0       	breq	.+44     	; 0xfc6 <MDIO_voidSetPinValue+0x12e>
     f9a:	98 c0       	rjmp	.+304    	; 0x10cc <MDIO_voidSetPinValue+0x234>
				{
				case DIO_RESET:
					CLR_BIT(PORTB_REG,A_pinID);
     f9c:	a8 e3       	ldi	r26, 0x38	; 56
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 e3       	ldi	r30, 0x38	; 56
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <MDIO_voidSetPinValue+0x122>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <MDIO_voidSetPinValue+0x11e>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	83 c0       	rjmp	.+262    	; 0x10cc <MDIO_voidSetPinValue+0x234>
					break;
				case DIO_SET:
					SET_BIT(PORTB_REG,A_pinID);
     fc6:	a8 e3       	ldi	r26, 0x38	; 56
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e8 e3       	ldi	r30, 0x38	; 56
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <MDIO_voidSetPinValue+0x14c>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <MDIO_voidSetPinValue+0x148>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	6f c0       	rjmp	.+222    	; 0x10cc <MDIO_voidSetPinValue+0x234>
					break;
				}
				break;
				case DIO_PORTC:
					switch(A_pinValue)
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	3f 83       	std	Y+7, r19	; 0x07
     ff6:	2e 83       	std	Y+6, r18	; 0x06
     ff8:	8e 81       	ldd	r24, Y+6	; 0x06
     ffa:	9f 81       	ldd	r25, Y+7	; 0x07
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	31 f0       	breq	.+12     	; 0x100c <MDIO_voidSetPinValue+0x174>
    1000:	2e 81       	ldd	r18, Y+6	; 0x06
    1002:	3f 81       	ldd	r19, Y+7	; 0x07
    1004:	21 30       	cpi	r18, 0x01	; 1
    1006:	31 05       	cpc	r19, r1
    1008:	b1 f0       	breq	.+44     	; 0x1036 <MDIO_voidSetPinValue+0x19e>
    100a:	60 c0       	rjmp	.+192    	; 0x10cc <MDIO_voidSetPinValue+0x234>
					{
					case DIO_RESET:
						CLR_BIT(PORTC_REG,A_pinID);
    100c:	a5 e3       	ldi	r26, 0x35	; 53
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e3       	ldi	r30, 0x35	; 53
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <MDIO_voidSetPinValue+0x192>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <MDIO_voidSetPinValue+0x18e>
    102e:	80 95       	com	r24
    1030:	84 23       	and	r24, r20
    1032:	8c 93       	st	X, r24
    1034:	4b c0       	rjmp	.+150    	; 0x10cc <MDIO_voidSetPinValue+0x234>
						break;
					case DIO_SET:
						SET_BIT(PORTC_REG,A_pinID);
    1036:	a5 e3       	ldi	r26, 0x35	; 53
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e3       	ldi	r30, 0x35	; 53
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <MDIO_voidSetPinValue+0x1bc>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <MDIO_voidSetPinValue+0x1b8>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	37 c0       	rjmp	.+110    	; 0x10cc <MDIO_voidSetPinValue+0x234>
						break;
					}
					break;
					case DIO_PORTD:
						switch(A_pinValue)
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3d 83       	std	Y+5, r19	; 0x05
    1066:	2c 83       	std	Y+4, r18	; 0x04
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	31 f0       	breq	.+12     	; 0x107c <MDIO_voidSetPinValue+0x1e4>
    1070:	2c 81       	ldd	r18, Y+4	; 0x04
    1072:	3d 81       	ldd	r19, Y+5	; 0x05
    1074:	21 30       	cpi	r18, 0x01	; 1
    1076:	31 05       	cpc	r19, r1
    1078:	b1 f0       	breq	.+44     	; 0x10a6 <MDIO_voidSetPinValue+0x20e>
    107a:	28 c0       	rjmp	.+80     	; 0x10cc <MDIO_voidSetPinValue+0x234>
						{
						case DIO_RESET:
							CLR_BIT(PORTD_REG,A_pinID);
    107c:	a2 e3       	ldi	r26, 0x32	; 50
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e2 e3       	ldi	r30, 0x32	; 50
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <MDIO_voidSetPinValue+0x202>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <MDIO_voidSetPinValue+0x1fe>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	13 c0       	rjmp	.+38     	; 0x10cc <MDIO_voidSetPinValue+0x234>
							break;
						case DIO_SET:
							SET_BIT(PORTD_REG,A_pinID);
    10a6:	a2 e3       	ldi	r26, 0x32	; 50
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e2 e3       	ldi	r30, 0x32	; 50
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 2e       	mov	r0, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <MDIO_voidSetPinValue+0x22c>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	0a 94       	dec	r0
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <MDIO_voidSetPinValue+0x228>
    10c8:	84 2b       	or	r24, r20
    10ca:	8c 93       	st	X, r24
	}
	else
	{
		//DO Nothing
	}
}
    10cc:	2d 96       	adiw	r28, 0x0d	; 13
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <MDIO_getPinValue>:


DIO_VALUE_e MDIO_getPinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <MDIO_getPinValue+0x6>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <MDIO_getPinValue+0x8>
    10e6:	0f 92       	push	r0
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	8a 83       	std	Y+2, r24	; 0x02
    10ee:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE_e local_PinValue;
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7))
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <MDIO_getPinValue+0x1a>
    10f6:	6b c0       	rjmp	.+214    	; 0x11ce <MDIO_getPinValue+0xf0>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 30       	cpi	r24, 0x08	; 8
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <MDIO_getPinValue+0x22>
    10fe:	67 c0       	rjmp	.+206    	; 0x11ce <MDIO_getPinValue+0xf0>
	{
		switch(A_portID)
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3d 83       	std	Y+5, r19	; 0x05
    1108:	2c 83       	std	Y+4, r18	; 0x04
    110a:	4c 81       	ldd	r20, Y+4	; 0x04
    110c:	5d 81       	ldd	r21, Y+5	; 0x05
    110e:	41 30       	cpi	r20, 0x01	; 1
    1110:	51 05       	cpc	r21, r1
    1112:	41 f1       	breq	.+80     	; 0x1164 <MDIO_getPinValue+0x86>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	91 05       	cpc	r25, r1
    111c:	34 f4       	brge	.+12     	; 0x112a <MDIO_getPinValue+0x4c>
    111e:	2c 81       	ldd	r18, Y+4	; 0x04
    1120:	3d 81       	ldd	r19, Y+5	; 0x05
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	61 f0       	breq	.+24     	; 0x1140 <MDIO_getPinValue+0x62>
    1128:	52 c0       	rjmp	.+164    	; 0x11ce <MDIO_getPinValue+0xf0>
    112a:	4c 81       	ldd	r20, Y+4	; 0x04
    112c:	5d 81       	ldd	r21, Y+5	; 0x05
    112e:	42 30       	cpi	r20, 0x02	; 2
    1130:	51 05       	cpc	r21, r1
    1132:	51 f1       	breq	.+84     	; 0x1188 <MDIO_getPinValue+0xaa>
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	91 05       	cpc	r25, r1
    113c:	b9 f1       	breq	.+110    	; 0x11ac <MDIO_getPinValue+0xce>
    113e:	47 c0       	rjmp	.+142    	; 0x11ce <MDIO_getPinValue+0xf0>
		{
		case DIO_PORTA:
			local_PinValue = GET_BIT(PINA_REG,A_pinID);
    1140:	e9 e3       	ldi	r30, 0x39	; 57
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <MDIO_getPinValue+0x7a>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <MDIO_getPinValue+0x76>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	35 c0       	rjmp	.+106    	; 0x11ce <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTB:
			local_PinValue = GET_BIT(PINB_REG,A_pinID);
    1164:	e6 e3       	ldi	r30, 0x36	; 54
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <MDIO_getPinValue+0x9e>
    1178:	55 95       	asr	r21
    117a:	47 95       	ror	r20
    117c:	8a 95       	dec	r24
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <MDIO_getPinValue+0x9a>
    1180:	ca 01       	movw	r24, r20
    1182:	81 70       	andi	r24, 0x01	; 1
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	23 c0       	rjmp	.+70     	; 0x11ce <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTC:
			local_PinValue = GET_BIT(PINC_REG,A_pinID);
    1188:	e3 e3       	ldi	r30, 0x33	; 51
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a9 01       	movw	r20, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <MDIO_getPinValue+0xc2>
    119c:	55 95       	asr	r21
    119e:	47 95       	ror	r20
    11a0:	8a 95       	dec	r24
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <MDIO_getPinValue+0xbe>
    11a4:	ca 01       	movw	r24, r20
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	11 c0       	rjmp	.+34     	; 0x11ce <MDIO_getPinValue+0xf0>
			break;
		case DIO_PORTD:
			local_PinValue = GET_BIT(PIND_REG,A_pinID);
    11ac:	e0 e3       	ldi	r30, 0x30	; 48
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a9 01       	movw	r20, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <MDIO_getPinValue+0xe6>
    11c0:	55 95       	asr	r21
    11c2:	47 95       	ror	r20
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <MDIO_getPinValue+0xe2>
    11c8:	ca 01       	movw	r24, r20
    11ca:	81 70       	andi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
	{
		//Do Nothing
	}


	return local_PinValue;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <MDIO_voidTogglePinValue>:




void MDIO_voidTogglePinValue(DIO_PORT_e A_portID,DIO_PIN_e A_pinID)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <MDIO_voidTogglePinValue+0x6>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <MDIO_voidTogglePinValue+0x8>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	6a 83       	std	Y+2, r22	; 0x02
	//Input Validation
	if((A_portID <= DIO_PORTD) && (A_pinID <= PIN7))
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	84 30       	cpi	r24, 0x04	; 4
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <MDIO_voidTogglePinValue+0x18>
    11f6:	72 c0       	rjmp	.+228    	; 0x12dc <MDIO_voidTogglePinValue+0xfc>
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 30       	cpi	r24, 0x08	; 8
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <MDIO_voidTogglePinValue+0x20>
    11fe:	6e c0       	rjmp	.+220    	; 0x12dc <MDIO_voidTogglePinValue+0xfc>
	{
		switch(A_portID)
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	3c 83       	std	Y+4, r19	; 0x04
    1208:	2b 83       	std	Y+3, r18	; 0x03
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	91 05       	cpc	r25, r1
    1212:	49 f1       	breq	.+82     	; 0x1266 <MDIO_voidTogglePinValue+0x86>
    1214:	2b 81       	ldd	r18, Y+3	; 0x03
    1216:	3c 81       	ldd	r19, Y+4	; 0x04
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <MDIO_voidTogglePinValue+0x48>
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	61 f0       	breq	.+24     	; 0x123e <MDIO_voidTogglePinValue+0x5e>
    1226:	5a c0       	rjmp	.+180    	; 0x12dc <MDIO_voidTogglePinValue+0xfc>
    1228:	2b 81       	ldd	r18, Y+3	; 0x03
    122a:	3c 81       	ldd	r19, Y+4	; 0x04
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	71 f1       	breq	.+92     	; 0x128e <MDIO_voidTogglePinValue+0xae>
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	91 05       	cpc	r25, r1
    123a:	e9 f1       	breq	.+122    	; 0x12b6 <MDIO_voidTogglePinValue+0xd6>
    123c:	4f c0       	rjmp	.+158    	; 0x12dc <MDIO_voidTogglePinValue+0xfc>
		{
		case DIO_PORTA:
			TOG_BIT(PORTA_REG,A_pinID);
    123e:	ab e3       	ldi	r26, 0x3B	; 59
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e3       	ldi	r30, 0x3B	; 59
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <MDIO_voidTogglePinValue+0x7c>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <MDIO_voidTogglePinValue+0x78>
    1260:	84 27       	eor	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	3b c0       	rjmp	.+118    	; 0x12dc <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTB:
			TOG_BIT(PORTB_REG,A_pinID);
    1266:	a8 e3       	ldi	r26, 0x38	; 56
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e8 e3       	ldi	r30, 0x38	; 56
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <MDIO_voidTogglePinValue+0xa4>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <MDIO_voidTogglePinValue+0xa0>
    1288:	84 27       	eor	r24, r20
    128a:	8c 93       	st	X, r24
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTC:
			TOG_BIT(PORTC_REG,A_pinID);
    128e:	a5 e3       	ldi	r26, 0x35	; 53
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e5 e3       	ldi	r30, 0x35	; 53
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <MDIO_voidTogglePinValue+0xcc>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <MDIO_voidTogglePinValue+0xc8>
    12b0:	84 27       	eor	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	13 c0       	rjmp	.+38     	; 0x12dc <MDIO_voidTogglePinValue+0xfc>
			break;
		case DIO_PORTD:
			TOG_BIT(PORTD_REG,A_pinID);
    12b6:	a2 e3       	ldi	r26, 0x32	; 50
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e2 e3       	ldi	r30, 0x32	; 50
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <MDIO_voidTogglePinValue+0xf4>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <MDIO_voidTogglePinValue+0xf0>
    12d8:	84 27       	eor	r24, r20
    12da:	8c 93       	st	X, r24
	else
	{
		//Do Nothing
	}

}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(DIO_PORT_e A_portID,u8 A_u8PortDirection)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <MDIO_voidSetPortDirection+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <MDIO_voidSetPortDirection+0x8>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	6a 83       	std	Y+2, r22	; 0x02
	if(A_portID <= DIO_PORTD)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	90 f5       	brcc	.+100    	; 0x1364 <MDIO_voidSetPortDirection+0x7a>
	{
		switch(A_portID)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	2b 83       	std	Y+3, r18	; 0x03
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <MDIO_voidSetPortDirection+0x5e>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <MDIO_voidSetPortDirection+0x3e>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <MDIO_voidSetPortDirection+0x54>
    1326:	1e c0       	rjmp	.+60     	; 0x1364 <MDIO_voidSetPortDirection+0x7a>
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	3c 81       	ldd	r19, Y+4	; 0x04
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <MDIO_voidSetPortDirection+0x68>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <MDIO_voidSetPortDirection+0x72>
    133c:	13 c0       	rjmp	.+38     	; 0x1364 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_PORTA:
			DDRA_REG = A_u8PortDirection;
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	80 83       	st	Z, r24
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTB:
			DDRB_REG = A_u8PortDirection;
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	80 83       	st	Z, r24
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTC:
			DDRC_REG = A_u8PortDirection;
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	80 83       	st	Z, r24
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <MDIO_voidSetPortDirection+0x7a>
			break;
		case DIO_PORTD:
			DDRD_REG = A_u8PortDirection;
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	80 83       	st	Z, r24
	else
	{
		//Do Nothing
	}

}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(DIO_PORT_e A_portID,u8 A_u8PortValue)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <MDIO_voidSetPortValue+0x6>
    1378:	00 d0       	rcall	.+0      	; 0x137a <MDIO_voidSetPortValue+0x8>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	6a 83       	std	Y+2, r22	; 0x02
	if(A_portID <= DIO_PORTD)
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	90 f5       	brcc	.+100    	; 0x13ec <MDIO_voidSetPortValue+0x7a>
	{
		switch(A_portID)
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3c 83       	std	Y+4, r19	; 0x04
    1390:	2b 83       	std	Y+3, r18	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	d1 f0       	breq	.+52     	; 0x13d0 <MDIO_voidSetPortValue+0x5e>
    139c:	2b 81       	ldd	r18, Y+3	; 0x03
    139e:	3c 81       	ldd	r19, Y+4	; 0x04
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <MDIO_voidSetPortValue+0x3e>
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	61 f0       	breq	.+24     	; 0x13c6 <MDIO_voidSetPortValue+0x54>
    13ae:	1e c0       	rjmp	.+60     	; 0x13ec <MDIO_voidSetPortValue+0x7a>
    13b0:	2b 81       	ldd	r18, Y+3	; 0x03
    13b2:	3c 81       	ldd	r19, Y+4	; 0x04
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	81 f0       	breq	.+32     	; 0x13da <MDIO_voidSetPortValue+0x68>
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	83 30       	cpi	r24, 0x03	; 3
    13c0:	91 05       	cpc	r25, r1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <MDIO_voidSetPortValue+0x72>
    13c4:	13 c0       	rjmp	.+38     	; 0x13ec <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_PORTA:
			PORTA_REG = A_u8PortValue;
    13c6:	eb e3       	ldi	r30, 0x3B	; 59
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	80 83       	st	Z, r24
    13ce:	0e c0       	rjmp	.+28     	; 0x13ec <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTB:
			PORTB_REG = A_u8PortValue;
    13d0:	e8 e3       	ldi	r30, 0x38	; 56
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	80 83       	st	Z, r24
    13d8:	09 c0       	rjmp	.+18     	; 0x13ec <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTC:
			PORTC_REG = A_u8PortValue;
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	80 83       	st	Z, r24
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <MDIO_voidSetPortValue+0x7a>
			break;
		case DIO_PORTD:
			PORTD_REG = A_u8PortValue;
    13e4:	e2 e3       	ldi	r30, 0x32	; 50
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <MDIO_voidInit>:


MDIO_voidInit(void)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PA7_INITIAL_DIRECTION,PA6_INITIAL_DIRECTION,PA5_INITIAL_DIRECTION,PA4_INITIAL_DIRECTION,PA3_INITIAL_DIRECTION,PA2_INITIAL_DIRECTION,PA1_INITIAL_DIRECTION,PA0_INITIAL_DIRECTION);
    1402:	ea e3       	ldi	r30, 0x3A	; 58
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	80 83       	st	Z, r24

	DDRB_REG = CONC_BIT(PB7_INITIAL_DIRECTION,PB6_INITIAL_DIRECTION,PB5_INITIAL_DIRECTION,PB4_INITIAL_DIRECTION,PB3_INITIAL_DIRECTION,PB2_INITIAL_DIRECTION,PB1_INITIAL_DIRECTION,PB0_INITIAL_DIRECTION);
    140a:	e7 e3       	ldi	r30, 0x37	; 55
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	10 82       	st	Z, r1

	DDRC_REG = CONC_BIT(PC7_INITIAL_DIRECTION,PC6_INITIAL_DIRECTION,PC5_INITIAL_DIRECTION,PC4_INITIAL_DIRECTION,PC3_INITIAL_DIRECTION,PC2_INITIAL_DIRECTION,PC1_INITIAL_DIRECTION,PC0_INITIAL_DIRECTION);
    1410:	e4 e3       	ldi	r30, 0x34	; 52
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	80 83       	st	Z, r24

	DDRD_REG = CONC_BIT(PD7_INITIAL_DIRECTION,PD6_INITIAL_DIRECTION,PD5_INITIAL_DIRECTION,PD4_INITIAL_DIRECTION,PD3_INITIAL_DIRECTION,PD2_INITIAL_DIRECTION,PD1_INITIAL_DIRECTION,PD0_INITIAL_DIRECTION);
    1418:	e1 e3       	ldi	r30, 0x31	; 49
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8f ef       	ldi	r24, 0xFF	; 255
    141e:	80 83       	st	Z, r24



	PORTA_REG = CONC_BIT(PA7_INITIAL_VALUE,PA6_INITIAL_VALUE,PA5_INITIAL_VALUE,PA4_INITIAL_VALUE,PA3_INITIAL_VALUE,PA2_INITIAL_VALUE,PA1_INITIAL_VALUE,PA0_INITIAL_VALUE);
    1420:	eb e3       	ldi	r30, 0x3B	; 59
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	10 82       	st	Z, r1

	PORTB_REG = CONC_BIT(PB7_INITIAL_VALUE,PB6_INITIAL_VALUE,PB5_INITIAL_VALUE,PB4_INITIAL_VALUE,PB3_INITIAL_VALUE,PB2_INITIAL_VALUE,PB1_INITIAL_VALUE,PB0_INITIAL_VALUE);
    1426:	e8 e3       	ldi	r30, 0x38	; 56
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	10 82       	st	Z, r1

	PORTC_REG = CONC_BIT(PC7_INITIAL_VALUE,PC6_INITIAL_VALUE,PC5_INITIAL_VALUE,PC4_INITIAL_VALUE,PC3_INITIAL_VALUE,PC2_INITIAL_VALUE,PC1_INITIAL_VALUE,PC0_INITIAL_VALUE);
    142c:	e5 e3       	ldi	r30, 0x35	; 53
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	10 82       	st	Z, r1

	PORTD_REG = CONC_BIT(PD7_INITIAL_VALUE,PD6_INITIAL_VALUE,PD5_INITIAL_VALUE,PD4_INITIAL_VALUE,PD3_INITIAL_VALUE,PD2_INITIAL_VALUE,PD1_INITIAL_VALUE,PD0_INITIAL_VALUE);
    1432:	e2 e3       	ldi	r30, 0x32	; 50
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	10 82       	st	Z, r1


}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <HKEYPAD_u8GetPressedKey>:

u8 static const global_u8ArrOfRows[KEYPAD_ROW_NO] = KEYPAD_ROWS;
u8 static const global_u8ArrOfCols[KEYPAD_COL_NO] = KEYPAD_COLS;

u8 HKEYPAD_u8GetPressedKey(void)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	63 97       	sbiw	r28, 0x13	; 19
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8KeyValue = NO_KEY_PRESSED;
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	8b 8b       	std	Y+19, r24	; 0x13

	u8 local_u8ROWCounter = 0,	local_u8ColCounter = 0,	local_u8PinValue, local_u8Flag = FLAG_DOWN;
    1456:	1a 8a       	std	Y+18, r1	; 0x12
    1458:	19 8a       	std	Y+17, r1	; 0x11
    145a:	1f 86       	std	Y+15, r1	; 0x0f
			//Loop On ROWS
			for(local_u8ROWCounter = 0; local_u8ROWCounter<KEYPAD_ROW_NO; local_u8ROWCounter++)
    145c:	1a 8a       	std	Y+18, r1	; 0x12
    145e:	dd c0       	rjmp	.+442    	; 0x161a <HKEYPAD_u8GetPressedKey+0x1dc>
			{
				//Activate One Row
				MDIO_voidSetPinValue(KEYPAD_PORT,global_u8ArrOfRows[local_u8ROWCounter],KEYPAD_ROW_ACTIVE);
    1460:	8a 89       	ldd	r24, Y+18	; 0x12
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	fc 01       	movw	r30, r24
    1468:	ec 57       	subi	r30, 0x7C	; 124
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	90 81       	ld	r25, Z
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	69 2f       	mov	r22, r25
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>


				//Check On COLs
				for(local_u8ColCounter = 0; local_u8ColCounter<KEYPAD_COL_NO; local_u8ColCounter++)
    1478:	19 8a       	std	Y+17, r1	; 0x11
    147a:	b9 c0       	rjmp	.+370    	; 0x15ee <HKEYPAD_u8GetPressedKey+0x1b0>
				{
					//Read COL
					local_u8PinValue = MDIO_getPinValue(KEYPAD_PORT,global_u8ArrOfCols[local_u8ColCounter]);
    147c:	89 89       	ldd	r24, Y+17	; 0x11
    147e:	88 2f       	mov	r24, r24
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	fc 01       	movw	r30, r24
    1484:	e8 57       	subi	r30, 0x78	; 120
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	90 81       	ld	r25, Z
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	69 2f       	mov	r22, r25
    148e:	0e 94 6f 08 	call	0x10de	; 0x10de <MDIO_getPinValue>
    1492:	88 8b       	std	Y+16, r24	; 0x10
					//Check if Key is Pressed
					if(local_u8PinValue == KEY_PRESSED)
    1494:	88 89       	ldd	r24, Y+16	; 0x10
    1496:	88 23       	and	r24, r24
    1498:	09 f0       	breq	.+2      	; 0x149c <HKEYPAD_u8GetPressedKey+0x5e>
    149a:	a6 c0       	rjmp	.+332    	; 0x15e8 <HKEYPAD_u8GetPressedKey+0x1aa>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 ef       	ldi	r26, 0xF0	; 240
    14a2:	b1 e4       	ldi	r27, 0x41	; 65
    14a4:	8b 87       	std	Y+11, r24	; 0x0b
    14a6:	9c 87       	std	Y+12, r25	; 0x0c
    14a8:	ad 87       	std	Y+13, r26	; 0x0d
    14aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a ef       	ldi	r20, 0xFA	; 250
    14ba:	54 e4       	ldi	r21, 0x44	; 68
    14bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8f 83       	std	Y+7, r24	; 0x07
    14c6:	98 87       	std	Y+8, r25	; 0x08
    14c8:	a9 87       	std	Y+9, r26	; 0x09
    14ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <HKEYPAD_u8GetPressedKey+0xb0>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <HKEYPAD_u8GetPressedKey+0x12e>
	else if (__tmp > 65535)
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	78 85       	ldd	r23, Y+8	; 0x08
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <HKEYPAD_u8GetPressedKey+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	6b 85       	ldd	r22, Y+11	; 0x0b
    1508:	7c 85       	ldd	r23, Y+12	; 0x0c
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	0f c0       	rjmp	.+30     	; 0x154e <HKEYPAD_u8GetPressedKey+0x110>
    1530:	88 ec       	ldi	r24, 0xC8	; 200
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <HKEYPAD_u8GetPressedKey+0xfe>
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <HKEYPAD_u8GetPressedKey+0xf2>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <HKEYPAD_u8GetPressedKey+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <HKEYPAD_u8GetPressedKey+0x13a>
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
					{
						//Debouncing Delay
						_delay_ms(KEYPAD_DEBOUNCING_DELAY_ms);
					    local_u8PinValue = MDIO_getPinValue(KEYPAD_PORT,global_u8ArrOfCols[local_u8ColCounter]);
    1580:	89 89       	ldd	r24, Y+17	; 0x11
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	fc 01       	movw	r30, r24
    1588:	e8 57       	subi	r30, 0x78	; 120
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	90 81       	ld	r25, Z
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	69 2f       	mov	r22, r25
    1592:	0e 94 6f 08 	call	0x10de	; 0x10de <MDIO_getPinValue>
    1596:	88 8b       	std	Y+16, r24	; 0x10
						if(local_u8PinValue == KEY_PRESSED)
    1598:	88 89       	ldd	r24, Y+16	; 0x10
    159a:	88 23       	and	r24, r24
    159c:	29 f5       	brne	.+74     	; 0x15e8 <HKEYPAD_u8GetPressedKey+0x1aa>
    159e:	0c c0       	rjmp	.+24     	; 0x15b8 <HKEYPAD_u8GetPressedKey+0x17a>
						{
							while(local_u8PinValue == KEY_PRESSED)//Poling On Flag
							{
								local_u8PinValue = MDIO_getPinValue(KEYPAD_PORT,global_u8ArrOfCols[local_u8ColCounter]);
    15a0:	89 89       	ldd	r24, Y+17	; 0x11
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	fc 01       	movw	r30, r24
    15a8:	e8 57       	subi	r30, 0x78	; 120
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	90 81       	ld	r25, Z
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	69 2f       	mov	r22, r25
    15b2:	0e 94 6f 08 	call	0x10de	; 0x10de <MDIO_getPinValue>
    15b6:	88 8b       	std	Y+16, r24	; 0x10
						//Debouncing Delay
						_delay_ms(KEYPAD_DEBOUNCING_DELAY_ms);
					    local_u8PinValue = MDIO_getPinValue(KEYPAD_PORT,global_u8ArrOfCols[local_u8ColCounter]);
						if(local_u8PinValue == KEY_PRESSED)
						{
							while(local_u8PinValue == KEY_PRESSED)//Poling On Flag
    15b8:	88 89       	ldd	r24, Y+16	; 0x10
    15ba:	88 23       	and	r24, r24
    15bc:	89 f3       	breq	.-30     	; 0x15a0 <HKEYPAD_u8GetPressedKey+0x162>
							{
								local_u8PinValue = MDIO_getPinValue(KEYPAD_PORT,global_u8ArrOfCols[local_u8ColCounter]);
							}//End of While Loop
							local_u8KeyValue = globl_u8arrOfKeyValues[local_u8ROWCounter][local_u8ColCounter];
    15be:	8a 89       	ldd	r24, Y+18	; 0x12
    15c0:	48 2f       	mov	r20, r24
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	89 89       	ldd	r24, Y+17	; 0x11
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	ca 01       	movw	r24, r20
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	82 0f       	add	r24, r18
    15d6:	93 1f       	adc	r25, r19
    15d8:	fc 01       	movw	r30, r24
    15da:	ec 58       	subi	r30, 0x8C	; 140
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	80 81       	ld	r24, Z
    15e0:	8b 8b       	std	Y+19, r24	; 0x13
							local_u8Flag = FLAG_UP;//Notification For COLs.... Loop To break and Return
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <HKEYPAD_u8GetPressedKey+0x1b8>
				//Activate One Row
				MDIO_voidSetPinValue(KEYPAD_PORT,global_u8ArrOfRows[local_u8ROWCounter],KEYPAD_ROW_ACTIVE);


				//Check On COLs
				for(local_u8ColCounter = 0; local_u8ColCounter<KEYPAD_COL_NO; local_u8ColCounter++)
    15e8:	89 89       	ldd	r24, Y+17	; 0x11
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	89 8b       	std	Y+17, r24	; 0x11
    15ee:	89 89       	ldd	r24, Y+17	; 0x11
    15f0:	84 30       	cpi	r24, 0x04	; 4
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <HKEYPAD_u8GetPressedKey+0x1b8>
    15f4:	43 cf       	rjmp	.-378    	; 0x147c <HKEYPAD_u8GetPressedKey+0x3e>


					}
				}//End Of COLs Loop
				//DE-Activate One Row
				MDIO_voidSetPinValue(KEYPAD_PORT,global_u8ArrOfRows[local_u8ROWCounter],KEYPAD_ROW_DEACTIVE);
    15f6:	8a 89       	ldd	r24, Y+18	; 0x12
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	fc 01       	movw	r30, r24
    15fe:	ec 57       	subi	r30, 0x7C	; 124
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	90 81       	ld	r25, Z
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	69 2f       	mov	r22, r25
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>

				if(local_u8Flag == FLAG_UP)
    160e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	39 f0       	breq	.+14     	; 0x1622 <HKEYPAD_u8GetPressedKey+0x1e4>
{
	u8 local_u8KeyValue = NO_KEY_PRESSED;

	u8 local_u8ROWCounter = 0,	local_u8ColCounter = 0,	local_u8PinValue, local_u8Flag = FLAG_DOWN;
			//Loop On ROWS
			for(local_u8ROWCounter = 0; local_u8ROWCounter<KEYPAD_ROW_NO; local_u8ROWCounter++)
    1614:	8a 89       	ldd	r24, Y+18	; 0x12
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	8a 8b       	std	Y+18, r24	; 0x12
    161a:	8a 89       	ldd	r24, Y+18	; 0x12
    161c:	84 30       	cpi	r24, 0x04	; 4
    161e:	08 f4       	brcc	.+2      	; 0x1622 <HKEYPAD_u8GetPressedKey+0x1e4>
    1620:	1f cf       	rjmp	.-450    	; 0x1460 <HKEYPAD_u8GetPressedKey+0x22>
				}
			}//End Of ROWS Loop



	return local_u8KeyValue; //Return Pressed Key Value
    1622:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1624:	63 96       	adiw	r28, 0x13	; 19
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <HLCD_voidSendCommand>:
#include <util/delay.h>

#define F_CPU	8000000UL

void HLCD_voidSendCommand(u8 A_u8Command)
 {
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	2f 97       	sbiw	r28, 0x0f	; 15
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	8f 87       	std	Y+15, r24	; 0x0f
	 //To Send Command	(RS-->0,RW-->0)
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_RESET);
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_RESET);
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>

	 //Send Command
	 MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    1660:	83 e0       	ldi	r24, 0x03	; 3
    1662:	6f 85       	ldd	r22, Y+15	; 0x0f
    1664:	0e 94 b9 09 	call	0x1372	; 0x1372 <MDIO_voidSetPortValue>

	 //Set Pulse On E Pin
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_SET);
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	62 e0       	ldi	r22, 0x02	; 2
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e0       	ldi	r26, 0x00	; 0
    1678:	b0 e4       	ldi	r27, 0x40	; 64
    167a:	8b 87       	std	Y+11, r24	; 0x0b
    167c:	9c 87       	std	Y+12, r25	; 0x0c
    167e:	ad 87       	std	Y+13, r26	; 0x0d
    1680:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1682:	6b 85       	ldd	r22, Y+11	; 0x0b
    1684:	7c 85       	ldd	r23, Y+12	; 0x0c
    1686:	8d 85       	ldd	r24, Y+13	; 0x0d
    1688:	9e 85       	ldd	r25, Y+14	; 0x0e
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4a ef       	ldi	r20, 0xFA	; 250
    1690:	54 e4       	ldi	r21, 0x44	; 68
    1692:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	8f 83       	std	Y+7, r24	; 0x07
    169c:	98 87       	std	Y+8, r25	; 0x08
    169e:	a9 87       	std	Y+9, r26	; 0x09
    16a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a2:	6f 81       	ldd	r22, Y+7	; 0x07
    16a4:	78 85       	ldd	r23, Y+8	; 0x08
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	3f c0       	rjmp	.+126    	; 0x1742 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    16c4:	6f 81       	ldd	r22, Y+7	; 0x07
    16c6:	78 85       	ldd	r23, Y+8	; 0x08
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16d8:	18 16       	cp	r1, r24
    16da:	4c f5       	brge	.+82     	; 0x172e <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16de:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <HLCD_voidSendCommand+0xee>
    1706:	88 ec       	ldi	r24, 0xC8	; 200
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9c 83       	std	Y+4, r25	; 0x04
    170c:	8b 83       	std	Y+3, r24	; 0x03
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <HLCD_voidSendCommand+0xdc>
    1716:	9c 83       	std	Y+4, r25	; 0x04
    1718:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f7       	brne	.-38     	; 0x1706 <HLCD_voidSendCommand+0xd0>
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	6f 81       	ldd	r22, Y+7	; 0x07
    1730:	78 85       	ldd	r23, Y+8	; 0x08
    1732:	89 85       	ldd	r24, Y+9	; 0x09
    1734:	9a 85       	ldd	r25, Y+10	; 0x0a
    1736:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	9e 81       	ldd	r25, Y+6	; 0x06
    1746:	9a 83       	std	Y+2, r25	; 0x02
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	9a 81       	ldd	r25, Y+2	; 0x02
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <HLCD_voidSendCommand+0x118>
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_RESET);
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>


 }
    1760:	2f 96       	adiw	r28, 0x0f	; 15
    1762:	0f b6       	in	r0, 0x3f	; 63
    1764:	f8 94       	cli
    1766:	de bf       	out	0x3e, r29	; 62
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	cd bf       	out	0x3d, r28	; 61
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
 {
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	2f 97       	sbiw	r28, 0x0f	; 15
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	8f 87       	std	Y+15, r24	; 0x0f
	     //To Send Data(RS-->1,RW-->0)
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,DIO_SET);
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,DIO_RESET);
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>

	 	 //Send Data
	 	 MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    179c:	83 e0       	ldi	r24, 0x03	; 3
    179e:	6f 85       	ldd	r22, Y+15	; 0x0f
    17a0:	0e 94 b9 09 	call	0x1372	; 0x1372 <MDIO_voidSetPortValue>

	 	 //Set Pulse On E Pin
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_SET);
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	62 e0       	ldi	r22, 0x02	; 2
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	a0 e0       	ldi	r26, 0x00	; 0
    17b4:	b0 e4       	ldi	r27, 0x40	; 64
    17b6:	8b 87       	std	Y+11, r24	; 0x0b
    17b8:	9c 87       	std	Y+12, r25	; 0x0c
    17ba:	ad 87       	std	Y+13, r26	; 0x0d
    17bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17be:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4a ef       	ldi	r20, 0xFA	; 250
    17cc:	54 e4       	ldi	r21, 0x44	; 68
    17ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	8f 83       	std	Y+7, r24	; 0x07
    17d8:	98 87       	std	Y+8, r25	; 0x08
    17da:	a9 87       	std	Y+9, r26	; 0x09
    17dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17de:	6f 81       	ldd	r22, Y+7	; 0x07
    17e0:	78 85       	ldd	r23, Y+8	; 0x08
    17e2:	89 85       	ldd	r24, Y+9	; 0x09
    17e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f e3       	ldi	r21, 0x3F	; 63
    17ee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f2:	88 23       	and	r24, r24
    17f4:	2c f4       	brge	.+10     	; 0x1800 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
    17fe:	3f c0       	rjmp	.+126    	; 0x187e <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1800:	6f 81       	ldd	r22, Y+7	; 0x07
    1802:	78 85       	ldd	r23, Y+8	; 0x08
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	4f e7       	ldi	r20, 0x7F	; 127
    180e:	57 e4       	ldi	r21, 0x47	; 71
    1810:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1814:	18 16       	cp	r1, r24
    1816:	4c f5       	brge	.+82     	; 0x186a <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	6b 85       	ldd	r22, Y+11	; 0x0b
    181a:	7c 85       	ldd	r23, Y+12	; 0x0c
    181c:	8d 85       	ldd	r24, Y+13	; 0x0d
    181e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	0f c0       	rjmp	.+30     	; 0x1860 <HLCD_voidSendData+0xee>
    1842:	88 ec       	ldi	r24, 0xC8	; 200
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9c 83       	std	Y+4, r25	; 0x04
    1848:	8b 83       	std	Y+3, r24	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <HLCD_voidSendData+0xdc>
    1852:	9c 83       	std	Y+4, r25	; 0x04
    1854:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	9e 81       	ldd	r25, Y+6	; 0x06
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	69 f7       	brne	.-38     	; 0x1842 <HLCD_voidSendData+0xd0>
    1868:	14 c0       	rjmp	.+40     	; 0x1892 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	78 85       	ldd	r23, Y+8	; 0x08
    186e:	89 85       	ldd	r24, Y+9	; 0x09
    1870:	9a 85       	ldd	r25, Y+10	; 0x0a
    1872:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9e 83       	std	Y+6, r25	; 0x06
    187c:	8d 83       	std	Y+5, r24	; 0x05
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	9e 81       	ldd	r25, Y+6	; 0x06
    1882:	9a 83       	std	Y+2, r25	; 0x02
    1884:	89 83       	std	Y+1, r24	; 0x01
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	9a 81       	ldd	r25, Y+2	; 0x02
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <HLCD_voidSendData+0x118>
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
	 	 _delay_ms(2);
	 	 MDIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,DIO_RESET);
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	62 e0       	ldi	r22, 0x02	; 2
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	0e 94 4c 07 	call	0xe98	; 0xe98 <MDIO_voidSetPinValue>


 }
    189c:	2f 96       	adiw	r28, 0x0f	; 15
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	c6 54       	subi	r28, 0x46	; 70
    18bc:	d0 40       	sbci	r29, 0x00	; 0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	fe 01       	movw	r30, r28
    18ca:	ed 5b       	subi	r30, 0xBD	; 189
    18cc:	ff 4f       	sbci	r31, 0xFF	; 255
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a0 ef       	ldi	r26, 0xF0	; 240
    18d4:	b1 e4       	ldi	r27, 0x41	; 65
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	a2 83       	std	Z+2, r26	; 0x02
    18dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18de:	8e 01       	movw	r16, r28
    18e0:	01 5c       	subi	r16, 0xC1	; 193
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	fe 01       	movw	r30, r28
    18e6:	ed 5b       	subi	r30, 0xBD	; 189
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a ef       	ldi	r20, 0xFA	; 250
    18f8:	54 e4       	ldi	r21, 0x44	; 68
    18fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	f8 01       	movw	r30, r16
    1904:	80 83       	st	Z, r24
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	a2 83       	std	Z+2, r26	; 0x02
    190a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190c:	fe 01       	movw	r30, r28
    190e:	ff 96       	adiw	r30, 0x3f	; 63
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1924:	88 23       	and	r24, r24
    1926:	2c f4       	brge	.+10     	; 0x1932 <HLCD_voidInit+0x84>
		__ticks = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9e af       	std	Y+62, r25	; 0x3e
    192e:	8d af       	std	Y+61, r24	; 0x3d
    1930:	46 c0       	rjmp	.+140    	; 0x19be <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    1932:	fe 01       	movw	r30, r28
    1934:	ff 96       	adiw	r30, 0x3f	; 63
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	64 f5       	brge	.+88     	; 0x19a6 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	fe 01       	movw	r30, r28
    1950:	ed 5b       	subi	r30, 0xBD	; 189
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e2       	ldi	r20, 0x20	; 32
    1962:	51 e4       	ldi	r21, 0x41	; 65
    1964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9e af       	std	Y+62, r25	; 0x3e
    197a:	8d af       	std	Y+61, r24	; 0x3d
    197c:	0f c0       	rjmp	.+30     	; 0x199c <HLCD_voidInit+0xee>
    197e:	88 ec       	ldi	r24, 0xC8	; 200
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	9c af       	std	Y+60, r25	; 0x3c
    1984:	8b af       	std	Y+59, r24	; 0x3b
    1986:	8b ad       	ldd	r24, Y+59	; 0x3b
    1988:	9c ad       	ldd	r25, Y+60	; 0x3c
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <HLCD_voidInit+0xdc>
    198e:	9c af       	std	Y+60, r25	; 0x3c
    1990:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1992:	8d ad       	ldd	r24, Y+61	; 0x3d
    1994:	9e ad       	ldd	r25, Y+62	; 0x3e
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	9e af       	std	Y+62, r25	; 0x3e
    199a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199c:	8d ad       	ldd	r24, Y+61	; 0x3d
    199e:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	69 f7       	brne	.-38     	; 0x197e <HLCD_voidInit+0xd0>
    19a4:	16 c0       	rjmp	.+44     	; 0x19d2 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a6:	fe 01       	movw	r30, r28
    19a8:	ff 96       	adiw	r30, 0x3f	; 63
    19aa:	60 81       	ld	r22, Z
    19ac:	71 81       	ldd	r23, Z+1	; 0x01
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	9e af       	std	Y+62, r25	; 0x3e
    19bc:	8d af       	std	Y+61, r24	; 0x3d
    19be:	8d ad       	ldd	r24, Y+61	; 0x3d
    19c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19c2:	9a af       	std	Y+58, r25	; 0x3a
    19c4:	89 af       	std	Y+57, r24	; 0x39
    19c6:	89 ad       	ldd	r24, Y+57	; 0x39
    19c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <HLCD_voidInit+0x11c>
    19ce:	9a af       	std	Y+58, r25	; 0x3a
    19d0:	89 af       	std	Y+57, r24	; 0x39
	//Wait For more than 30ms after VDD rises to 4.5v
	_delay_ms(30);

	//Function Set then wait 39	Ms
	HLCD_voidSendCommand(FUNCTION_SET);
    19d2:	88 e3       	ldi	r24, 0x38	; 56
    19d4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendCommand>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e8       	ldi	r26, 0x80	; 128
    19de:	bf e3       	ldi	r27, 0x3F	; 63
    19e0:	8d ab       	std	Y+53, r24	; 0x35
    19e2:	9e ab       	std	Y+54, r25	; 0x36
    19e4:	af ab       	std	Y+55, r26	; 0x37
    19e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	6d a9       	ldd	r22, Y+53	; 0x35
    19ea:	7e a9       	ldd	r23, Y+54	; 0x36
    19ec:	8f a9       	ldd	r24, Y+55	; 0x37
    19ee:	98 ad       	ldd	r25, Y+56	; 0x38
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	89 ab       	std	Y+49, r24	; 0x31
    1a02:	9a ab       	std	Y+50, r25	; 0x32
    1a04:	ab ab       	std	Y+51, r26	; 0x33
    1a06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a08:	69 a9       	ldd	r22, Y+49	; 0x31
    1a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <HLCD_voidInit+0x17c>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	98 ab       	std	Y+48, r25	; 0x30
    1a26:	8f a7       	std	Y+47, r24	; 0x2f
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1a2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a30:	9c a9       	ldd	r25, Y+52	; 0x34
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	6d a9       	ldd	r22, Y+53	; 0x35
    1a44:	7e a9       	ldd	r23, Y+54	; 0x36
    1a46:	8f a9       	ldd	r24, Y+55	; 0x37
    1a48:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	98 ab       	std	Y+48, r25	; 0x30
    1a68:	8f a7       	std	Y+47, r24	; 0x2f
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <HLCD_voidInit+0x1dc>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9e a7       	std	Y+46, r25	; 0x2e
    1a72:	8d a7       	std	Y+45, r24	; 0x2d
    1a74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <HLCD_voidInit+0x1ca>
    1a7c:	9e a7       	std	Y+46, r25	; 0x2e
    1a7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a82:	98 a9       	ldd	r25, Y+48	; 0x30
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	98 ab       	std	Y+48, r25	; 0x30
    1a88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <HLCD_voidInit+0x1be>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	69 a9       	ldd	r22, Y+49	; 0x31
    1a96:	7a a9       	ldd	r23, Y+50	; 0x32
    1a98:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	98 ab       	std	Y+48, r25	; 0x30
    1aa6:	8f a7       	std	Y+47, r24	; 0x2f
    1aa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aaa:	98 a9       	ldd	r25, Y+48	; 0x30
    1aac:	9c a7       	std	Y+44, r25	; 0x2c
    1aae:	8b a7       	std	Y+43, r24	; 0x2b
    1ab0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <HLCD_voidInit+0x206>
    1ab8:	9c a7       	std	Y+44, r25	; 0x2c
    1aba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	//Display On/Off Control The wait 39 Ms
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    1abc:	8f e0       	ldi	r24, 0x0F	; 15
    1abe:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendCommand>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e8       	ldi	r26, 0x80	; 128
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	8f a3       	std	Y+39, r24	; 0x27
    1acc:	98 a7       	std	Y+40, r25	; 0x28
    1ace:	a9 a7       	std	Y+41, r26	; 0x29
    1ad0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ad6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ad8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a ef       	ldi	r20, 0xFA	; 250
    1ae0:	54 e4       	ldi	r21, 0x44	; 68
    1ae2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8b a3       	std	Y+35, r24	; 0x23
    1aec:	9c a3       	std	Y+36, r25	; 0x24
    1aee:	ad a3       	std	Y+37, r26	; 0x25
    1af0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1af2:	6b a1       	ldd	r22, Y+35	; 0x23
    1af4:	7c a1       	ldd	r23, Y+36	; 0x24
    1af6:	8d a1       	ldd	r24, Y+37	; 0x25
    1af8:	9e a1       	ldd	r25, Y+38	; 0x26
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <HLCD_voidInit+0x266>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9a a3       	std	Y+34, r25	; 0x22
    1b10:	89 a3       	std	Y+33, r24	; 0x21
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1b14:	6b a1       	ldd	r22, Y+35	; 0x23
    1b16:	7c a1       	ldd	r23, Y+36	; 0x24
    1b18:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b30:	89 a5       	ldd	r24, Y+41	; 0x29
    1b32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e2       	ldi	r20, 0x20	; 32
    1b3a:	51 e4       	ldi	r21, 0x41	; 65
    1b3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9a a3       	std	Y+34, r25	; 0x22
    1b52:	89 a3       	std	Y+33, r24	; 0x21
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <HLCD_voidInit+0x2c6>
    1b56:	88 ec       	ldi	r24, 0xC8	; 200
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	98 a3       	std	Y+32, r25	; 0x20
    1b5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b60:	98 a1       	ldd	r25, Y+32	; 0x20
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <HLCD_voidInit+0x2b4>
    1b66:	98 a3       	std	Y+32, r25	; 0x20
    1b68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	9a a3       	std	Y+34, r25	; 0x22
    1b72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	89 a1       	ldd	r24, Y+33	; 0x21
    1b76:	9a a1       	ldd	r25, Y+34	; 0x22
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <HLCD_voidInit+0x2a8>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b80:	7c a1       	ldd	r23, Y+36	; 0x24
    1b82:	8d a1       	ldd	r24, Y+37	; 0x25
    1b84:	9e a1       	ldd	r25, Y+38	; 0x26
    1b86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9a a3       	std	Y+34, r25	; 0x22
    1b90:	89 a3       	std	Y+33, r24	; 0x21
    1b92:	89 a1       	ldd	r24, Y+33	; 0x21
    1b94:	9a a1       	ldd	r25, Y+34	; 0x22
    1b96:	9e 8f       	std	Y+30, r25	; 0x1e
    1b98:	8d 8f       	std	Y+29, r24	; 0x1d
    1b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <HLCD_voidInit+0x2f0>
    1ba2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ba4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//Display Clear Then wait 2 ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendCommand>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 e0       	ldi	r26, 0x00	; 0
    1bb2:	b0 e4       	ldi	r27, 0x40	; 64
    1bb4:	89 8f       	std	Y+25, r24	; 0x19
    1bb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1bb8:	ab 8f       	std	Y+27, r26	; 0x1b
    1bba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a ef       	ldi	r20, 0xFA	; 250
    1bca:	54 e4       	ldi	r21, 0x44	; 68
    1bcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8d 8b       	std	Y+21, r24	; 0x15
    1bd6:	9e 8b       	std	Y+22, r25	; 0x16
    1bd8:	af 8b       	std	Y+23, r26	; 0x17
    1bda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <HLCD_voidInit+0x350>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 8b       	std	Y+20, r25	; 0x14
    1bfa:	8b 8b       	std	Y+19, r24	; 0x13
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1bfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1c00:	7e 89       	ldd	r23, Y+22	; 0x16
    1c02:	8f 89       	ldd	r24, Y+23	; 0x17
    1c04:	98 8d       	ldd	r25, Y+24	; 0x18
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	69 8d       	ldd	r22, Y+25	; 0x19
    1c18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9c 8b       	std	Y+20, r25	; 0x14
    1c3c:	8b 8b       	std	Y+19, r24	; 0x13
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <HLCD_voidInit+0x3b0>
    1c40:	88 ec       	ldi	r24, 0xC8	; 200
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9a 8b       	std	Y+18, r25	; 0x12
    1c46:	89 8b       	std	Y+17, r24	; 0x11
    1c48:	89 89       	ldd	r24, Y+17	; 0x11
    1c4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <HLCD_voidInit+0x39e>
    1c50:	9a 8b       	std	Y+18, r25	; 0x12
    1c52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	9c 89       	ldd	r25, Y+20	; 0x14
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c60:	9c 89       	ldd	r25, Y+20	; 0x14
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <HLCD_voidInit+0x392>
    1c66:	14 c0       	rjmp	.+40     	; 0x1c90 <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9c 8b       	std	Y+20, r25	; 0x14
    1c7a:	8b 8b       	std	Y+19, r24	; 0x13
    1c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c80:	98 8b       	std	Y+16, r25	; 0x10
    1c82:	8f 87       	std	Y+15, r24	; 0x0f
    1c84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c86:	98 89       	ldd	r25, Y+16	; 0x10
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <HLCD_voidInit+0x3da>
    1c8c:	98 8b       	std	Y+16, r25	; 0x10
    1c8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	//Entry Mode Set Then wait 39 Ms
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    1c90:	86 e0       	ldi	r24, 0x06	; 6
    1c92:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendCommand>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 e8       	ldi	r26, 0x80	; 128
    1c9c:	bf e3       	ldi	r27, 0x3F	; 63
    1c9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ca0:	9c 87       	std	Y+12, r25	; 0x0c
    1ca2:	ad 87       	std	Y+13, r26	; 0x0d
    1ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a ef       	ldi	r20, 0xFA	; 250
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	a9 87       	std	Y+9, r26	; 0x09
    1cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <HLCD_voidInit+0x43a>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <HLCD_voidInit+0x49a>
    1d2a:	88 ec       	ldi	r24, 0xC8	; 200
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <HLCD_voidInit+0x488>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <HLCD_voidInit+0x47c>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <HLCD_voidInit+0x4c4>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    1d7a:	ca 5b       	subi	r28, 0xBA	; 186
    1d7c:	df 4f       	sbci	r29, 0xFF	; 255
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	1f 91       	pop	r17
    1d8e:	0f 91       	pop	r16
    1d90:	08 95       	ret

00001d92 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(void)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	2e 97       	sbiw	r28, 0x0e	; 14
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
	//Display Clear Then wait 2 ms
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendCommand>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e4       	ldi	r27, 0x40	; 64
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
    1db6:	9c 87       	std	Y+12, r25	; 0x0c
    1db8:	ad 87       	std	Y+13, r26	; 0x0d
    1dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a ef       	ldi	r20, 0xFA	; 250
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8f 83       	std	Y+7, r24	; 0x07
    1dd6:	98 87       	std	Y+8, r25	; 0x08
    1dd8:	a9 87       	std	Y+9, r26	; 0x09
    1dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9e 83       	std	Y+6, r25	; 0x06
    1dfa:	8d 83       	std	Y+5, r24	; 0x05
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	9e 83       	std	Y+6, r25	; 0x06
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <HLCD_voidClearDisplay+0xcc>
    1e40:	88 ec       	ldi	r24, 0xC8	; 200
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <HLCD_voidClearDisplay+0xba>
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <HLCD_voidClearDisplay+0xae>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	9a 81       	ldd	r25, Y+2	; 0x02
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <HLCD_voidClearDisplay+0xf6>
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1e90:	2e 96       	adiw	r28, 0x0e	; 14
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <HLCD_DisplayString>:

void HLCD_DisplayString(u8 *A_u8PtrToString)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <HLCD_DisplayString+0x6>
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	0b c0       	rjmp	.+22     	; 0x1ec8 <HLCD_DisplayString+0x26>
	while(*A_u8PtrToString > 0)
	{
		HLCD_voidSendData(*A_u8PtrToString++);
    1eb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb6:	20 81       	ld	r18, Z
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	9a 81       	ldd	r25, Y+2	; 0x02
    1ebc:	01 96       	adiw	r24, 0x01	; 1
    1ebe:	9a 83       	std	Y+2, r25	; 0x02
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	82 2f       	mov	r24, r18
    1ec4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <HLCD_voidSendData>

}

void HLCD_DisplayString(u8 *A_u8PtrToString)
{
	while(*A_u8PtrToString > 0)
    1ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 23       	and	r24, r24
    1ed0:	81 f7       	brne	.-32     	; 0x1eb2 <HLCD_DisplayString+0x10>
	{
		HLCD_voidSendData(*A_u8PtrToString++);
	}
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <HLCD_GoToPos>:


void HLCD_GoToPos(LCD_ROW_E A_LCDRow,LCD_COL_E A_LCDCol)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <HLCD_GoToPos+0x6>
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <HLCD_GoToPos+0x8>
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_LCDRow)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	3c 83       	std	Y+4, r19	; 0x04
    1ef4:	2b 83       	std	Y+3, r18	; 0x03
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	81 30       	cpi	r24, 0x01	; 1
    1efc:	91 05       	cpc	r25, r1
    1efe:	31 f0       	breq	.+12     	; 0x1f0c <HLCD_GoToPos+0x30>
    1f00:	2b 81       	ldd	r18, Y+3	; 0x03
    1f02:	3c 81       	ldd	r19, Y+4	; 0x04
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	31 f0       	breq	.+12     	; 0x1f16 <HLCD_GoToPos+0x3a>
    1f0a:	09 c0       	rjmp	.+18     	; 0x1f1e <HLCD_GoToPos+0x42>
	{
	case LCD_ROW1:
		HLCD_voidSendCommand(ROW1_BASE_ADD + A_LCDCol);
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	81 58       	subi	r24, 0x81	; 129
    1f10:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendCommand>
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <HLCD_GoToPos+0x42>
		break;
	case LCD_ROW2:
		HLCD_voidSendCommand(ROW2_BASE_ADD + A_LCDCol);
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	81 54       	subi	r24, 0x41	; 65
    1f1a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendCommand>
		break;

	}
}
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(u32 A_u32Number)
{
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	28 97       	sbiw	r28, 0x08	; 8
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	6d 83       	std	Y+5, r22	; 0x05
    1f4a:	7e 83       	std	Y+6, r23	; 0x06
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
    1f4e:	98 87       	std	Y+8, r25	; 0x08
	u32 local_u32Num = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	a0 e0       	ldi	r26, 0x00	; 0
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	ab 83       	std	Y+3, r26	; 0x03
    1f5e:	bc 83       	std	Y+4, r27	; 0x04
	if(A_u32Number == 0)
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	af 81       	ldd	r26, Y+7	; 0x07
    1f66:	b8 85       	ldd	r27, Y+8	; 0x08
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	a1 05       	cpc	r26, r1
    1f6c:	b1 05       	cpc	r27, r1
    1f6e:	d1 f5       	brne	.+116    	; 0x1fe4 <HLCD_voidDisplayNumber+0xb8>
	{
		HLCD_voidSendData('0');
    1f70:	80 e3       	ldi	r24, 0x30	; 48
    1f72:	0e 94 b9 0b 	call	0x1772	; 0x1772 <HLCD_voidSendData>
    1f76:	36 c0       	rjmp	.+108    	; 0x1fe4 <HLCD_voidDisplayNumber+0xb8>
	}
	while(A_u32Number != 0)
	{
		local_u32Num = ((local_u32Num * 10) + A_u32Number % 10);
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f7e:	bc 81       	ldd	r27, Y+4	; 0x04
    1f80:	2a e0       	ldi	r18, 0x0A	; 10
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 76 10 	call	0x20ec	; 0x20ec <__mulsi3>
    1f90:	7b 01       	movw	r14, r22
    1f92:	8c 01       	movw	r16, r24
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	af 81       	ldd	r26, Y+7	; 0x07
    1f9a:	b8 85       	ldd	r27, Y+8	; 0x08
    1f9c:	2a e0       	ldi	r18, 0x0A	; 10
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	bc 01       	movw	r22, r24
    1fa6:	cd 01       	movw	r24, r26
    1fa8:	0e 94 95 10 	call	0x212a	; 0x212a <__udivmodsi4>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8e 0d       	add	r24, r14
    1fb2:	9f 1d       	adc	r25, r15
    1fb4:	a0 1f       	adc	r26, r16
    1fb6:	b1 1f       	adc	r27, r17
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	ab 83       	std	Y+3, r26	; 0x03
    1fbe:	bc 83       	std	Y+4, r27	; 0x04
		A_u32Number = A_u32Number / 10;
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	af 81       	ldd	r26, Y+7	; 0x07
    1fc6:	b8 85       	ldd	r27, Y+8	; 0x08
    1fc8:	2a e0       	ldi	r18, 0x0A	; 10
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 95 10 	call	0x212a	; 0x212a <__udivmodsi4>
    1fd8:	da 01       	movw	r26, r20
    1fda:	c9 01       	movw	r24, r18
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	af 83       	std	Y+7, r26	; 0x07
    1fe2:	b8 87       	std	Y+8, r27	; 0x08
	u32 local_u32Num = 1;
	if(A_u32Number == 0)
	{
		HLCD_voidSendData('0');
	}
	while(A_u32Number != 0)
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	af 81       	ldd	r26, Y+7	; 0x07
    1fea:	b8 85       	ldd	r27, Y+8	; 0x08
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	a1 05       	cpc	r26, r1
    1ff0:	b1 05       	cpc	r27, r1
    1ff2:	11 f6       	brne	.-124    	; 0x1f78 <HLCD_voidDisplayNumber+0x4c>
    1ff4:	23 c0       	rjmp	.+70     	; 0x203c <HLCD_voidDisplayNumber+0x110>
		A_u32Number = A_u32Number / 10;

	}
	while(A_u32Number != 1)
	{
		HLCD_voidSendData((A_u32Number % 10) + 48);
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	af 81       	ldd	r26, Y+7	; 0x07
    1ffc:	b8 85       	ldd	r27, Y+8	; 0x08
    1ffe:	2a e0       	ldi	r18, 0x0A	; 10
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	bc 01       	movw	r22, r24
    2008:	cd 01       	movw	r24, r26
    200a:	0e 94 95 10 	call	0x212a	; 0x212a <__udivmodsi4>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	80 5d       	subi	r24, 0xD0	; 208
    2014:	0e 94 b9 0b 	call	0x1772	; 0x1772 <HLCD_voidSendData>
		local_u32Num = local_u32Num / 10;
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	ab 81       	ldd	r26, Y+3	; 0x03
    201e:	bc 81       	ldd	r27, Y+4	; 0x04
    2020:	2a e0       	ldi	r18, 0x0A	; 10
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 95 10 	call	0x212a	; 0x212a <__udivmodsi4>
    2030:	da 01       	movw	r26, r20
    2032:	c9 01       	movw	r24, r18
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	ab 83       	std	Y+3, r26	; 0x03
    203a:	bc 83       	std	Y+4, r27	; 0x04
	{
		local_u32Num = ((local_u32Num * 10) + A_u32Number % 10);
		A_u32Number = A_u32Number / 10;

	}
	while(A_u32Number != 1)
    203c:	8d 81       	ldd	r24, Y+5	; 0x05
    203e:	9e 81       	ldd	r25, Y+6	; 0x06
    2040:	af 81       	ldd	r26, Y+7	; 0x07
    2042:	b8 85       	ldd	r27, Y+8	; 0x08
    2044:	81 30       	cpi	r24, 0x01	; 1
    2046:	91 05       	cpc	r25, r1
    2048:	a1 05       	cpc	r26, r1
    204a:	b1 05       	cpc	r27, r1
    204c:	a1 f6       	brne	.-88     	; 0x1ff6 <HLCD_voidDisplayNumber+0xca>
	{
		HLCD_voidSendData((A_u32Number % 10) + 48);
		local_u32Num = local_u32Num / 10;
	}
}
    204e:	28 96       	adiw	r28, 0x08	; 8
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	08 95       	ret

00002068 <HLCD_SendSpecialSymbol>:


void HLCD_SendSpecialSymbol(u8 *A_pu8SSymbolArray,LCD_PATTERN_E A_PatternNum,LCD_ROW_E A_RowNo,LCD_COL_E A_ColNo)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	27 97       	sbiw	r28, 0x07	; 7
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
    2080:	6d 83       	std	Y+5, r22	; 0x05
    2082:	4e 83       	std	Y+6, r20	; 0x06
    2084:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAdsress;
	//Calculate CGRAM Address
	local_u8CGRAMAdsress = A_PatternNum * 8;
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	88 2f       	mov	r24, r24
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAdsress,6);
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	80 64       	ori	r24, 0x40	; 64
    209e:	8a 83       	std	Y+2, r24	; 0x02
	//Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAdsress);
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	0e 94 1b 0b 	call	0x1636	; 0x1636 <HLCD_voidSendCommand>

	for(u8 local_u8Counter = 0; local_u8Counter<8; local_u8Counter++)
    20a6:	19 82       	std	Y+1, r1	; 0x01
    20a8:	0e c0       	rjmp	.+28     	; 0x20c6 <HLCD_SendSpecialSymbol+0x5e>
	{
		//Send Byte by Byte From Symbol Array
		HLCD_voidSendData(A_pu8SSymbolArray[local_u8Counter]);
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	fc 01       	movw	r30, r24
    20b6:	e2 0f       	add	r30, r18
    20b8:	f3 1f       	adc	r31, r19
    20ba:	80 81       	ld	r24, Z
    20bc:	0e 94 b9 0b 	call	0x1772	; 0x1772 <HLCD_voidSendData>
	local_u8CGRAMAdsress = A_PatternNum * 8;
	SET_BIT(local_u8CGRAMAdsress,6);
	//Send Set CGRAM Address Command
	HLCD_voidSendCommand(local_u8CGRAMAdsress);

	for(u8 local_u8Counter = 0; local_u8Counter<8; local_u8Counter++)
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	88 30       	cpi	r24, 0x08	; 8
    20ca:	78 f3       	brcs	.-34     	; 0x20aa <HLCD_SendSpecialSymbol+0x42>
		//Send Byte by Byte From Symbol Array
		HLCD_voidSendData(A_pu8SSymbolArray[local_u8Counter]);

	}
	//Send Command To set DDRAM Address
	HLCD_GoToPos(A_RowNo,A_ColNo);
    20cc:	8e 81       	ldd	r24, Y+6	; 0x06
    20ce:	6f 81       	ldd	r22, Y+7	; 0x07
    20d0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <HLCD_GoToPos>
	//Display Pattern
	HLCD_voidSendData(A_PatternNum);
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <HLCD_voidSendData>

}
    20da:	27 96       	adiw	r28, 0x07	; 7
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <__mulsi3>:
    20ec:	62 9f       	mul	r22, r18
    20ee:	d0 01       	movw	r26, r0
    20f0:	73 9f       	mul	r23, r19
    20f2:	f0 01       	movw	r30, r0
    20f4:	82 9f       	mul	r24, r18
    20f6:	e0 0d       	add	r30, r0
    20f8:	f1 1d       	adc	r31, r1
    20fa:	64 9f       	mul	r22, r20
    20fc:	e0 0d       	add	r30, r0
    20fe:	f1 1d       	adc	r31, r1
    2100:	92 9f       	mul	r25, r18
    2102:	f0 0d       	add	r31, r0
    2104:	83 9f       	mul	r24, r19
    2106:	f0 0d       	add	r31, r0
    2108:	74 9f       	mul	r23, r20
    210a:	f0 0d       	add	r31, r0
    210c:	65 9f       	mul	r22, r21
    210e:	f0 0d       	add	r31, r0
    2110:	99 27       	eor	r25, r25
    2112:	72 9f       	mul	r23, r18
    2114:	b0 0d       	add	r27, r0
    2116:	e1 1d       	adc	r30, r1
    2118:	f9 1f       	adc	r31, r25
    211a:	63 9f       	mul	r22, r19
    211c:	b0 0d       	add	r27, r0
    211e:	e1 1d       	adc	r30, r1
    2120:	f9 1f       	adc	r31, r25
    2122:	bd 01       	movw	r22, r26
    2124:	cf 01       	movw	r24, r30
    2126:	11 24       	eor	r1, r1
    2128:	08 95       	ret

0000212a <__udivmodsi4>:
    212a:	a1 e2       	ldi	r26, 0x21	; 33
    212c:	1a 2e       	mov	r1, r26
    212e:	aa 1b       	sub	r26, r26
    2130:	bb 1b       	sub	r27, r27
    2132:	fd 01       	movw	r30, r26
    2134:	0d c0       	rjmp	.+26     	; 0x2150 <__udivmodsi4_ep>

00002136 <__udivmodsi4_loop>:
    2136:	aa 1f       	adc	r26, r26
    2138:	bb 1f       	adc	r27, r27
    213a:	ee 1f       	adc	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	a2 17       	cp	r26, r18
    2140:	b3 07       	cpc	r27, r19
    2142:	e4 07       	cpc	r30, r20
    2144:	f5 07       	cpc	r31, r21
    2146:	20 f0       	brcs	.+8      	; 0x2150 <__udivmodsi4_ep>
    2148:	a2 1b       	sub	r26, r18
    214a:	b3 0b       	sbc	r27, r19
    214c:	e4 0b       	sbc	r30, r20
    214e:	f5 0b       	sbc	r31, r21

00002150 <__udivmodsi4_ep>:
    2150:	66 1f       	adc	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	88 1f       	adc	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	1a 94       	dec	r1
    215a:	69 f7       	brne	.-38     	; 0x2136 <__udivmodsi4_loop>
    215c:	60 95       	com	r22
    215e:	70 95       	com	r23
    2160:	80 95       	com	r24
    2162:	90 95       	com	r25
    2164:	9b 01       	movw	r18, r22
    2166:	ac 01       	movw	r20, r24
    2168:	bd 01       	movw	r22, r26
    216a:	cf 01       	movw	r24, r30
    216c:	08 95       	ret

0000216e <__prologue_saves__>:
    216e:	2f 92       	push	r2
    2170:	3f 92       	push	r3
    2172:	4f 92       	push	r4
    2174:	5f 92       	push	r5
    2176:	6f 92       	push	r6
    2178:	7f 92       	push	r7
    217a:	8f 92       	push	r8
    217c:	9f 92       	push	r9
    217e:	af 92       	push	r10
    2180:	bf 92       	push	r11
    2182:	cf 92       	push	r12
    2184:	df 92       	push	r13
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	ca 1b       	sub	r28, r26
    2198:	db 0b       	sbc	r29, r27
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	09 94       	ijmp

000021a6 <__epilogue_restores__>:
    21a6:	2a 88       	ldd	r2, Y+18	; 0x12
    21a8:	39 88       	ldd	r3, Y+17	; 0x11
    21aa:	48 88       	ldd	r4, Y+16	; 0x10
    21ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21b8:	b9 84       	ldd	r11, Y+9	; 0x09
    21ba:	c8 84       	ldd	r12, Y+8	; 0x08
    21bc:	df 80       	ldd	r13, Y+7	; 0x07
    21be:	ee 80       	ldd	r14, Y+6	; 0x06
    21c0:	fd 80       	ldd	r15, Y+5	; 0x05
    21c2:	0c 81       	ldd	r16, Y+4	; 0x04
    21c4:	1b 81       	ldd	r17, Y+3	; 0x03
    21c6:	aa 81       	ldd	r26, Y+2	; 0x02
    21c8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ca:	ce 0f       	add	r28, r30
    21cc:	d1 1d       	adc	r29, r1
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	ed 01       	movw	r28, r26
    21da:	08 95       	ret

000021dc <_exit>:
    21dc:	f8 94       	cli

000021de <__stop_program>:
    21de:	ff cf       	rjmp	.-2      	; 0x21de <__stop_program>
